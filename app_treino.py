# app_treino.py (Vers√£o Final com Modo de Treino Interativo)
"""
FitPro - App completo pronto para deploy
- Spinner em opera√ß√µes de I/O (salvar/carregar)
- Confirma√ß√µes elegantes (st.dialog() quando dispon√≠vel, fallback)
- Calend√°rio visual de treinos
- Firebase (Auth + Firestore) via st.secrets["firebase_credentials"]
- Compatibilidade Streamlit (st.rerun fallback)
- Gera√ß√£o de treino totalmente personalizada baseada em question√°rio.
- L√≥gica de substitui√ß√£o de exerc√≠cios baseada em restri√ß√µes.
- Banco de exerc√≠cios expandido com categorias e alternativas.
- Login persistente com cookies para n√£o deslogar ao atualizar a p√°gina.
- Uso de st.cache_resource para otimizar a conex√£o com Firebase.
- Funcionalidade de Rede Social com posts, fotos, curtidas e coment√°rios.
- Sistema de Seguir/Deixar de Seguir usu√°rios e Feed Personalizado.
- Interface da p√°gina "Meu Treino" com busca din√¢mica de GIFs na internet.
- [NOVO] Modo de Treino Interativo com checklist, timer de descanso e registro em tempo real.
"""
import os
import re
import urllib.parse
import io
import json
import time
import base64
import logging
import requests  # Importa√ß√£o necess√°ria para buscar GIFs
from datetime import datetime, date, timedelta
from typing import Any, Dict, List, Optional
from itertools import cycle

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from PIL import Image, ImageChops, ImageFilter, ImageStat
from streamlit_cookies_manager import CookieManager


import random
# Optional SSIM
try:
    from skimage.metrics import structural_similarity as ssim  # type: ignore

    SKIMAGE_AVAILABLE = True
except Exception:
    SKIMAGE_AVAILABLE = False

# Firebase admin
import firebase_admin
from firebase_admin import credentials, auth, firestore

# Suppress noisy logs
os.environ["GRPC_VERBOSITY"] = "NONE"
logging.getLogger("google").setLevel(logging.ERROR)

# ---------------------------
# Streamlit compatibility
# ---------------------------
if not hasattr(st, "rerun") and hasattr(st, "experimental_rerun"):
    st.rerun = st.experimental_rerun  # type: ignore

HAS_ST_DIALOG = hasattr(st, "dialog")
HAS_ST_MODAL = hasattr(st, "modal")

# ---------------------------
# Page config & Cookie Manager
# ---------------------------
st.set_page_config(page_title="FitPro", page_icon="üèãÔ∏è", layout="wide")
cookies = CookieManager()

if not cookies.ready():
    st.stop()


# ---------------------------
# Helpers
# ---------------------------
def iso_now() -> str:
    return datetime.now().isoformat()


def sha256(s: str) -> str:
    import hashlib
    return hashlib.sha256(s.encode()).hexdigest()


def valid_email(e: str) -> bool:
    return bool(re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', e or ''))


def b64_from_pil(img: Image.Image) -> str:
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    return base64.b64encode(buf.getvalue()).decode()


def pil_from_b64(b64: str) -> Image.Image:
    return Image.open(io.BytesIO(base64.b64decode(b64))).convert('RGBA')


def overlay_blend(img1: Image.Image, img2: Image.Image, alpha: float) -> Image.Image:
    img1 = img1.convert('RGBA').resize(img2.size)
    return Image.blend(img1, img2, alpha)


def compare_images_metric(img1: Image.Image, img2: Image.Image) -> Dict[str, Any]:
    img1_s = img1.convert('L').resize((256, 256))
    img2_s = img2.convert('L').resize((256, 256))
    arr1 = np.array(img1_s).astype(float)
    arr2 = np.array(img2_s).astype(float)
    mse = float(((arr1 - arr2) ** 2).mean())
    res = {'mse': mse}
    if SKIMAGE_AVAILABLE:
        try:
            res['ssim'] = float(ssim(arr1, arr2))
        except Exception:
            res['ssim'] = None
    else:
        res['ssim'] = None
    e1 = img1_s.filter(ImageFilter.FIND_EDGES)
    e2 = img2_s.filter(ImageFilter.FIND_EDGES)
    ed = ImageChops.difference(e1, e2)
    stat = ImageStat.Stat(ed)
    res['edge_diff_mean'] = float(np.mean(stat.mean))
    return res


# ---------------------------
# Firebase initialization
# ---------------------------
@st.cache_resource
def init_firebase():
    try:
        creds = dict(st.secrets["firebase_credentials"])
        if "private_key" in creds and isinstance(creds["private_key"], str):
            creds["private_key"] = creds["private_key"].replace('\\n', '\n')
        if not firebase_admin._apps:
            cred = credentials.Certificate(creds)
            firebase_admin.initialize_app(cred)
        return firestore.client()
    except Exception as e:
        st.error("Erro inicializando Firebase. Verifique st.secrets['firebase_credentials'].")
        st.error(str(e))
        st.stop()


if 'db' not in st.session_state:
    st.session_state['db'] = init_firebase()
db = st.session_state['db']


# ---------------------------
# Session defaults
# ---------------------------
def ensure_session_defaults():
    defaults = {
        'usuario_logado': None,
        'user_uid': None,
        'dados_usuario': None,
        'plano_treino': None,
        'frequencia': [],
        'historico_treinos': [],
        'historico_peso': [],
        'metas': [],
        'fotos_progresso': [],
        'medidas': [],
        'feedbacks': [],
        'ciclo_atual': None,
        'role': None,
        'notificacoes': [],
        'settings': {'theme': 'light', 'notify_on_login': True},
        'offline_mode': False,
        'confirm_excluir_foto': False,
        'foto_a_excluir': None,

        # Vari√°veis para o Modo Treino
        'workout_in_progress': False,
        'current_workout_plan': None,
        'current_exercise_index': 0,
        'workout_log': [],
        'rest_timer_end': None,
    }
    for k, v in defaults.items():
        if k not in st.session_state:
            st.session_state[k] = v


ensure_session_defaults()


# ---------------------------
# Fun√ß√£o para buscar GIF de exerc√≠cio
# ---------------------------
@st.cache_data(ttl=3600 * 24)  # Cache de 24 horas
def find_exercise_video_youtube(exercise_name: str) -> Optional[str]:
    """Busca v√≠deo no YouTube via scraping e regex, retorna URL."""
    # st.write(f"--- Iniciando busca para: {exercise_name} ---") # DEBUG
    search_terms = [
        f"como fazer {exercise_name} execu√ß√£o correta",
        f"{exercise_name} tutorial pt-br",
        f"{exercise_name} exercise tutorial",
        f"{exercise_name} exercise form",
        exercise_name
    ]
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    for term in search_terms:
        try:
            # st.write(f"Tentando busca com termo: '{term}'") # DEBUG
            query = urllib.parse.urlencode({'search_query': term})
            url = f"https://www.youtube.com/results?{query}"
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            html_content = response.text
            video_ids = re.findall(r'"/watch\?v=([a-zA-Z0-9_-]{11})"', html_content)
            # st.write(f"IDs encontrados para '{term}': {video_ids}") # DEBUG

            if video_ids:
                first_unique_id = None
                seen_ids = set()
                for video_id in video_ids:
                    if video_id not in seen_ids:
                        first_unique_id = video_id
                        seen_ids.add(video_id)
                        break
                if first_unique_id:
                    video_url = f"https://www.youtube.com/watch?v={first_unique_id}"
                    # st.write(f"*** Encontrado v√≠deo: {video_url} ***") # DEBUG
                    return video_url
        except requests.exceptions.RequestException as e:
            # st.write(f"!!! Erro de rede durante a busca por '{term}': {e}") # DEBUG
            time.sleep(1)
            continue
        except Exception as e:
            # st.write(f"!!! Erro geral durante a busca por '{term}': {e}") # DEBUG
            continue
    # st.write(f"--- Busca finalizada para {exercise_name}, nenhum v√≠deo encontrado. ---") # DEBUG
    return None

def trocar_exercicio(nome_treino, exercise_index, exercicio_atual):
    """Substitui um exerc√≠cio por outro do mesmo grupo muscular."""
    try:
        # 1. Encontrar o grupo muscular do exerc√≠cio a ser trocado
        grupo_muscular = EXERCICIOS_DB.get(exercicio_atual, {}).get('grupo')
        if not grupo_muscular:
            st.warning("N√£o foi poss√≠vel identificar o grupo muscular para encontrar um substituto.")
            return

        # 2. Encontrar todos os exerc√≠cios candidatos do mesmo grupo
        df_treino_atual = pd.DataFrame(st.session_state['plano_treino'][nome_treino])
        exercicios_no_plano = set(df_treino_atual['Exerc√≠cio'])

        candidatos = [
            ex for ex, details in EXERCICIOS_DB.items()
            if details.get('grupo') == grupo_muscular and ex not in exercicios_no_plano
        ]

        # 3. Se houver candidatos, escolher um e fazer a troca
        if candidatos:
            novo_exercicio = random.choice(candidatos)

            # Atualiza o DataFrame no session_state
            df_para_atualizar = st.session_state['plano_treino'][nome_treino]
            # Convertendo para DataFrame para manipula√ß√£o segura
            df_manipulavel = pd.DataFrame(df_para_atualizar)
            df_manipulavel.loc[exercise_index, 'Exerc√≠cio'] = novo_exercicio

            # Salva de volta no formato de lista de dicion√°rios
            st.session_state['plano_treino'][nome_treino] = df_manipulavel.to_dict('records')

            st.toast(f"'{exercicio_atual}' trocado por '{novo_exercicio}'!")

            # 4. Salvar a altera√ß√£o no Firebase
            salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
        else:
            st.warning("Nenhum exerc√≠cio alternativo encontrado para este grupo muscular.")

    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar trocar o exerc√≠cio: {e}")

def trocar_exercicio(nome_treino, exercise_index, exercicio_atual):
    """Substitui um exerc√≠cio por outro do mesmo grupo muscular."""
    try:
        # 1. Encontrar o grupo muscular do exerc√≠cio a ser trocado
        grupo_muscular = EXERCICIOS_DB.get(exercicio_atual, {}).get('grupo')
        if not grupo_muscular:
            st.warning("N√£o foi poss√≠vel identificar o grupo muscular para encontrar um substituto.")
            return

        # 2. Encontrar todos os exerc√≠cios candidatos do mesmo grupo
        df_treino_atual = pd.DataFrame(st.session_state['plano_treino'][nome_treino])
        exercicios_no_plano = set(df_treino_atual['Exerc√≠cio'])

        candidatos = [
            ex for ex, details in EXERCICIOS_DB.items()
            if details.get('grupo') == grupo_muscular and ex not in exercicios_no_plano
        ]

        # 3. Se houver candidatos, escolher um e fazer a troca
        if candidatos:
            novo_exercicio = random.choice(candidatos)

            # Atualiza o DataFrame no session_state
            df_para_atualizar = st.session_state['plano_treino'][nome_treino]
            # Convertendo para DataFrame para manipula√ß√£o segura
            df_manipulavel = pd.DataFrame(df_para_atualizar)
            df_manipulavel.loc[exercise_index, 'Exerc√≠cio'] = novo_exercicio

            # Salva de volta no formato de lista de dicion√°rios
            st.session_state['plano_treino'][nome_treino] = df_manipulavel.to_dict('records')

            st.toast(f"'{exercicio_atual}' trocado por '{novo_exercicio}'!")

            # 4. Salvar a altera√ß√£o no Firebase
            salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
        else:
            st.warning("Nenhum exerc√≠cio alternativo encontrado para este grupo muscular.")

    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar trocar o exerc√≠cio: {e}")

# ---------------------------
# Banco de Exerc√≠cios Expandido
# ---------------------------
EXERCICIOS_DB = {
    # Pernas (Foco Quadr√≠ceps/Geral)
    'Agachamento com Barra': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar', 'Joelhos'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra apoiada nos ombros/trap√©zio. P√©s afastados na largura dos ombros. Des√ßa flexionando quadril e joelhos, mantendo a coluna neutra e o peito aberto. Suba estendendo quadril e joelhos.'
    },
    'Agachamento com Halteres': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Joelhos'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Segure halteres ao lado do corpo com as palmas voltadas para dentro. Mantenha o tronco ereto, des√ßa flexionando quadril e joelhos. Suba estendendo.'
    },
    'Agachamento Goblet': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Joelhos'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Segure um halter verticalmente contra o peito. P√©s levemente mais afastados que os ombros. Des√ßa o mais fundo poss√≠vel, mantendo o tronco ereto e os cotovelos entre os joelhos. Suba.'
    },
    'Leg Press 45¬∞': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sente-se na m√°quina com as costas bem apoiadas. P√©s na plataforma afastados na largura dos ombros. Destrave e des√ßa controladamente flexionando os joelhos (aprox. 90¬∞). Empurre de volta √† posi√ß√£o inicial sem travar os joelhos.'
    },
    'Cadeira Extensora': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sente-se na m√°quina, ajuste o apoio dos tornozelos. Estenda completamente os joelhos, levantando o peso. Retorne controladamente √† posi√ß√£o inicial.'
    },
    # Pernas (Foco Posterior)
    'Mesa Flexora': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deite-se de bru√ßos na m√°quina, joelhos alinhados com o eixo, tornozelos sob o apoio. Flexione os joelhos trazendo os calcanhares em dire√ß√£o aos gl√∫teos. Retorne controladamente.'
    },
    'Stiff com Halteres': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Lombar'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres na frente das coxas. Mantenha os joelhos levemente flexionados (quase estendidos). Des√ßa o tronco projetando o quadril para tr√°s, mantendo a coluna reta e os halteres pr√≥ximos √†s pernas. Suba contraindo posteriores e gl√∫teos.'
    },
    # Gl√∫teos (Considerados como parte de 'Pernas')
    'Eleva√ß√£o P√©lvica': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Barra', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas com os ombros apoiados em um banco e joelhos flexionados. Apoie uma barra sobre o quadril. Des√ßa o quadril e eleve-o o m√°ximo poss√≠vel, contraindo os gl√∫teos no topo. Controle a descida.'
    },
    'Extens√£o de Quadril (Coice)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal/Caneleiras/Polia', 'restricoes': ['Lombar'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em quatro apoios ou em p√© na polia/com caneleiras. Estenda uma perna para tr√°s e para cima, contraindo o gl√∫teo. Mantenha o abd√¥men contra√≠do e evite arquear a lombar. Retorne controladamente.'
    },
    'Abdu√ß√£o de Quadril': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina/El√°sticos/Peso Corporal', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina abdutora, deitado de lado, ou em p√© com el√°sticos/caneleiras. Afaste a(s) perna(s) lateralmente contra a resist√™ncia, focando no gl√∫teo lateral (m√©dio/m√≠nimo). Retorne controladamente.'
    },
    'Gl√∫teo Sapinho (Frog Pump)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, junte as solas dos p√©s e afaste os joelhos (posi√ß√£o de "sapo"). Calcanhares pr√≥ximos aos gl√∫teos. Eleve o quadril do ch√£o, contraindo fortemente os gl√∫teos. Des√ßa controladamente.'
     },
    # Panturrilhas
    'Panturrilha no Leg Press': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado no Leg Press, ponta dos p√©s na parte inferior da plataforma, calcanhares para fora. Joelhos estendidos (n√£o travados). Empurre a plataforma apenas com a flex√£o plantar. Retorne alongando.'
    },

    # Peito
    'Supino Reto com Barra': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Ombros'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, p√©s firmes no ch√£o. Pegada na barra um pouco mais larga que os ombros. Des√ßa a barra controladamente at√© tocar levemente o meio do peito. Empurre a barra de volta para cima.'
    },
    'Supino Reto com Halteres': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, segure os halteres acima do peito com as palmas para frente. Des√ßa os halteres lateralmente, flexionando os cotovelos. Empurre os halteres de volta para cima.'
    },
    'Supino Inclinado com Halteres': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em um banco inclinado (30-45¬∞). Movimento similar ao supino reto com halteres, mas descendo os pesos em dire√ß√£o √† parte superior do peito.'
    },
    'Crucifixo com Halteres': {
        'grupo': 'Peito', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, halteres acima do peito, palmas das m√£os voltadas uma para a outra, cotovelos levemente flexionados. Abra os bra√ßos descendo os halteres lateralmente em um arco. Retorne √† posi√ß√£o inicial contraindo o peito.'
    },
    'Flex√£o de Bra√ßo': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Punhos'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'M√£os no ch√£o afastadas na largura dos ombros (ou um pouco mais). Corpo reto da cabe√ßa aos calcanhares. Des√ßa o peito flexionando os cotovelos. Empurre de volta √† posi√ß√£o inicial.'
    },

    # Costas
    'Barra Fixa': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': [], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Pendure-se na barra com pegada pronada (palmas para frente) ou supinada (palmas para voc√™), m√£os afastadas na largura dos ombros ou mais. Puxe o corpo para cima at√© o queixo passar a barra, contraindo as costas. Des√ßa controladamente.'
    },
    'Puxada Alta (Lat Pulldown)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina, ajuste o apoio dos joelhos. Pegada na barra mais larga que os ombros. Puxe a barra verticalmente em dire√ß√£o √† parte superior do peito, mantendo o tronco est√°vel e contraindo as costas. Retorne controladamente.'
    },
    'Remada Curvada com Barra': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco √† frente (45-60¬∞), mantendo a coluna reta e os joelhos levemente flexionados. Pegada pronada na barra. Puxe a barra em dire√ß√£o ao abd√¥men/peito baixo, contraindo as costas. Des√ßa controladamente.'
    },
    'Remada Sentada (m√°quina)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina com o peito apoiado (se houver). Puxe as manoplas/pegadores em dire√ß√£o ao corpo, mantendo os cotovelos pr√≥ximos ao tronco e contraindo as esc√°pulas. Retorne controladamente.'
    },
    'Remada Unilateral (Serrote)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie um joelho e a m√£o do mesmo lado em um banco. Mantenha o tronco paralelo ao ch√£o e a coluna reta. Com o outro bra√ßo, puxe o halter em dire√ß√£o ao quadril/costela, mantendo o cotovelo pr√≥ximo ao corpo. Des√ßa controladamente.'
    },

    # Ombros
    'Desenvolvimento Militar com Barra': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar', 'Ombros'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), barra apoiada na parte superior do peito, pegada pronada um pouco mais larga que os ombros. Empurre a barra verticalmente para cima at√© estender os cotovelos. Des√ßa controladamente at√© a posi√ß√£o inicial.'
    },
    'Desenvolvimento com Halteres (sentado)': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado em um banco com encosto, segure os halteres na altura dos ombros com as palmas para frente. Empurre os halteres verticalmente para cima. Des√ßa controladamente.'
    },
    'Eleva√ß√£o Lateral': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres ao lado do corpo. Mantenha os cotovelos levemente flexionados. Eleve os bra√ßos lateralmente at√© a altura dos ombros. Des√ßa controladamente.'
    },
    'Eleva√ß√£o Frontal': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres na frente das coxas (pegada pronada ou neutra). Eleve um bra√ßo de cada vez (ou ambos) para frente, mantendo o cotovelo levemente flexionado, at√© a altura dos ombros. Des√ßa controladamente.'
    },

    # B√≠ceps
    'Rosca Direta com Barra': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra', 'restricoes': ['Punhos'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada supinada (palmas para cima), m√£os na largura dos ombros. Mantenha os cotovelos fixos ao lado do corpo. Flexione os cotovelos trazendo a barra em dire√ß√£o aos ombros. Des√ßa controladamente.'
    },
    'Rosca Direta com Halteres': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), segure halteres ao lado do corpo com pegada supinada. Mantenha os cotovelos fixos. Flexione os cotovelos, elevando os halteres. Pode ser feito simultaneamente ou alternadamente. Des√ßa controladamente.'
    },
    'Rosca Martelo': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), segure halteres ao lado do corpo com pegada neutra (palmas voltadas para o corpo). Mantenha os cotovelos fixos. Flexione os cotovelos, elevando os halteres. Des√ßa controladamente.'
    },

    # Tr√≠ceps
    'Tr√≠ceps Testa': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': ['Cotovelos'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em um banco reto, segure uma barra W (ou halteres com pegada neutra) acima do peito com os bra√ßos estendidos. Mantenha os bra√ßos (√∫meros) parados. Flexione os cotovelos descendo o peso em dire√ß√£o √† testa/cabe√ßa. Estenda os cotovelos de volta √† posi√ß√£o inicial.'
    },
    'Tr√≠ceps Pulley': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, de frente para a polia alta, segure a barra ou corda com pegada pronada (ou neutra na corda). Mantenha os cotovelos fixos ao lado do corpo. Estenda completamente os cotovelos empurrando a barra/corda para baixo. Retorne controladamente.'
    },
    'Mergulho no Banco': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Ombros', 'Punhos'], 'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie as m√£os em um banco atr√°s do corpo, dedos para frente. Mantenha as pernas estendidas √† frente (ou joelhos flexionados para facilitar). Flexione os cotovelos descendo o corpo verticalmente. Empurre de volta para cima estendendo os cotovelos.'
    },

    # Core
    'Prancha': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie os antebra√ßos e as pontas dos p√©s no ch√£o. Mantenha o corpo reto da cabe√ßa aos calcanhares, contraindo o abd√¥men e os gl√∫teos. Evite elevar ou baixar demais o quadril. Sustente a posi√ß√£o.'
    },
    'Abdominal Crunch': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, joelhos flexionados e p√©s no ch√£o (ou pernas elevadas). M√£os atr√°s da cabe√ßa (sem puxar) ou cruzadas no peito. Eleve a cabe√ßa e os ombros do ch√£o, contraindo o abd√¥men ("enrolando" a coluna). Retorne controladamente.'
    },
    'Eleva√ß√£o de Pernas': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'], # Iniciante com cuidado/adapta√ß√£o
        'descricao': 'Deitado de costas, pernas estendidas. Pode colocar as m√£os sob a lombar para apoio. Mantendo as pernas retas (ou levemente flexionadas), eleve-as at√© formarem 90¬∞ com o tronco. Des√ßa controladamente quase at√© o ch√£o, sem deixar a lombar arquear.'
     },
    'Superman': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'], 'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de bru√ßos, bra√ßos e pernas estendidos. Eleve simultaneamente bra√ßos, peito e pernas do ch√£o, contraindo lombar e gl√∫teos. Mantenha por um instante e retorne controladamente.'
     },
}

EXERCISE_SUBSTITUTIONS = {
    # Substitui√ß√µes PRINCIPALMENTE por RESTRI√á√ÉO
    'Agachamento com Barra': 'Leg Press 45¬∞', # Lombar, Joelhos -> M√°quina
    'Stiff com Halteres': 'Mesa Flexora', # Lombar -> M√°quina Isolado
    'Remada Curvada com Barra': 'Remada Sentada (m√°quina)', # Lombar -> M√°quina
    'Desenvolvimento Militar com Barra': 'Desenvolvimento com Halteres (sentado)', # Lombar, Ombros -> Halteres Sentado
    'Supino Reto com Barra': 'Supino Reto com Halteres', # Ombros -> Halteres (maior liberdade)
    'Tr√≠ceps Testa': 'Tr√≠ceps Pulley', # Cotovelos -> M√°quina
    'Rosca Direta com Barra': 'Rosca Direta com Halteres', # Punhos -> Halteres
    'Flex√£o de Bra√ßo': 'Supino Reto com Halteres', # Punhos -> Halteres (menos carga direta no punho)
    'Eleva√ß√£o de Pernas': 'Prancha', # Lombar -> Isom√©trico seguro
    'Superman': 'Prancha', # Lombar -> Isom√©trico seguro

    # Substitui√ß√µes PRINCIPALMENTE por N√çVEL (Iniciante n√£o pode fazer)
    'Barra Fixa': 'Puxada Alta (Lat Pulldown)', # Dif√≠cil -> M√°quina
    'Mergulho no Banco': 'Tr√≠ceps Pulley', # Dif√≠cil/Ombros -> M√°quina
}


# ---------------------------
# Plan serialization helpers
# ---------------------------
def plan_to_serial(plano: Optional[Dict[str, Any]]):
    if not plano:
        return None
    out = {}
    for k, v in plano.items():
        if isinstance(v, pd.DataFrame):
            out[k] = v.to_dict(orient='records')
        else:
            out[k] = v
    return out


def serial_to_plan(serial: Optional[Dict[str, Any]]):
    if not serial:
        return None
    out = {}
    for k, v in serial.items():
        if isinstance(v, list):
            try:
                out[k] = pd.DataFrame(v)
            except Exception:
                out[k] = v
        else:
            out[k] = v
    return out


# ---------------------------
# Firestore save/load (with spinner)
# ---------------------------
def salvar_dados_usuario_firebase(uid: str):
    if not uid or uid == 'demo-uid':
        return
    try:
        with st.spinner("üíæ Salvando dados no Firestore..."):
            doc = db.collection('usuarios').document(uid)
            plano_serial = plan_to_serial(st.session_state.get('plano_treino'))
            freq = []
            for d in st.session_state.get('frequencia', []):
                if isinstance(d, (date, datetime)):
                    if isinstance(d, date) and not isinstance(d, datetime):
                        freq.append(datetime.combine(d, datetime.min.time()))
                    else:
                        freq.append(d)
                else:
                    freq.append(d)
            hist = []
            for t in st.session_state.get('historico_treinos', []):
                copy = dict(t)
                if 'data' in copy and isinstance(copy['data'], date) and not isinstance(copy['data'], datetime):
                    copy['data'] = datetime.combine(copy['data'], datetime.min.time())
                hist.append(copy)
            metas_save = []
            for m in st.session_state.get('metas', []):
                copy = dict(m)
                if 'prazo' in copy and isinstance(copy['prazo'], date):
                    copy['prazo'] = datetime.combine(copy['prazo'], datetime.min.time())
                metas_save.append(copy)
            fotos_save = []
            for f in st.session_state.get('fotos_progresso', []):
                copy = dict(f)
                if 'data' in copy and isinstance(copy['data'], date):
                    copy['data'] = copy['data'].isoformat()
                fotos_save.append(copy)
            payload = {
                'dados_usuario': st.session_state.get('dados_usuario'),
                'plano_treino': plano_serial,
                'frequencia': freq,
                'historico_treinos': hist,
                'historico_peso': st.session_state.get('historico_peso', []),
                'metas': metas_save,
                'fotos_progresso': fotos_save,
                'medidas': st.session_state.get('medidas', []),
                'feedbacks': st.session_state.get('feedbacks', []),
                'ciclo_atual': st.session_state.get('ciclo_atual'),
                'role': st.session_state.get('role'),
                'settings': st.session_state.get('settings', {}),
                'ultimo_save': datetime.now()
            }
            doc.set(payload, merge=True)
            time.sleep(0.4)
        st.success("‚úÖ Dados salvos!")
    except Exception as e:
        st.error("Erro ao salvar no Firestore:")
        st.error(str(e))


def carregar_dados_usuario_firebase(uid: str):
    if not uid:
        return
    try:
        with st.spinner("üîÅ Carregando dados do Firestore..."):
            doc = db.collection('usuarios').document(uid).get()
            time.sleep(0.2)
        if not doc.exists:
            st.warning("Documento do usu√°rio n√£o encontrado no Firestore.")
            return
        data = doc.to_dict()
        st.session_state['dados_usuario'] = data.get('dados_usuario')
        st.session_state['plano_treino'] = serial_to_plan(data.get('plano_treino'))
        freq = []
        for d in data.get('frequencia', []):
            if isinstance(d, datetime):
                freq.append(d.date())
            elif isinstance(d, str):
                try:
                    freq.append(date.fromisoformat(d))
                except:
                    try:
                        freq.append(datetime.fromisoformat(d).date())
                    except:
                        pass
            else:
                freq.append(d)
        st.session_state['frequencia'] = freq
        hist = data.get('historico_treinos', [])
        for t in hist:
            if 'data' in t and isinstance(t['data'], datetime):
                t['data'] = t['data'].date()
            elif 'data' in t and isinstance(t['data'], str):
                try:
                    t['data'] = date.fromisoformat(t['data'])
                except:
                    pass
        st.session_state['historico_treinos'] = hist
        st.session_state['fotos_progresso'] = data.get('fotos_progresso', [])
        st.session_state['medidas'] = data.get('medidas', [])
        st.session_state['feedbacks'] = data.get('feedbacks', [])
        st.session_state['metas'] = data.get('metas', [])
        st.session_state['role'] = data.get('role')
        st.session_state['settings'] = data.get('settings', st.session_state.get('settings', {}))
    except Exception as e:
        st.error("Erro ao carregar do Firestore:")
        st.error(str(e))


# ---------------------------
# Fun√ß√µes para a Rede Social
# ---------------------------
@st.cache_data(ttl=120)
def carregar_feed_firebase(user_uid: str, limit=50):
    if not user_uid:
        return []
    following_uids = get_following_list(user_uid)
    uids_to_show = list(set(following_uids + [user_uid]))
    if not uids_to_show:
        return []
    try:
        posts_ref = db.collection('posts').where('user_uid', 'in', uids_to_show).order_by('timestamp',
                                                                                          direction=firestore.Query.DESCENDING).limit(
            limit)
        return [doc.to_dict() | {'id': doc.id} for doc in posts_ref.stream()]
    except Exception as e:
        st.error(f"Erro ao carregar o feed: {e}")
        return []


def salvar_post_firebase(user_uid, username, text_content=None, image_b64=None):
    if not user_uid or not username:
        st.error("Usu√°rio n√£o identificado para postar.")
        return False
    if not text_content and not image_b64:
        st.warning("O post precisa de texto ou imagem.")
        return False
    try:
        post_data = {'user_uid': user_uid, 'username': username, 'text_content': text_content, 'image_b64': image_b64,
                     'like_count': 0, 'comment_count': 0, 'timestamp': firestore.SERVER_TIMESTAMP}
        db.collection('posts').add(post_data)
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar o post: {e}")
        return False


def _toggle_like_transaction(transaction, post_ref, like_ref):
    like_doc = like_ref.get(transaction=transaction)
    if like_doc.exists:
        transaction.delete(like_ref)
        transaction.update(post_ref, {'like_count': firestore.Increment(-1)})
    else:
        transaction.set(like_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
        transaction.update(post_ref, {'like_count': firestore.Increment(1)})


def curtir_post(post_id, user_uid):
    if not user_uid or not post_id: return
    post_ref = db.collection('posts').document(post_id)
    like_ref = post_ref.collection('likes').document(user_uid)
    db.run_transaction(lambda transaction: _toggle_like_transaction(transaction, post_ref, like_ref))
    st.cache_data.clear()


def comentar_post(post_id, user_uid, username, text):
    if not all([user_uid, post_id, username, text]): return
    try:
        post_ref = db.collection('posts').document(post_id)
        comments_ref = post_ref.collection('comments')
        comment_data = {'user_uid': user_uid, 'username': username, 'text': text,
                        'timestamp': firestore.SERVER_TIMESTAMP}
        comments_ref.add(comment_data)
        post_ref.update({'comment_count': firestore.Increment(1)})
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erro ao comentar: {e}")
        return False


@st.cache_data(ttl=300)
def carregar_comentarios(post_id):
    try:
        comments_ref = db.collection('posts').document(post_id).collection('comments').order_by('timestamp',
                                                                                                direction=firestore.Query.ASCENDING)
        return [doc.to_dict() for doc in comments_ref.stream()]
    except Exception:
        return []


@st.cache_data(ttl=600)
def get_all_users():
    try:
        users_ref = db.collection('usuarios').stream()
        return [{'id': user.id, 'username': user.to_dict().get('username', 'Usu√°rio An√¥nimo')} for user in users_ref]
    except Exception as e:
        st.error(f"Erro ao buscar usu√°rios: {e}")
        return []


@st.cache_data(ttl=300)
def get_following_list(user_uid: str) -> List[str]:
    if not user_uid:
        return []
    try:
        following_ref = db.collection('usuarios').document(user_uid).collection('following').stream()
        return [doc.id for doc in following_ref]
    except Exception:
        return []


def follow_user(follower_uid: str, followed_uid: str):
    if not follower_uid or not followed_uid or follower_uid == followed_uid:
        return
    batch = db.batch()
    following_ref = db.collection('usuarios').document(follower_uid).collection('following').document(followed_uid)
    batch.set(following_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
    followers_ref = db.collection('usuarios').document(followed_uid).collection('followers').document(follower_uid)
    batch.set(followers_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
    batch.commit()
    st.cache_data.clear()


def unfollow_user(follower_uid: str, followed_uid: str):
    if not follower_uid or not followed_uid:
        return
    batch = db.batch()
    following_ref = db.collection('usuarios').document(follower_uid).collection('following').document(followed_uid)
    batch.delete(following_ref)
    followers_ref = db.collection('usuarios').document(followed_uid).collection('followers').document(follower_uid)
    batch.delete(followers_ref)
    batch.commit()
    st.cache_data.clear()


# ---------------------------
# Auth helpers
# ---------------------------
def criar_usuario_firebase(email: str, senha: str, nome: str) -> (bool, str):
    try:
        try:
            _ = auth.get_user_by_email(email)
            return False, "J√° existe um usu√°rio com esse e-mail."
        except auth.UserNotFoundError:
            pass
        user = auth.create_user(email=email, password=senha, display_name=nome)
        uid = user.uid
        db.collection('usuarios').document(uid).set({
            'email': email, 'username': nome, 'dados_usuario': {'nome': nome},
            'plano_treino': None, 'frequencia': [], 'historico_treinos': [],
            'historico_peso': [], 'metas': [], 'fotos_progresso': [], 'medidas': [],
            'feedbacks': [], 'ciclo_atual': None, 'role': None, 'password_hash': sha256(senha),
            'data_criacao': datetime.now()
        })
        return True, "Usu√°rio criado com sucesso!"
    except Exception as e:
        return False, f"Erro ao criar usu√°rio: {e}"


def verificar_credenciais_firebase(username_or_email: str, senha: str) -> (bool, str):
    if username_or_email == 'demo' and senha == 'demo123':
        st.session_state['user_uid'] = 'demo-uid'
        st.session_state['usuario_logado'] = 'Demo'
        doc = db.collection('usuarios').document('demo-uid').get()
        if doc.exists:
            carregar_dados_usuario_firebase('demo-uid')
        else:
            st.session_state['dados_usuario'] = {'nome': 'Demo', 'peso': 75, 'altura': 175,
                                                 'nivel': 'Intermedi√°rio/Avan√ßado', 'dias_semana': 4,
                                                 'objetivo': 'Hipertrofia', 'restricoes': ['Lombar']}
            st.session_state['plano_treino'] = gerar_plano_personalizado(st.session_state['dados_usuario'])
            st.session_state['frequencia'] = []
            st.session_state['historico_treinos'] = []
            st.session_state['metas'] = []
            st.session_state['fotos_progresso'] = []
        return True, "Modo demo ativado."
    try:
        user = auth.get_user_by_email(username_or_email)
        uid = user.uid
        doc = db.collection('usuarios').document(uid).get()
        if not doc.exists:
            return False, "Usu√°rio sem documento no Firestore."
        data = doc.to_dict()
        stored_hash = data.get('password_hash')
        if stored_hash and stored_hash == sha256(senha):
            st.session_state['user_uid'] = uid
            st.session_state['usuario_logado'] = data.get('username') or username_or_email
            carregar_dados_usuario_firebase(uid)
            cookies['user_uid'] = uid
            return True, f"Bem-vindo(a), {st.session_state['usuario_logado']}!"
        else:
            return False, "Senha incorreta."
    except auth.UserNotFoundError:
        return False, "Usu√°rio n√£o encontrado."
    except Exception as e:
        return False, f"Erro ao autenticar: {e}"


# ---------------------------
# Periodization & Notifications
# ---------------------------
def verificar_periodizacao(num_treinos: int):
    TREINOS = 20
    ciclo = num_treinos // TREINOS
    fase_idx = ciclo % 3
    treinos_no_ciclo = num_treinos % TREINOS
    fases = [
        {'nome': 'Hipertrofia', 'series': '3-4', 'reps': '8-12', 'descanso': '60-90s', 'cor': '#FF6B6B'},
        {'nome': 'For√ßa', 'series': '4-5', 'reps': '4-6', 'descanso': '120-180s', 'cor': '#4ECDC4'},
        {'nome': 'Resist√™ncia', 'series': '2-3', 'reps': '15-20', 'descanso': '30-45s', 'cor': '#95E1D3'},
    ]
    return {'fase_atual': fases[fase_idx], 'treinos_restantes': TREINOS - treinos_no_ciclo,
            'proxima_fase': fases[(fase_idx + 1) % 3], 'numero_ciclo': ciclo + 1}


def check_notifications_on_open():
    notifs = []
    dados = st.session_state.get('dados_usuario') or {}
    dias_list = dados.get('dias_semana_list') or None
    if dias_list and st.session_state['settings'].get('notify_on_login', True):
        hoje = datetime.now().weekday()
        if hoje in dias_list:
            notifs.append({'tipo': 'lembrete_treino', 'msg': 'Hoje √© dia de treino! Confira seu plano.'})
    for m in st.session_state.get('metas', []):
        prazo = m.get('prazo')
        try:
            prazo_dt = date.fromisoformat(prazo) if isinstance(prazo, str) else prazo
            dias = (prazo_dt - datetime.now().date()).days
            if 0 <= dias <= 3:
                notifs.append({'tipo': 'meta', 'msg': f"Meta '{m.get('descricao')}' vence em {dias} dia(s)."})
        except:
            pass
    num_treinos = len(set(st.session_state.get('frequencia', [])))
    info = verificar_periodizacao(num_treinos)
    if info['treinos_restantes'] <= 0 and st.session_state.get('ciclo_atual') != info['numero_ciclo']:
        notifs.append({'tipo': 'nova_fase',
                       'msg': f"üëè Novo ciclo iniciado: {info['fase_atual']['nome']} (Ciclo {info['numero_ciclo']})"})
        st.session_state['ciclo_atual'] = info['numero_ciclo']
        if dados:
            st.session_state['plano_treino'] = gerar_plano_personalizado(dados, info['fase_atual'])
            notifs.append({'tipo': 'plano_ajustado', 'msg': 'Seu plano foi ajustado para a nova fase de treino!'})
    for t in (5, 10, 30, 50, 100):
        if num_treinos == t:
            notifs.append({'tipo': 'conquista', 'msg': f"üéâ Voc√™ alcan√ßou {t} treinos!"})
    st.session_state['notificacoes'] = notifs


# ---------------------------
# UI & Plan Generation
# ---------------------------
def show_logo_center():
    st.markdown("<div style='text-align:center;'><h1>üèãÔ∏è FitPro</h1><p>Seu Personal Trainer Digital</p></div>",
                unsafe_allow_html=True)


def confirm_delete_photo_dialog(idx: int, uid: Optional[str]):
    if HAS_ST_DIALOG:
        @st.dialog("üóëÔ∏è Confirmar Exclus√£o")
        def inner():
            st.write("Deseja realmente excluir esta foto? Esta a√ß√£o √© irrevers√≠vel.")
            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚ùå Cancelar"):
                    st.rerun()
            with c2:
                if st.button("‚úÖ Confirmar"):
                    fotos = st.session_state.get('fotos_progresso', [])
                    if 0 <= idx < len(fotos):
                        fotos.pop(idx)
                        st.session_state['fotos_progresso'] = fotos
                        if uid:
                            salvar_dados_usuario_firebase(uid)
                        st.success("Foto exclu√≠da.")
                        st.rerun()

        inner()
    else:
        st.session_state['foto_a_excluir'] = idx
        st.session_state['confirm_excluir_foto'] = True


def gerar_plano_personalizado(dados_usuario: Dict[str, Any], fase_atual: Optional[Dict] = None) -> Dict:
    # Pega os dados do usu√°rio, incluindo o n√≠vel
    nivel_usuario = dados_usuario.get('nivel', 'Iniciante')
    dias = dados_usuario.get('dias_semana', 3)
    objetivo = dados_usuario.get('objetivo', 'Hipertrofia')
    restricoes_usr = dados_usuario.get('restricoes', [])
    sexo = dados_usuario.get('sexo', 'Masculino')

    # Define s√©ries/reps/descanso base
    if fase_atual:
        series_base, reps_base, descanso_base = fase_atual['series'], fase_atual['reps'], fase_atual['descanso']
    else:
        if objetivo == 'Hipertrofia':
            series_base, reps_base, descanso_base = '3-4', '8-12', '60-90s'
        elif objetivo == 'Emagrecimento':
            series_base, reps_base, descanso_base = '3', '12-15', '45-60s'
        else:
            series_base, reps_base, descanso_base = '3', '15-20', '30-45s'

    # Fun√ß√£o selecionar_exercicios agora filtra por niveis_permitidos
    def selecionar_exercicios(grupos: List[str], n_compostos: int, n_isolados: int, excluir: List[str] = []) -> List[
        Dict]:
        exercicios_selecionados = []
        candidatos_validos = []

        exercicios_considerados = list(EXERCICIOS_DB.items())
        random.shuffle(exercicios_considerados)  # Embaralha para variar a sele√ß√£o inicial

        for ex_nome, ex_data in exercicios_considerados:
            if ex_data.get('grupo') in grupos and ex_nome not in excluir:

                # --- FILTRO DE N√çVEL (usando niveis_permitidos) ---
                niveis_permitidos = ex_data.get('niveis_permitidos', ['Iniciante',
                                                                      'Intermedi√°rio/Avan√ßado'])  # Assume todos se n√£o especificado
                # PULA se o n√≠vel do usu√°rio N√ÉO EST√Å na lista de n√≠veis permitidos do exerc√≠cio
                if nivel_usuario not in niveis_permitidos:
                    continue
                # --- FIM DO FILTRO DE N√çVEL ---

                # L√≥gica de restri√ß√£o
                exercicio_tem_restricao = any(r in ex_data.get('restricoes', []) for r in restricoes_usr)
                if exercicio_tem_restricao:
                    substituto = EXERCISE_SUBSTITUTIONS.get(ex_nome)
                    if substituto and substituto not in excluir:
                        sub_details = EXERCICIOS_DB.get(substituto, {})
                        sub_niveis = sub_details.get('niveis_permitidos', ['Iniciante', 'Intermedi√°rio/Avan√ßado'])

                        # Verifica se o SUBSTITUTO √© adequado para o n√≠vel E n√£o tem restri√ß√£o
                        if nivel_usuario not in sub_niveis:
                            continue  # Substituto n√£o √© para este n√≠vel
                        elif substituto not in candidatos_validos and not any(
                                r in sub_details.get('restricoes', []) for r in restricoes_usr):
                            candidatos_validos.append(substituto)  # Adiciona substituto v√°lido

                # Se o exerc√≠cio original passou no filtro de n√≠vel E n√£o tem restri√ß√£o
                elif ex_nome not in candidatos_validos:
                    candidatos_validos.append(ex_nome)  # Adiciona original v√°lido

        # L√≥gica de sele√ß√£o (com fallback)
        # candidatos = list(set(candidatos_validos)) # Set j√° n√£o √© necess√°rio se a l√≥gica acima estiver correta
        candidatos = candidatos_validos  # J√° deve ter apenas v√°lidos e √∫nicos
        compostos_selecionados = [ex for ex in candidatos if EXERCICIOS_DB[ex]['tipo'] == 'Composto']
        isolados_selecionados = [ex for ex in candidatos if EXERCICIOS_DB[ex]['tipo'] != 'Composto']
        compostos_finais = compostos_selecionados[:n_compostos]
        isolados_finais = isolados_selecionados[:n_isolados]
        exercicios_finais = compostos_finais + isolados_finais
        total_desejado = n_compostos + n_isolados
        if len(exercicios_finais) < total_desejado:
            faltantes = total_desejado - len(exercicios_finais)
            if len(isolados_finais) < n_isolados and len(compostos_selecionados) > len(compostos_finais):
                extras = [ex for ex in compostos_selecionados if ex not in exercicios_finais][:faltantes]
                exercicios_finais.extend(extras);
                faltantes -= len(extras)
            if faltantes > 0 and len(compostos_finais) < n_compostos and len(isolados_selecionados) > len(
                    isolados_finais):
                extras = [ex for ex in isolados_selecionados if ex not in exercicios_finais][:faltantes]
                exercicios_finais.extend(extras)

        for ex in exercicios_finais:
            # Usa .split('-')[0] para pegar o menor n√∫mero de s√©ries (melhor para iniciantes)
            num_series = series_base.split('-')[0]
            exercicios_selecionados.append(
                {'Exerc√≠cio': ex, 'S√©ries': num_series, 'Repeti√ß√µes': reps_base, 'Descanso': descanso_base})
        return exercicios_selecionados

    # L√≥gica de divis√£o do plano (permanece a mesma)
    plano = {}
    if dias <= 2:
        plano['Treino A: Corpo Inteiro'] = selecionar_exercicios(['Peito', 'Costas', 'Pernas', 'Ombros'], 3, 1)
        plano['Treino B: Corpo Inteiro'] = selecionar_exercicios(['Pernas', 'Costas', 'Peito', 'B√≠ceps', 'Tr√≠ceps'], 3,
                                                                 2)
    elif dias == 3:
        if sexo == 'Feminino':
            plano['Treino A: Superiores'] = selecionar_exercicios(['Peito', 'Costas', 'Ombros'], 2, 2)
            plano['Treino B: Inferiores (Foco Quad/Gl√∫teo)'] = selecionar_exercicios(['Pernas'], 2, 3)
            plano['Treino C: Inferiores (Foco Post/Gl√∫teo)'] = selecionar_exercicios(['Pernas'], 2, 3,
                                                                                     excluir=[ex['Exerc√≠cio'] for ex in
                                                                                              plano[
                                                                                                  'Treino B: Inferiores (Foco Quad/Gl√∫teo)']])
        else:
            plano['Treino A: Superiores (Push)'] = selecionar_exercicios(['Peito', 'Ombros', 'Tr√≠ceps'], 2, 3)
            plano['Treino B: Inferiores'] = selecionar_exercicios(['Pernas'], 2, 3)
            plano['Treino C: Superiores (Pull)'] = selecionar_exercicios(['Costas', 'B√≠ceps'], 2, 2)
    elif dias == 4:
        if sexo == 'Feminino':
            upper_a_ex = selecionar_exercicios(['Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps'], 3, 2)
            lower_a_ex = selecionar_exercicios(['Pernas'], 3, 2)
            plano['Treino A: Superiores A'] = upper_a_ex
            plano['Treino B: Inferiores A'] = lower_a_ex
            plano['Treino C: Superiores B'] = selecionar_exercicios(['Costas', 'Peito', 'Ombros', 'B√≠ceps', 'Tr√≠ceps'],
                                                                    3, 2,
                                                                    excluir=[ex['Exerc√≠cio'] for ex in upper_a_ex])
            plano['Treino D: Inferiores B'] = selecionar_exercicios(['Pernas'], 2, 3,
                                                                    excluir=[ex['Exerc√≠cio'] for ex in lower_a_ex])
        else:
            plano['Treino A: Superiores (Foco Peito/Costas)'] = selecionar_exercicios(['Peito', 'Costas', 'B√≠ceps'], 3,
                                                                                      2)
            plano['Treino B: Inferiores (Foco Quadr√≠ceps)'] = selecionar_exercicios(['Pernas'], 2, 3)
            plano['Treino C: Superiores (Foco Ombros/Bra√ßos)'] = selecionar_exercicios(['Ombros', 'Tr√≠ceps', 'B√≠ceps'],
                                                                                       2, 3)
            plano['Treino D: Inferiores (Foco Posterior/Gl√∫teos)'] = selecionar_exercicios(['Pernas'], 2, 3)
    elif dias >= 5:
        if nivel_usuario == 'Iniciante':
            upper_a_ex = selecionar_exercicios(['Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps'], 2, 2)
            lower_a_ex = selecionar_exercicios(['Pernas'], 2, 2)
            upper_b_ex = selecionar_exercicios(['Costas', 'Peito', 'Ombros', 'B√≠ceps', 'Tr√≠ceps'], 2, 2,
                                               excluir=[ex['Exerc√≠cio'] for ex in upper_a_ex])
            lower_b_ex = selecionar_exercicios(['Pernas'], 2, 2, excluir=[ex['Exerc√≠cio'] for ex in lower_a_ex])
            plano['Dia 1: Superiores A'] = upper_a_ex
            plano['Dia 2: Inferiores A'] = lower_a_ex
            plano['Dia 3: Superiores B'] = upper_b_ex
            plano['Dia 4: Inferiores B'] = lower_b_ex
            plano['Dia 5: Superiores A'] = upper_a_ex
        else:  # Intermedi√°rio/Avan√ßado
            if sexo == 'Feminino':
                plano['Treino A: Inferiores (Quadr√≠ceps)'] = selecionar_exercicios(['Pernas'], 2, 3)
                plano['Treino B: Superiores (Push)'] = selecionar_exercicios(['Peito', 'Ombros', 'Tr√≠ceps'], 2, 2)
                plano['Treino C: Inferiores (Posterior/Gl√∫teos)'] = selecionar_exercicios(['Pernas'], 2, 3)
                plano['Treino D: Superiores (Pull)'] = selecionar_exercicios(['Costas', 'B√≠ceps'], 3, 1)
                plano['Treino E: Gl√∫teos & Core'] = selecionar_exercicios(['Pernas', 'Core'], 1, 3)
                lista_c = plano['Treino C: Inferiores (Posterior/Gl√∫teos)']
                lista_e = plano['Treino E: Gl√∫teos & Core']
                if 'Eleva√ß√£o P√©lvica' not in [ex['Exerc√≠cio'] for ex in lista_c + lista_e]:
                    if len(lista_c) < 6:
                        lista_c.append({'Exerc√≠cio': 'Eleva√ß√£o P√©lvica', 'S√©ries': series_base.split('-')[0],
                                        'Repeti√ß√µes': reps_base, 'Descanso': descanso_base})
                    elif len(lista_e) < 5:
                        lista_e.append({'Exerc√≠cio': 'Eleva√ß√£o P√©lvica', 'S√©ries': series_base.split('-')[0],
                                        'Repeti√ß√µes': reps_base, 'Descanso': descanso_base})
            else:  # Masculino Intermedi√°rio/Avan√ßado
                plano['Treino A: Peito'] = selecionar_exercicios(['Peito'], 2, 2)
                plano['Treino B: Costas'] = selecionar_exercicios(['Costas'], 4, 0)
                plano['Treino C: Pernas'] = selecionar_exercicios(['Pernas'], 2, 3)
                plano['Treino D: Ombros'] = selecionar_exercicios(['Ombros'], 2, 2)
                plano['Treino E: Bra√ßos & Core'] = selecionar_exercicios(['B√≠ceps', 'Tr√≠ceps', 'Core'], 0, 4)

    plano_final = {}
    for nome, exercicios_lista in plano.items():
        plano_final[nome] = exercicios_lista if exercicios_lista else []
    return plano_final


# ---------------------------
# Pages
# ---------------------------
def render_auth():
    show_logo_center()
    st.markdown("---")
    tab_login, tab_cad = st.tabs(["üîë Login", "üìù Cadastro"])
    with tab_login:
        with st.form("form_login"):
            username = st.text_input("E-mail ou 'demo'")
            senha = st.text_input("Senha", type='password')
            col1, col2 = st.columns([3, 1])
            with col2:
                if st.form_submit_button("üëÅÔ∏è Modo Demo"):
                    ok, msg = verificar_credenciais_firebase('demo', 'demo123')
                    if ok:
                        st.success(msg); st.rerun()
                    else:
                        st.error(msg)
            if st.form_submit_button("Entrar"):
                if not username or not senha:
                    st.error("Preencha username e senha.")
                else:
                    ok, msg = verificar_credenciais_firebase(username.strip(), senha)
                    if ok:
                        st.success(msg); st.rerun()
                    else:
                        st.error(msg)
    with tab_cad:
        with st.form("form_cadastro"):
            nome = st.text_input("Nome completo")
            email = st.text_input("E-mail")
            senha = st.text_input("Senha", type='password')
            senha_conf = st.text_input("Confirmar senha", type='password')
            termos = st.checkbox("Aceito os Termos de Uso")
            if st.form_submit_button("Criar Conta"):
                if not nome or len(nome.strip()) < 3:
                    st.error("Nome m√≠nimo 3 caracteres.")
                elif not valid_email(email):
                    st.error("E-mail inv√°lido.")
                elif len(senha) < 6:
                    st.error("Senha m√≠nimo 6 caracteres.")
                elif senha != senha_conf:
                    st.error("Senhas n√£o coincidem.")
                elif not termos:
                    st.error("Aceite os termos.")
                else:
                    ok, msg = criar_usuario_firebase(email.strip(), senha, nome.strip())
                    if ok:
                        st.success(msg); st.info("Fa√ßa login agora.")
                    else:
                        st.error(msg)
    st.stop()


def render_main():
    if st.session_state.get('workout_in_progress', False):
        render_workout_session()
        st.stop()
    check_notifications_on_open()
    st.sidebar.title("üèãÔ∏è FitPro")
    st.sidebar.write(f"üë§ {st.session_state.get('usuario_logado')}")
    if st.sidebar.button("üö™ Sair"):
        uid = st.session_state.get('user_uid')
        if uid:
            salvar_dados_usuario_firebase(uid)
        del cookies['user_uid']
        keys = list(st.session_state.keys())
        for k in keys:
            if k != 'db': del st.session_state[k]
        st.rerun()
    st.sidebar.markdown("---")
    st.sidebar.subheader("Configura√ß√µes")
    theme = st.sidebar.selectbox("Tema", ["light", "dark"],
                                 index=0 if st.session_state['settings'].get('theme', 'light') == 'light' else 1)
    st.session_state['settings']['theme'] = theme
    notify_on_open = st.sidebar.checkbox("Notifica√ß√µes ao abrir",
                                         value=st.session_state['settings'].get('notify_on_login', True))
    st.session_state['settings']['notify_on_login'] = notify_on_open
    st.sidebar.checkbox("Modo offline (cache)", value=st.session_state.get('offline_mode', False), key='offline_mode')
    if st.session_state.get('role') == 'admin':
        st.sidebar.success("üëë Admin")
        if st.sidebar.button("Painel Admin"):
            st.session_state['page'] = 'Admin'
    if st.session_state.get('notificacoes'):
        for n in st.session_state['notificacoes']:
            if n['tipo'] == 'conquista':
                st.balloons()
                st.success(n['msg'])
            else:
                try:
                    st.toast(n['msg'])
                except Exception:
                    st.info(n['msg'])
    pages = ["Dashboard", "Rede Social", "Buscar Usu√°rios", "Question√°rio", "Meu Treino", "Registrar Treino",
             "Progresso", "Fotos", "Comparar Fotos", "Medidas", "Planejamento Semanal", "Metas", "Nutri√ß√£o", "Busca",
             "Export/Backup"]
    if st.session_state.get('role') == 'admin':
        pages.append("Admin")
    page = st.selectbox("Navega√ß√£o", pages)
    page_map = {
        "Dashboard": render_dashboard, "Rede Social": render_rede_social, "Buscar Usu√°rios": render_buscar_usuarios,
        "Question√°rio": render_questionario, "Meu Treino": render_meu_treino,
        "Registrar Treino": render_registrar_treino,
        "Progresso": render_progresso, "Fotos": render_fotos, "Comparar Fotos": render_comparar_fotos,
        "Medidas": render_medidas,
        "Planejamento Semanal": render_planner, "Metas": render_metas, "Nutri√ß√£o": render_nutricao,
        "Busca": render_busca,
        "Export/Backup": render_export_backup, "Admin": render_admin_panel,
    }
    render_func = page_map.get(page, lambda: st.write("P√°gina em desenvolvimento."))
    render_func()


# ---------------------------
# Page implementations
# ---------------------------
def render_workout_session():
    st.title("üî• Treino em Andamento")
    plano_atual, idx_atual = st.session_state['current_workout_plan'], st.session_state['current_exercise_index']
    exercicio_atual = plano_atual[idx_atual]
    nome_exercicio, series_str = exercicio_atual['Exerc√≠cio'], exercicio_atual['S√©ries']
    try:
        num_series = int(str(series_str).split('-')[0])
    except:
        num_series = 3

    # --- Barra de Progresso e Timer ---
    progresso = (idx_atual + 1) / len(plano_atual)
    col_prog, col_timer = st.columns(2)
    col_prog.progress(progresso, text=f"Exerc√≠cio {idx_atual + 1} de {len(plano_atual)}")
    timer_placeholder = col_timer.empty()

    # --- L√≥gica do Timer √önico ---
    is_resting = False
    if st.session_state.rest_timer_end:
        remaining = st.session_state.rest_timer_end - time.time()
        if remaining > 0:
            is_resting = True
            mins, secs = divmod(int(remaining), 60)
            timer_placeholder.metric("‚è≥ Descanso", f"{mins:02d}:{secs:02d}")
            time.sleep(1)
            st.rerun()
        else:
            st.session_state.rest_timer_end = None
            st.toast("üí™ Descanso finalizado!")
            st.rerun()

    # --- Container do Exerc√≠cio Atual (com v√≠deo) ---
    with st.container(border=True):
        col_video, col_details = st.columns([2, 3])
        # --- CORRE√á√ÉO AQUI ---
        with col_video: # Substitua 'ith' e 'col_gif:' por esta linha, com a indenta√ß√£o correta
            # Chama a NOVA fun√ß√£o de busca e usa st.video
            video_url = find_exercise_video_youtube(nome_exercicio)
            if video_url:
                st.video(video_url)
            else:
                st.text("V√≠deo indispon√≠vel")
        # --- FIM DA CORRE√á√ÉO ---
        with col_details:
            st.header(nome_exercicio)
            st.markdown(
                f"**S√©ries:** `{exercicio_atual['S√©ries']}` | **Repeti√ß√µes:** `{exercicio_atual['Repeti√ß√µes']}`\n**Descanso:** `{exercicio_atual['Descanso']}`")
    for i in range(num_series):
        set_key = f"set_{idx_atual}_{i}"
        if set_key not in st.session_state: st.session_state[set_key] = {'completed': False, 'weight': 0.0, 'reps': 0}
        set_info = st.session_state[set_key]
        cols = st.columns([1, 2, 2, 1])
        disable_checkbox = is_resting and not set_info['completed']  # Desabilita checkbox se estiver em descanso
        completed = cols[0].checkbox(f"S√©rie {i + 1}", value=set_info['completed'], key=f"check_{set_key}",
                                     disabled=disable_checkbox)
        if completed != set_info['completed']:
            set_info['completed'] = completed
            if completed:
                if is_resting:
                    st.warning("Termine seu descanso antes de marcar a pr√≥xima s√©rie!")
                    set_info['completed'] = False
                else:
                    descanso_str = exercicio_atual.get('Descanso', '60s')
                    try:
                        rest_seconds = int(re.search(r'\d+', descanso_str).group())
                    except:
                        rest_seconds = 60
                    st.session_state.rest_timer_end = time.time() + rest_seconds
                    st.session_state.workout_log.append(
                        {'data': date.today().isoformat(), 'exercicio': nome_exercicio, 'series': i + 1,
                         'peso': set_info['weight'], 'reps': set_info['reps'], 'timestamp': iso_now()})
            elif set_key in st.session_state['set_timers']:
                del st.session_state['set_timers'][
                    set_key]  # Este else foi mantido por seguran√ßa, embora a l√≥gica do timer esteja no rest_timer_end
            st.rerun()
        if not set_info['completed']:
            set_info['weight'] = cols[1].number_input("Peso (kg)", key=f"weight_{set_key}",
                                                      value=float(set_info['weight']), format="%.1f",
                                                      disabled=is_resting)
            set_info['reps'] = cols[2].number_input("Reps", key=f"reps_{set_key}", value=int(set_info['reps']),
                                                    disabled=is_resting)
        else:
            cols[1].write(f"Peso: **{set_info['weight']} kg**");
            cols[2].write(f"Reps: **{set_info['reps']}**")

    st.markdown("---")
    all_sets_done = all(
        st.session_state.get(f"set_{idx_atual}_{i}", {}).get('completed', False) for i in range(num_series))
    nav_cols = st.columns([1, 1, 1])
    if all_sets_done:
        if idx_atual < len(plano_atual) - 1:
            if nav_cols[1].button("Pr√≥ximo Exerc√≠cio ‚Üí", use_container_width=True, type="primary"):
                st.session_state['current_exercise_index'] += 1;
                st.rerun()
        else:
            if nav_cols[1].button("‚úÖ Finalizar Treino", use_container_width=True, type="primary"):
                hist = st.session_state.get('historico_treinos', []);
                hist.extend(st.session_state.workout_log);
                st.session_state['historico_treinos'] = hist
                freq = st.session_state.get('frequencia', []);
                today = date.today()
                if today not in freq: freq.append(today); st.session_state['frequencia'] = freq
                salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
                st.session_state['workout_in_progress'] = False;
                st.balloons();
                st.success("Treino finalizado!");
                time.sleep(2);
                st.rerun()
    if nav_cols[2].button("‚ùå Desistir do Treino", use_container_width=True):
        st.session_state['workout_in_progress'] = False;
        st.warning("Treino cancelado.");
        time.sleep(1);
        st.rerun()


def render_rede_social():
    st.title("üåê Feed Social")
    st.markdown("---")
    with st.expander("üí¨ Criar nova publica√ß√£o"):
        with st.form("form_novo_post", clear_on_submit=True):
            comentario = st.text_area("O que voc√™ est√° pensando?",
                                      placeholder="Compartilhe seu progresso, uma dica ou uma foto do seu treino!")
            foto_post = st.file_uploader("Adicionar uma foto", type=['png', 'jpg', 'jpeg'])
            submitted = st.form_submit_button("Publicar")
            if submitted:
                user_uid = st.session_state.get('user_uid')
                username = st.session_state.get('usuario_logado')
                img_b64 = None
                if foto_post:
                    try:
                        img = Image.open(foto_post).convert('RGB')
                        img.thumbnail((800, 800))
                        img_b64 = b64_from_pil(img)
                    except Exception as e:
                        st.error(f"Erro ao processar a imagem: {e}")
                with st.spinner("Publicando..."):
                    sucesso = salvar_post_firebase(user_uid, username, comentario, img_b64)
                    if sucesso:
                        st.success("Publica√ß√£o criada com sucesso!"); st.rerun()
                    else:
                        st.error("N√£o foi poss√≠vel criar a publica√ß√£o.")
    st.markdown("---")
    st.subheader("Seu Feed")
    user_uid = st.session_state.get('user_uid')
    posts = carregar_feed_firebase(user_uid)
    if not posts:
        st.info(
            "Seu feed est√° vazio. Siga outros atletas na p√°gina 'Buscar Usu√°rios' para ver as publica√ß√µes deles aqui!")
        return
    for post in posts:
        post_id = post.get('id')
        username = post.get('username', 'Usu√°rio An√¥nimo')
        timestamp = post.get('timestamp')
        data_post = timestamp.strftime("%d/%m/%Y √†s %H:%M") if isinstance(timestamp, datetime) else "algum tempo atr√°s"
        with st.container(border=True):
            st.markdown(f"**üë§ {username}** ¬∑ *{data_post}*")
            if post.get('text_content'): st.write(post['text_content'])
            if post.get('image_b64'):
                try:
                    st.image(base64.b64decode(post['image_b64']))
                except Exception:
                    st.warning("N√£o foi poss√≠vel carregar a imagem deste post.")
            like_count, comment_count = post.get('like_count', 0), post.get('comment_count', 0)
            col1, col2, _ = st.columns([1, 1, 5])
            with col1:
                if st.button(f"‚ù§Ô∏è Curtir ({like_count})", key=f"like_{post_id}"):
                    curtir_post(post_id, st.session_state.get('user_uid'));
                    st.rerun()
            with col2:
                st.write(f"üí¨ Coment√°rios ({comment_count})")
            with st.expander("Ver e adicionar coment√°rios"):
                comentarios = carregar_comentarios(post_id)
                if comentarios:
                    for comment in comentarios:
                        st.markdown(f"> **{comment.get('username', 'Usu√°rio')}:** {comment.get('text', '')}")
                else:
                    st.write("Nenhum coment√°rio ainda.")
                comment_text = st.text_input("Escreva um coment√°rio...", key=f"comment_input_{post_id}",
                                             label_visibility="collapsed")
                if st.button("Enviar", key=f"comment_btn_{post_id}"):
                    if comment_text:
                        sucesso = comentar_post(post_id, st.session_state.get('user_uid'),
                                                st.session_state.get('usuario_logado'), comment_text)
                        if sucesso: st.session_state[f"comment_input_{post_id}"] = ""; st.rerun()
                    else:
                        st.warning("O coment√°rio n√£o pode estar vazio.")


def render_buscar_usuarios():
    st.title("üîé Buscar Usu√°rios")
    st.info("Encontre outros atletas e comece a segui-los para ver suas publica√ß√µes no seu feed.")
    current_user_uid = st.session_state.get('user_uid')
    all_users = get_all_users()
    following_list = get_following_list(current_user_uid)
    if not all_users:
        st.warning("Nenhum usu√°rio encontrado.")
        return
    for user in all_users:
        user_id, username = user['id'], user['username']
        if user_id == current_user_uid: continue
        with st.container(border=True):
            col1, col2 = st.columns([3, 1])
            with col1:
                st.subheader(username)
            with col2:
                is_following = user_id in following_list
                if is_following:
                    if st.button("Deixar de Seguir", key=f"unfollow_{user_id}", use_container_width=True):
                        unfollow_user(current_user_uid, user_id);
                        st.success(f"Voc√™ deixou de seguir {username}.");
                        st.rerun()
                else:
                    if st.button("Seguir", key=f"follow_{user_id}", type="primary", use_container_width=True):
                        follow_user(current_user_uid, user_id);
                        st.success(f"Voc√™ est√° seguindo {username}!");
                        st.rerun()


def render_dashboard():
    st.title("üìä Dashboard")
    show_logo_center()
    dados = st.session_state.get('dados_usuario') or {}
    num_treinos = len(set(st.session_state.get('frequencia', [])))
    st.metric("Treinos Completos", num_treinos)
    if num_treinos > 0:
        info = verificar_periodizacao(num_treinos)
        fase = info['fase_atual']
        st.markdown(f"""<div style='padding:20px;border-radius:12px;background:linear-gradient(90deg,{fase['cor']},#ffffff);color:#111;'>
            <h3>üéØ Fase Atual: {fase['nome']} | Ciclo {info['numero_ciclo']}</h3>
            <p>{fase['reps']} reps ¬∑ {fase['series']} s√©ries ¬∑ Descanso {fase['descanso']}</p></div>""",
                    unsafe_allow_html=True)
    if st.session_state.get('medidas'):
        dfm = pd.DataFrame(st.session_state['medidas'])
        dfm['data'] = pd.to_datetime(dfm['data'])
        fig = px.line(dfm, x='data', y='valor', color='tipo', markers=True, title='Evolu√ß√£o de Medidas')
        st.plotly_chart(fig, use_container_width=True)
    st.subheader("üìÖ Calend√°rio de Treinos (√∫ltimos 30 dias)")
    if st.session_state.get('frequencia'):
        hoje = datetime.now().date()
        ult30 = [hoje - timedelta(days=i) for i in range(30)]
        treinos_30 = set(st.session_state['frequencia'])
        df_cal = pd.DataFrame({'data': ult30})
        df_cal['treinou'] = df_cal['data'].isin(treinos_30).astype(int)
        df_cal['data'] = pd.to_datetime(df_cal['data'])
        df_cal['weekday'] = df_cal['data'].dt.day_name()
        df_cal['week'] = df_cal['data'].dt.isocalendar().week
        try:
            pivot = df_cal.pivot(index='week', columns='weekday', values='treinou').fillna(0)
            fig = px.imshow(pivot, labels=dict(x='Dia', y='Semana', color='Treinou'), text_auto=True)
            st.plotly_chart(fig, use_container_width=True)
        except Exception:
            st.table(df_cal)
    else:
        st.info("Registre treinos para ver o calend√°rio.")


def render_questionario():
    st.title("üèãÔ∏è Perfil do Atleta")
    st.markdown("Responda ao formul√°rio para gerarmos um plano de treino **exclusivo para voc√™**.")
    dados = st.session_state.get('dados_usuario') or {}
    with st.form("form_q"):
        col1, col2 = st.columns(2)
        with col1:
            nome = st.text_input("Nome completo", value=dados.get('nome', ''))
            idade = st.number_input("Idade", 12, 100, value=dados.get('idade', 25))
            peso = st.number_input("Peso (kg)", 30.0, 200.0, value=dados.get('peso', 70.0), step=0.1)
            altura = st.number_input("Altura (cm)", 100.0, 250.0, value=dados.get('altura', 170.0), step=0.1)
            # [NOVO] Campo Sexo
            sexo = st.selectbox("Sexo", ["Masculino", "Feminino"], index=0 if dados.get('sexo', 'Masculino') == 'Masculino' else 1)

        with col2:
            nivel = st.selectbox("Qual seu n√≠vel de experi√™ncia?", ["Iniciante", "Intermedi√°rio/Avan√ßado"],
                                 index=0 if dados.get('nivel') == 'Iniciante' else 1)
            objetivo = st.selectbox("Qual seu objetivo principal?", ["Hipertrofia", "Emagrecimento", "Condicionamento"],
                                      index=["Hipertrofia", "Emagrecimento", "Condicionamento"].index(
                                          dados.get('objetivo', 'Hipertrofia')))
            dias = st.slider("Quantos dias por semana pode treinar?", 2, 6, value=dados.get('dias_semana', 3))

        restricoes = st.multiselect("Possui alguma dor ou restri√ß√£o nas seguintes √°reas?",
                                    ["Lombar", "Joelhos", "Ombros", "Cotovelos", "Punhos"],
                                    default=dados.get('restricoes', []))

        if st.form_submit_button("Salvar Perfil e Gerar Treino"):
            # [MODIFICADO] Adiciona 'sexo' aos novos dados
            novos_dados = {'nome': nome, 'idade': idade, 'peso': peso, 'altura': altura, 'sexo': sexo, # <- Adicionado
                           'nivel': nivel, 'objetivo': objetivo, 'dias_semana': dias, 'restricoes': restricoes,
                           'data_cadastro': iso_now()}
            st.session_state['dados_usuario'] = novos_dados
            hp = st.session_state.get('historico_peso', [])
            if not hp or hp[-1].get('peso') != peso:
                hp.append({'data': iso_now(), 'peso': peso})
                st.session_state['historico_peso'] = hp
            with st.spinner("ü§ñ Criando seu plano de treino personalizado..."):
                st.session_state['plano_treino'] = gerar_plano_personalizado(novos_dados)
                time.sleep(1)
            uid = st.session_state.get('user_uid')
            if uid:
                salvar_dados_usuario_firebase(uid)
            st.success("Perfil salvo e plano de treino personalizado gerado com sucesso!")
            st.info("Acesse a p√°gina 'Meu Treino' para visualizar.")


def render_meu_treino():
    st.title("üí™ Meu Treino")
    plano = st.session_state.get('plano_treino')

    plano_vazio = True
    if plano and isinstance(plano, dict):
        for nome_treino, treino_data in plano.items():
            if isinstance(treino_data, pd.DataFrame) and not treino_data.empty:
                plano_vazio = False; break
            elif isinstance(treino_data, list) and treino_data and all(isinstance(item, dict) for item in treino_data):
                plano_vazio = False; break

    if not plano or plano_vazio:
        st.info("Voc√™ ainda n√£o tem um plano de treino. V√° para a p√°gina 'Question√°rio' para gerar o seu primeiro!")
        return

    dados = st.session_state.get('dados_usuario') or {}
    st.info(
        f"Este plano foi criado para um atleta **{dados.get('nivel', '')}** treinando **{dados.get('dias_semana', '')}** dias por semana com foco em **{dados.get('objetivo', '')}**.")
    st.markdown("---")

    for nome_treino, treino_data in plano.items():
        if isinstance(treino_data, pd.DataFrame):
            df_treino = treino_data
        elif isinstance(treino_data, list):
            df_treino = pd.DataFrame(treino_data)
        else:
            df_treino = pd.DataFrame()

        if df_treino.empty: continue

        col1, col2 = st.columns([3, 1])
        with col1:
            st.subheader(nome_treino)
            st.caption(f"{len(df_treino)} exerc√≠cios")
        with col2:
            # Bot√£o para iniciar o modo interativo (existente)
            if st.button("‚ñ∂Ô∏è Iniciar Treino", key=f"start_{nome_treino}", use_container_width=True, type="primary"):
                st.session_state.update(
                    {'workout_in_progress': True, 'current_workout_plan': df_treino.to_dict('records'),
                     'current_exercise_index': 0, 'workout_log': [], 'rest_timer_end': None})
                st.rerun()

            # --- NOVO BOT√ÉO ADICIONADO ABAIXO ---
            if st.button("‚úÖ Marcar Conclu√≠do", key=f"quick_complete_{nome_treino}", use_container_width=True):
                hoje = date.today()  # Pega a data atual
                frequencia_atual = st.session_state.get('frequencia', [])

                # Verifica se o treino de hoje j√° foi contabilizado
                if hoje not in frequencia_atual:
                    frequencia_atual.append(hoje)  # Adiciona data √† lista
                    st.session_state['frequencia'] = frequencia_atual  # Atualiza o estado da sess√£o

                    # Salva a altera√ß√£o no Firebase
                    salvar_dados_usuario_firebase(st.session_state.get('user_uid'))

                    st.toast(f"√ìtimo! Treino '{nome_treino}' contabilizado para hoje.")

                    # Opcional: For√ßar re-run para atualizar contadores no dashboard imediatamente
                    # time.sleep(1) # Pequena pausa para o toast ser vis√≠vel
                    # st.rerun()
                else:
                    # Informa que j√° foi contabilizado
                    st.toast("O treino de hoje j√° foi contabilizado!")
            st.caption("Marca o dia como treinado.")  # Legenda explicativa
            # --- FIM DO NOVO BOT√ÉO ---

        # O restante do c√≥digo (expanders, v√≠deos, etc.) permanece igual
        for index, row in df_treino.iterrows():
            exercicio, series, repeticoes, descanso = row['Exerc√≠cio'], row['S√©ries'], row['Repeti√ß√µes'], row[
                'Descanso']
            with st.expander(f"**{exercicio}** | {series} S√©ries x {repeticoes} Reps"):
                col_media, col_instr = st.columns([1, 2])
                with col_media:
                    video_url = find_exercise_video_youtube(exercicio)
                    if video_url:
                        st.link_button("üé• Assistir Execu√ß√£o", video_url)
                        st.caption(f"Abre o v√≠deo de {exercicio} no YouTube")
                    else:
                        st.info("V√≠deo de execu√ß√£o indispon√≠vel.")
                with col_instr:
                    st.markdown("##### üìã **Instru√ß√µes**")
                    st.markdown(
                        f"- **S√©ries:** `{series}`\n- **Repeti√ß√µes:** `{repeticoes}`\n- **Descanso:** `{descanso}`")
                    st.markdown("---")
                    ex_data = EXERCICIOS_DB.get(exercicio, {})
                    grupo_muscular = ex_data.get('grupo', 'N/A')
                    equipamento = ex_data.get('equipamento', 'N/A')
                    descricao_exercicio = ex_data.get('descricao')
                    st.write(f"**Grupo Muscular:** {grupo_muscular}")
                    st.write(f"**Equipamento:** {equipamento}")
                    if descricao_exercicio:
                        st.markdown("---")
                        st.markdown(f"**üìù Como Fazer:**\n{descricao_exercicio}")
                    st.markdown(" ")
                    st.button("üîÑ Trocar Exerc√≠cio", key=f"swap_{nome_treino}_{index}", on_click=trocar_exercicio,
                              args=(nome_treino, index, exercicio), use_container_width=True)
        st.markdown("---")


def render_registrar_treino():
    st.title("üìù Registrar Treino")
    with st.form("f_registrar"):
        data = st.date_input("Data", datetime.now().date())
        tipos = list(st.session_state.get('plano_treino', {}).keys()) + ["Cardio", "Outro"] if st.session_state.get(
            'plano_treino') else ["Cardio", "Outro"]
        tipo = st.selectbox("Tipo", tipos)
        exercicio = st.selectbox("Exerc√≠cio", [""] + sorted(list(EXERCICIOS_DB.keys())))
        c1, c2, c3 = st.columns(3)
        with c1:
            series = st.number_input("S√©ries", 1, 12, 3)
        with c2:
            reps = st.number_input("Repeti√ß√µes", 1, 50, 10)
        with c3:
            peso = st.number_input("Peso (kg)", 0.0, 500.0, 0.0, 0.5)
        obs = st.text_area("Observa√ß√µes")
        if st.form_submit_button("Registrar"):
            if not exercicio:
                st.error("Escolha um exerc√≠cio.")
            else:
                novo = {'data': data.isoformat(), 'tipo': tipo, 'exercicio': exercicio, 'series': int(series),
                        'reps': int(reps), 'peso': float(peso), 'volume': int(series) * int(reps) * float(peso),
                        'observacoes': obs, 'timestamp': iso_now()}
                hist = st.session_state.get('historico_treinos', [])
                hist.append(novo)
                st.session_state['historico_treinos'] = hist
                freq = st.session_state.get('frequencia', [])
                if data not in freq:
                    freq.append(data)
                    st.session_state['frequencia'] = freq
                uid = st.session_state.get('user_uid')
                if uid: salvar_dados_usuario_firebase(uid)
                st.success("‚úÖ Treino registrado.")
                with st.form("form_feedback_quick"):
                    st.subheader("Feedback r√°pido")
                    nota = st.slider("Dificuldade (1-5)", 1, 5, 3)
                    dor = st.checkbox("Teve dor/desconforto")
                    comentarios = st.text_area("Coment√°rios (opcional)")
                    if st.form_submit_button("Enviar feedback"):
                        st.session_state['feedbacks'].append(
                            {'exercicio': exercicio, 'nota': nota, 'dor': dor, 'comentarios': comentarios,
                             'data': data.isoformat()})
                        if uid: salvar_dados_usuario_firebase(uid)
                        st.success("Obrigado pelo feedback!")


def render_progresso():
    st.title("üìà Progresso")
    hist = st.session_state.get('historico_treinos', [])
    if not hist: st.info("Registre treinos para ver gr√°ficos."); return
    df = pd.DataFrame(hist)
    df['data'] = pd.to_datetime(df['data'])
    vol = df.groupby(df['data'].dt.date)['volume'].sum().reset_index()
    fig = px.line(vol, x='data', y='volume', title='Volume por dia', markers=True)
    st.plotly_chart(fig, use_container_width=True)
    vol['rolling'] = vol['volume'].rolling(7, min_periods=1).mean()
    if len(vol['rolling']) >= 8:
        last, prev = vol['rolling'].iloc[-1], vol['rolling'].iloc[-8]
        if prev > 0 and abs(last - prev) / prev < 0.05:
            st.warning("Poss√≠vel plat√¥ detectado (varia√ß√£o <5% nas √∫ltimas semanas).")


def render_fotos():
    st.title("üì∏ Fotos de Progresso")

    # Usar 'expanded=True' para deixar aberto por padr√£o, facilitando o acesso
    with st.expander("‚ûï Adicionar Nova Foto", expanded=True):
        col_upload, col_details = st.columns([1, 1]) # Dividir em duas colunas de tamanho igual

        with col_upload:
            st.markdown("##### 1. Selecione a Imagem")
            uploaded = st.file_uploader(
                "Arraste e solte ou clique para buscar", # Label mais interativo
                type=['png', 'jpg', 'jpeg'],
                label_visibility="collapsed" # Oculta o label padr√£o, j√° temos o markdown acima
            )
            st.caption("Formatos: PNG, JPG, JPEG. Limite: 200MB.")

        # A coluna de detalhes s√≥ mostra conte√∫do se uma imagem foi carregada
        with col_details:
            if uploaded is not None:
                st.markdown("##### 2. Detalhes e Salvar")
                try:
                    img = Image.open(uploaded).convert('RGB')
                    # Mostrar preview com largura da coluna
                    st.image(img, caption='Preview da Imagem', use_column_width=True)

                    data_foto = st.date_input("üóìÔ∏è Data da foto", datetime.now().date())

                    # Tenta pegar o √∫ltimo peso registrado como padr√£o
                    default_weight = st.session_state.get('dados_usuario', {}).get('peso', 70.0)
                    if st.session_state.get('historico_peso'):
                        try: default_weight = st.session_state['historico_peso'][-1]['peso']
                        except: pass # Ignora erro se formato inesperado

                    peso_foto = st.number_input("‚öñÔ∏è Peso (kg) neste dia", min_value=20.0, value=float(default_weight), step=0.1)
                    nota = st.text_area("üìù Notas / Observa√ß√µes (opcional)")

                    if st.button("üíæ Salvar foto", use_container_width=True, type="primary"):
                        with st.spinner("Processando e salvando..."):
                            b64 = b64_from_pil(img)
                            fotos = st.session_state.get('fotos_progresso', [])
                            fotos.append({'data': data_foto.isoformat(), 'peso': float(peso_foto), 'imagem': b64, 'nota': nota, 'timestamp': iso_now()})
                            # Ordena√ß√£o agora feita na exibi√ß√£o da galeria
                            st.session_state['fotos_progresso'] = fotos
                            uid = st.session_state.get('user_uid')
                            if uid: salvar_dados_usuario_firebase(uid)
                            st.success("Foto salva com sucesso!")
                            time.sleep(1)
                            st.rerun() # Limpa o uploader e atualiza a galeria
                except Exception as e:
                    st.error(f"Erro ao processar imagem: {e}")
            else:
                # Mensagem enquanto nenhuma imagem foi selecionada
                st.info("‚¨ÖÔ∏è Selecione um arquivo para ver o preview e adicionar detalhes.")

    st.markdown("---") # Separador antes da galeria

    # --- Galeria de Fotos (restante da fun√ß√£o) ---
    st.subheader("üñºÔ∏è Galeria de Progresso")
    # Ordena as fotos pela data mais recente aqui, antes de exibir
    fotos = sorted(st.session_state.get('fotos_progresso', []), key=lambda x: x.get('data', ''), reverse=True)

    if not fotos:
        st.info("Nenhuma foto adicionada ainda.")
        return # Adiciona return para clareza

    # L√≥gica de exibi√ß√£o e exclus√£o da galeria (permanece igual)
    for i, f in enumerate(fotos):
        # Prote√ß√£o extra caso 'imagem' n√£o exista ou esteja corrompida
        if 'imagem' not in f or not f['imagem']: continue

        c1, c2, c3 = st.columns([1, 3, 1])
        with c1:
            try:
                # Usar um tamanho fixo pode ser melhor que width=140 para consist√™ncia
                st.image(base64.b64decode(f['imagem']), width=150)
            except Exception:
                st.error("Erro ao carregar imagem") # Mensagem mais clara
        with c2:
            data_str = f.get('data', 'Data N/A')
            peso_str = f"{f.get('peso', '?'):.1f}kg" if f.get('peso') else ""
            st.write(f"üìÖ **{data_str}** ‚öñÔ∏è **{peso_str}**")
            if f.get('nota'):
                st.caption(f"üìù {f.get('nota')}")
        with c3:
            if st.button("üóëÔ∏è Excluir", key=f"del_{i}", use_container_width=True):
                confirm_delete_photo_dialog(i, st.session_state.get('user_uid'))

    # L√≥gica de confirma√ß√£o de exclus√£o (permanece igual)
    if st.session_state.get('confirm_excluir_foto'):
        st.warning("Deseja realmente excluir esta foto?")
        ca, cb = st.columns(2)
        with ca:
            if st.button("‚ùå Cancelar", key="cancel_delete"): # Adiciona key para evitar conflitos
                st.session_state['confirm_excluir_foto'] = False
                st.session_state['foto_a_excluir'] = None
                st.rerun()
        with cb:
            if st.button("‚úÖ Confirmar exclus√£o", key="confirm_delete"): # Adiciona key
                idx = st.session_state.get('foto_a_excluir')
                # Recarrega a lista FOTOS DENTRO DA CONFIRMA√á√ÉO para garantir √≠ndice correto
                fotos_atual = sorted(st.session_state.get('fotos_progresso', []), key=lambda x: x.get('data', ''), reverse=True)
                if idx is not None and idx < len(fotos_atual):
                    foto_para_excluir = fotos_atual.pop(idx) # Remove da lista ordenada
                    # Encontra o item correspondente na lista original do session_state para remover
                    lista_original = st.session_state['fotos_progresso']
                    item_original_idx = -1
                    try:
                       # Tenta encontrar pelo timestamp ou imagem como identificador √∫nico
                       ts_para_excluir = foto_para_excluir.get('timestamp')
                       if ts_para_excluir:
                           item_original_idx = next(i for i, item in enumerate(lista_original) if item.get('timestamp') == ts_para_excluir)
                       else: # Fallback pela imagem se timestamp n√£o existir
                           img_para_excluir = foto_para_excluir.get('imagem')
                           item_original_idx = next(i for i, item in enumerate(lista_original) if item.get('imagem') == img_para_excluir)
                    except (StopIteration, KeyError):
                        st.error("Erro ao encontrar foto original para excluir.")

                    if item_original_idx != -1:
                        del lista_original[item_original_idx]
                        st.session_state['fotos_progresso'] = lista_original # Salva a lista modificada
                        uid = st.session_state.get('user_uid')
                        if uid: salvar_dados_usuario_firebase(uid)
                        st.success("Foto exclu√≠da.")
                    else:
                         st.error("N√£o foi poss√≠vel excluir a foto (item n√£o encontrado).")

                else:
                     st.error("√çndice inv√°lido para exclus√£o.")

                st.session_state['confirm_excluir_foto'] = False
                st.session_state['foto_a_excluir'] = None
                st.rerun()


def render_comparar_fotos():
    st.title("üîç Comparar Fotos")
    fotos = st.session_state.get('fotos_progresso', [])
    if len(fotos) < 2: st.info("Adicione pelo menos duas fotos para comparar."); return
    options = [f"{i} - {f['data']} - {f.get('peso')}kg" for i, f in enumerate(fotos)]
    sel = st.multiselect("Escolha duas fotos (antes, depois)", options, default=[options[-1], options[0]])
    if len(sel) != 2: st.info("Selecione exatamente duas fotos."); return
    idx1, idx2 = options.index(sel[0]), options.index(sel[1])
    img1, img2 = pil_from_b64(fotos[idx1]['imagem']), pil_from_b64(fotos[idx2]['imagem'])
    col1, col2 = st.columns(2)
    with col1:
        st.image(img1, caption=f"Antes: {fotos[idx1]['data']}")
    with col2:
        st.image(img2, caption=f"Depois: {fotos[idx2]['data']}")
    alpha = st.slider("Alpha (0=antes,1=depois)", 0.0, 1.0, 0.5)
    blended = overlay_blend(img1, img2, alpha)
    st.image(blended, caption=f"Blend (alpha={alpha})", use_column_width=True)
    st.json(compare_images_metric(img1, img2))


def render_medidas():
    st.title("üìè Medidas Corporais")

    # --- Formul√°rio para adicionar nova medida ---
    # (Permanece igual)
    with st.form("form_med", clear_on_submit=True):
        tipo = st.selectbox("Tipo", ['Cintura', 'Quadril', 'Bra√ßo', 'Coxa', 'Peito'])
        valor = st.number_input("Valor (cm)", min_value=10.0, max_value=300.0, value=40.0, step=0.1)
        data_medida = st.date_input("Data", datetime.now().date())
        submitted = st.form_submit_button("Salvar medida")
        if submitted:
            medidas = st.session_state.get('medidas', [])
            nova_medida = {'tipo': tipo, 'valor': float(valor), 'data': data_medida.isoformat(), 'timestamp': iso_now()}
            medidas.append(nova_medida)
            st.session_state['medidas'] = medidas # Atualiza sem ordenar aqui
            uid = st.session_state.get('user_uid')
            if uid: salvar_dados_usuario_firebase(uid)
            st.success(f"Medida de {tipo} ({valor} cm) salva!")
            st.rerun()

    st.markdown("---")

    # --- Exibi√ß√£o das √öltimas Medidas Registradas ---
    # (Permanece igual, com a l√≥gica corrigida de sort/drop_duplicates)
    st.subheader("√öltimas Medidas Registradas")
    medidas_salvas = st.session_state.get('medidas', [])
    if not medidas_salvas:
        st.info("Nenhuma medida registrada ainda. Use o formul√°rio acima para adicionar.")
    else:
        latest_measurements = {}
        try:
            df_medidas = pd.DataFrame(medidas_salvas)
            df_medidas['data'] = pd.to_datetime(df_medidas['data'])
            if 'timestamp' not in df_medidas.columns: df_medidas['timestamp'] = pd.to_datetime(df_medidas['data'], errors='coerce').fillna(pd.Timestamp('1970-01-01'))
            else: df_medidas['timestamp'] = pd.to_datetime(df_medidas['timestamp'], errors='coerce').fillna(pd.Timestamp('1970-01-01'))
            df_medidas_sorted = df_medidas.sort_values(by=['data', 'timestamp'], ascending=[False, False])
            df_latest = df_medidas_sorted.drop_duplicates(subset='tipo', keep='first')
            latest_measurements = df_latest.set_index('tipo').to_dict('index')
        except Exception as e: st.error(f"Erro ao processar as medidas salvas: {e}")

        tipos_esperados = ['Cintura', 'Quadril', 'Bra√ßo', 'Coxa', 'Peito']
        cols = st.columns(len(tipos_esperados))
        for i, tipo_m in enumerate(tipos_esperados):
            with cols[i]:
                if tipo_m in latest_measurements:
                    medida = latest_measurements[tipo_m]; valor_m = medida['valor']; data_dt = medida['data']
                    data_m_str = data_dt.strftime('%d/%m/%Y') if pd.notnull(data_dt) else "Data inv√°lida"
                    st.metric(label=f"{tipo_m}", value=f"{valor_m:.1f} cm", delta=f"Em {data_m_str}", delta_color="off")
                else: st.metric(label=tipo_m, value="N/A", delta="N√£o registrado", delta_color="off")

    st.markdown("---")

    # --- [REFORMATADO] Exibi√ß√£o de Indicadores de Refer√™ncia (Sa√∫de) ---
    st.subheader("üìä Indicadores de Refer√™ncia (Sa√∫de)") # Emoji adicionado
    dados_usuario = st.session_state.get('dados_usuario')

    if dados_usuario and 'altura' in dados_usuario and 'sexo' in dados_usuario:
        altura_cm = dados_usuario.get('altura', 0)
        sexo_usr = dados_usuario.get('sexo', 'Masculino')

        if altura_cm > 0:
            # 1. Rela√ß√£o Cintura-Altura (RCA)
            rca_ideal_max = altura_cm / 2
            st.markdown(f"üéØ **Rela√ß√£o Cintura-Altura (RCA):**")
            st.markdown(f"> Para **menor risco cardiovascular**, idealmente a circunfer√™ncia da cintura deve ser **menor que `{rca_ideal_max:.1f} cm`** (metade da sua altura).")

            # 2. Circunfer√™ncia Abdominal (Limites de Risco)
            st.markdown(f"‚ö†Ô∏è **Circunfer√™ncia da Cintura (Risco Cardiovascular):**")
            if sexo_usr == 'Masculino':
                st.markdown("- Risco Aumentado: ‚â• `94 cm`\n- Risco **Muito** Aumentado: ‚â• `102 cm`")
            else: # Feminino
                st.markdown("- Risco Aumentado: ‚â• `80 cm`\n- Risco **Muito** Aumentado: ‚â• `88 cm`")
            st.caption("Valores de refer√™ncia comuns. Consulte um profissional de sa√∫de.")

        else:
            st.warning("Altura n√£o encontrada no seu perfil. Preencha o question√°rio para ver as refer√™ncias.")

        # 3. Rela√ß√£o Cintura-Quadril (RCQ)
        cintura_recente = latest_measurements.get('Cintura', {}).get('valor')
        quadril_recente = latest_measurements.get('Quadril', {}).get('valor')
        if cintura_recente and quadril_recente and quadril_recente > 0:
             rcq = cintura_recente / quadril_recente
             st.markdown("---") # Separador
             st.markdown(f"üìâ **Rela√ß√£o Cintura-Quadril (RCQ) Atual:** `{rcq:.2f}`")
             if sexo_usr == 'Masculino':
                 risco_rcq = "**Alto** üî¥" if rcq >= 0.90 else "**Baixo/Moderado** ‚úÖ"
                 st.markdown(f"- Refer√™ncia (Homens): Risco aumentado ‚â• `0.90`. Seu risco atual: {risco_rcq}")
             else: # Feminino
                 risco_rcq = "**Alto** üî¥" if rcq >= 0.85 else "**Baixo/Moderado** ‚úÖ"
                 st.markdown(f"- Refer√™ncia (Mulheres): Risco aumentado ‚â• `0.85`. Seu risco atual: {risco_rcq}")
             st.caption("RCQ √© outro indicador de risco cardiovascular e distribui√ß√£o de gordura.")

    else:
        st.info("‚ÑπÔ∏è Preencha o question√°rio (altura e sexo) para visualizar indicadores de refer√™ncia.")


def render_planner():
    st.title("üóìÔ∏è Planejamento Semanal Sugerido")
    dados_usuario = st.session_state.get('dados_usuario') or {}
    plano_treino = st.session_state.get('plano_treino')

    if not dados_usuario or not plano_treino:
        st.warning("Preencha o question√°rio para gerar seu plano e visualizar o planejamento.")
        return

    dias_semana_num = dados_usuario.get('dias_semana', 3)

    # Mapeamento de √≠ndice de dia da semana para nome
    dias_nomes = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"]

    # Obt√©m os √≠ndices dos dias sugeridos (0=Seg, 6=Dom)
    suggested_day_indices = suggest_days(dias_semana_num)
    suggested_day_names = [dias_nomes[i] for i in suggested_day_indices]

    st.info(
        f"Com base nos seus **{dias_semana_num} dias/semana**, sugerimos treinar em: **{', '.join(suggested_day_names)}**.")
    st.markdown("---")
    st.subheader("Pr√≥ximos 7 Dias:")

    # Pega os nomes dos treinos (A, B, C...) em ordem
    nomes_treinos = list(plano_treino.keys())
    # Cria um 'ciclo' para repetir os nomes dos treinos (A, B, C, A, B, C...)
    ciclo_treinos = cycle(nomes_treinos)

    # Calcula as datas para os pr√≥ximos 7 dias
    hoje = datetime.now().date()
    proximos_7_dias = [(hoje + timedelta(days=i)) for i in range(7)]

    # Cria 7 colunas para exibir os dias
    cols = st.columns(7)

    treino_counter = 0  # Contador para saber qual treino (A, B, C) usar

    for i, dia_data in enumerate(proximos_7_dias):
        dia_semana_idx = dia_data.weekday()  # 0 para Segunda, 6 para Domingo
        nome_dia_semana = dias_nomes[dia_semana_idx]
        data_formatada = dia_data.strftime("%d/%m")

        # Verifica se este dia da semana √© um dia sugerido para treino
        is_training_day = dia_semana_idx in suggested_day_indices

        with cols[i]:
            # Define o estilo do "cart√£o" do dia
            background_color = "#2E4053" if is_training_day else "#1C2833"  # Cor mais escura para descanso
            border_style = "2px solid #5DADE2" if is_training_day else "1px solid #566573"  # Borda destacada para treino

            st.markdown(f"""
            <div style="background-color:{background_color}; border:{border_style}; border-radius:10px; padding:15px; text-align:center; height:150px; display:flex; flex-direction:column; justify-content:space-between;">
                <div style="font-weight:bold; font-size:1.1em;">{nome_dia_semana}</div>
                <div style="font-size:0.9em; color:#AEB6BF;">{data_formatada}</div>
            """, unsafe_allow_html=True)

            if is_training_day:
                # Pega o pr√≥ximo nome de treino do ciclo
                nome_treino_do_dia = next(ciclo_treinos)
                st.markdown(f"""
                    <div style="font-size:1.5em;">üí™</div>
                    <div style="font-weight:bold; color:#5DADE2;">Treino</div>
                    <div style="font-size:0.8em; color:#AEB6BF;">({nome_treino_do_dia.split(':')[0]})</div> 
                    </div> 
                """, unsafe_allow_html=True)  # Fecha o div do cart√£o
            else:
                st.markdown(f"""
                    <div style="font-size:1.5em;">üßò</div>
                    <div style="color:#85929E;">Descanso</div>
                    </div>
                """, unsafe_allow_html=True)  # Fecha o div do cart√£o

    st.markdown("---")
    st.caption("Este √© um planejamento sugerido. Sinta-se √† vontade para ajustar √† sua rotina.")


def suggest_days(dias_sem: int):
    if dias_sem <= 0: return []
    step = 7 / dias_sem
    return sorted(list(set([int(round(i * step)) % 7 for i in range(dias_sem)])))


def render_metas():
    st.title("üéØ Metas")
    with st.form("form_meta"):
        descricao = st.text_input("Descri√ß√£o")
        alvo = st.number_input("Valor Alvo", 0.0, format="%.1f")
        prazo = st.date_input("Prazo", min_value=datetime.now().date())
        if st.form_submit_button("Adicionar"):
            metas = st.session_state.get('metas', [])
            metas.append(
                {'descricao': descricao, 'valor_alvo': alvo, 'prazo': prazo.isoformat(), 'criada_em': iso_now(),
                 'concluida': False})
            st.session_state['metas'] = metas
            uid = st.session_state.get('user_uid')
            if uid: salvar_dados_usuario_firebase(uid)
            st.success("Meta adicionada.")
    for i, m in enumerate(st.session_state.get('metas', [])):
        col1, col2 = st.columns([4, 1])
        with col1:
            st.write(f"{m['descricao']} - Alvo: {m['valor_alvo']} - Prazo: {m['prazo']}")
        with col2:
            if st.button("‚úÖ Concluir", key=f"conq_{i}"):
                st.session_state['metas'][i]['concluida'] = True
                uid = st.session_state.get('user_uid')
                if uid: salvar_dados_usuario_firebase(uid)
                st.success("Meta conclu√≠da.");
                st.rerun()


def render_nutricao():
    st.title("ü•ó Nutri√ß√£o B√°sica")
    dados = st.session_state.get('dados_usuario') or {}
    sexo = st.selectbox("Sexo", ["Masculino", "Feminino"])
    peso = st.number_input("Peso (kg)", value=dados.get('peso', 70.0))
    altura = st.number_input("Altura (cm)", value=dados.get('altura', 170.0))
    idade = st.number_input("Idade", value=dados.get('idade', 25))
    objetivo = st.selectbox("Objetivo", ["Manuten√ß√£o", "Emagrecimento", "Hipertrofia"])
    if st.button("Calcular TMB e macros"):
        tmb = calcular_tmb(sexo, peso, altura, idade)
        macros = sugerir_macros(tmb, objetivo, peso)
        st.metric("TMB estimada", f"{int(tmb)} kcal/dia")
        st.write("Sugest√£o de macros:", macros)


def calcular_tmb(sexo: str, peso: float, altura_cm: float, idade: int) -> float:
    if sexo.lower().startswith('m'): return 10 * peso + 6.25 * altura_cm - 5 * idade + 5
    return 10 * peso + 6.25 * altura_cm - 5 * idade - 161


def sugerir_macros(tmb: float, objetivo: str, peso_kg: float):
    calorias = tmb * 1.55
    if objetivo == 'Emagrecimento':
        calorias *= 0.8
    elif objetivo == 'Hipertrofia':
        calorias *= 1.15
    prote = 1.8 * peso_kg
    prote_kcal = prote * 4
    gord_kcal = calorias * 0.25
    gord = gord_kcal / 9
    carbs_kcal = calorias - (prote_kcal + gord_kcal)
    carbs = carbs_kcal / 4 if carbs_kcal > 0 else 0
    return {'calorias': round(calorias), 'proteina_g': round(prote, 1), 'gordura_g': round(gord, 1),
            'carbs_g': round(carbs, 1)}


def render_busca():
    st.title("üîé Busca")
    q = st.text_input("Pesquisar exerc√≠cios / hist√≥rico / treinos")
    if q:
        exs = [name for name in EXERCICIOS_DB.keys() if q.lower() in name.lower()]
        st.subheader("Exerc√≠cios encontrados");
        st.write(exs)
        hist = st.session_state.get('historico_treinos', [])
        matches = [h for h in hist if q.lower() in h.get('exercicio', '').lower()]
        st.subheader("No hist√≥rico");
        st.dataframe(pd.DataFrame(matches))


def render_export_backup():
    st.title("üì§ Export / Backup")

    # --- Sec√ß√£o de Backup (existente) ---
    payload = {k: st.session_state.get(k) for k in
               ['dados_usuario', 'frequencia', 'historico_treinos', 'metas', 'fotos_progresso', 'medidas']}
    payload['plano_treino'] = plan_to_serial(st.session_state.get('plano_treino'))
    js = json.dumps(payload, default=str, ensure_ascii=False)
    st.download_button("üì• Baixar backup JSON", data=js, file_name="fitpro_backup.json", mime="application/json")
    if st.session_state.get('historico_treinos'):
        df = pd.DataFrame(st.session_state['historico_treinos'])
        st.download_button("üì• Exportar hist√≥rico CSV", data=df.to_csv(index=False), file_name="historico_treinos.csv", mime="text/csv")

    # Bot√£o para criar backup online
    if st.button("Criar backup na cole√ß√£o 'backups'"):
        uid = st.session_state.get('user_uid')
        if uid and uid != 'demo-uid':
            try:
                db.collection('backups').add({'uid': uid, 'payload': payload, 'created': datetime.now()})
                st.success("Backup criado na cole√ß√£o 'backups'.")
            except Exception as e:
                st.error(f"Erro ao criar backup online: {e}")
        elif uid == 'demo-uid':
             st.info("Backup online n√£o dispon√≠vel para modo demo.")
        else:
             st.error("Usu√°rio n√£o identificado para backup online.")

    # --- [CORRE√á√ÉO DE INDENTA√á√ÉO AQUI] ---
    # Este bloco inteiro foi movido um n√≠vel para a esquerda
    st.markdown("---") # Separador visual

    st.subheader("‚ö†Ô∏è Resetar Progresso")
    st.warning("Aten√ß√£o: Esta a√ß√£o apagar√° permanentemente todo o seu hist√≥rico de frequ√™ncia e treinos registrados. Use com cuidado.")

    if 'confirm_reset' not in st.session_state:
        st.session_state.confirm_reset = False

    if st.session_state.confirm_reset:
        st.error("Tem certeza que deseja apagar todo o progresso? Esta a√ß√£o n√£o pode ser desfeita.")
        col1, col2, _ = st.columns([1,1,3])
        with col1:
            if st.button("‚úÖ Sim, apagar tudo", type="primary", use_container_width=True):
                uid = st.session_state.get('user_uid')
                if uid and uid != 'demo-uid':
                    with st.spinner("Apagando progresso..."):
                        st.session_state['frequencia'] = []
                        st.session_state['historico_treinos'] = []
                        st.session_state['ciclo_atual'] = None
                        salvar_dados_usuario_firebase(uid)
                    st.success("Progresso resetado com sucesso!")
                    st.session_state.confirm_reset = False
                    time.sleep(1)
                    st.rerun()
                elif uid == 'demo-uid':
                    st.info("Reset n√£o aplic√°vel ao modo demo.")
                    st.session_state.confirm_reset = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Usu√°rio n√£o identificado para reset.")
                    st.session_state.confirm_reset = False

        with col2:
            if st.button("‚ùå Cancelar", use_container_width=True):
                st.session_state.confirm_reset = False
                st.rerun()
    else:
        if st.button("Resetar Hist√≥rico de Treinos", type="secondary"):
            st.session_state.confirm_reset = True
            st.rerun()


def render_admin_panel():
    st.title("üëë Painel Admin")
    st.warning("Use com cuidado ‚Äî a√ß√µes afetam usu√°rios reais.")
    try:
        users = list(db.collection('usuarios').stream())
    except Exception:
        st.error("Erro ao listar usu√°rios."); return
    st.write(f"Total usu√°rios: {len(users)}")
    for u in users:
        d = u.to_dict()
        nome = d.get('username', (d.get('dados_usuario') or {}).get('nome', '-'))
        st.write(f"- {nome} ({u.id}) - treinos: {len(d.get('frequencia', []))} - role: {d.get('role')}")
        c1, c2, c3 = st.columns([3, 1, 1])
        with c1:
            if st.button("Ver dados", key=f"ver_{u.id}"): st.json(d)
        with c2:
            if d.get('role') != 'admin' and st.button("Promover", key=f"prom_{u.id}"):
                db.collection('usuarios').document(u.id).update({'role': 'admin'});
                st.success("Promovido a admin.");
                st.rerun()
        with c3:
            if st.button("Excluir", key=f"del_{u.id}"):
                st.session_state['user_to_delete'] = u.id;
                st.session_state['confirm_delete_user'] = True;
                st.rerun()
    if st.session_state.get('confirm_delete_user'):
        st.warning("Confirmar exclus√£o do usu√°rio (irrevog√°vel).")
        ca, cb = st.columns(2)
        with ca:
            if st.button("‚úÖ Confirmar exclus√£o"):
                uid = st.session_state.get('user_to_delete')
                if uid:
                    try:
                        try:
                            auth.delete_user(uid)
                        except Exception:
                            pass
                        db.collection('usuarios').document(uid).delete()
                        st.success("Usu√°rio exclu√≠do.")
                    except Exception as e:
                        st.error(f"Erro ao excluir: {e}")
                st.session_state['confirm_delete_user'] = False;
                st.session_state['user_to_delete'] = None;
                st.rerun()
        with cb:
            if st.button("‚ùå Cancelar"):
                st.session_state['confirm_delete_user'] = False;
                st.session_state['user_to_delete'] = None;
                st.rerun()


# ---------------------------
# Run app
# ---------------------------
def run():
    if not st.session_state.get('usuario_logado'):
        uid_from_cookie = cookies.get('user_uid')
        if uid_from_cookie:
            try:
                doc = db.collection('usuarios').document(uid_from_cookie).get()
                if doc.exists:
                    st.session_state['user_uid'] = uid_from_cookie
                    st.session_state['usuario_logado'] = doc.to_dict().get('username', 'Usu√°rio')
                    carregar_dados_usuario_firebase(uid_from_cookie)
                else:
                    del cookies['user_uid']
            except Exception as e:
                st.error(f"Erro ao tentar login autom√°tico: {e}")
    if not st.session_state.get('usuario_logado'):
        render_auth()
    else:
        render_main()


if __name__ == "__main__":
    run()