# app_treino.py (Vers√£o Final com Modo de Treino Interativo)
"""
FitPro - App completo pronto para deploy
- Spinner em opera√ß√µes de I/O (salvar/carregar)
- Confirma√ß√µes elegantes (st.dialog() quando dispon√≠vel, fallback)
- Calend√°rio visual de treinos
- Firebase (Auth + Firestore) via st.secrets["firebase_credentials"]
- Compatibilidade Streamlit (st.rerun fallback)
- Gera√ß√£o de treino totalmente personalizada baseada em question√°rio.
- L√≥gica de substitui√ß√£o de exerc√≠cios baseada em restri√ß√µes.
- Banco de exerc√≠cios expandido com categorias e alternativas.
- Login persistente com cookies para n√£o deslogar ao atualizar a p√°gina.
- Uso de st.cache_resource para otimizar a conex√£o com Firebase.
- Funcionalidade de Rede Social com posts, fotos, curtidas e coment√°rios.
- Sistema de Seguir/Deixar de Seguir usu√°rios e Feed Personalizado.
- Interface da p√°gina "Meu Treino" com busca din√¢mica de GIFs na internet.
- [NOVO] Modo de Treino Interativo com checklist, timer de descanso e registro em tempo real.
"""
import os
import re
import urllib.parse
import io
import json
import time
import base64
import logging
import requests  # Importa√ß√£o necess√°ria para buscar GIFs
from datetime import datetime, date, timedelta
from typing import Any, Dict, List, Optional
from itertools import cycle




import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from PIL import Image, ImageChops, ImageFilter, ImageStat
from streamlit_cookies_manager import CookieManager


import random
# Optional SSIM
try:
    from skimage.metrics import structural_similarity as ssim  # type: ignore

    SKIMAGE_AVAILABLE = True
except Exception:
    SKIMAGE_AVAILABLE = False

# Firebase admin
import firebase_admin
from firebase_admin import credentials, auth, firestore

# Suppress noisy logs
os.environ["GRPC_VERBOSITY"] = "NONE"
logging.getLogger("google").setLevel(logging.ERROR)

# ---------------------------
# Streamlit compatibility
# ---------------------------
if not hasattr(st, "rerun") and hasattr(st, "experimental_rerun"):
    st.rerun = st.experimental_rerun  # type: ignore

HAS_ST_DIALOG = hasattr(st, "dialog")
HAS_ST_MODAL = hasattr(st, "modal")

# ---------------------------
# Page config & Cookie Manager
# ---------------------------
st.set_page_config(page_title="FitPro", page_icon="üèãÔ∏è", layout="wide")
cookies = CookieManager()

if not cookies.ready():
    st.stop()


# ---------------------------
# Helpers
# ---------------------------
def iso_now() -> str:
    return datetime.now().isoformat()


def sha256(s: str) -> str:
    import hashlib
    return hashlib.sha256(s.encode()).hexdigest()


def valid_email(e: str) -> bool:
    return bool(re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', e or ''))


def b64_from_pil(img: Image.Image) -> str:
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    return base64.b64encode(buf.getvalue()).decode()


def pil_from_b64(b64: str) -> Image.Image:
    return Image.open(io.BytesIO(base64.b64decode(b64))).convert('RGBA')


def overlay_blend(img1: Image.Image, img2: Image.Image, alpha: float) -> Image.Image:
    img1 = img1.convert('RGBA').resize(img2.size)
    return Image.blend(img1, img2, alpha)


def compare_images_metric(img1: Image.Image, img2: Image.Image) -> Dict[str, Any]:
    img1_s = img1.convert('L').resize((256, 256))
    img2_s = img2.convert('L').resize((256, 256))
    arr1 = np.array(img1_s).astype(float)
    arr2 = np.array(img2_s).astype(float)
    mse = float(((arr1 - arr2) ** 2).mean())
    res = {'mse': mse}
    if SKIMAGE_AVAILABLE:
        try:
            res['ssim'] = float(ssim(arr1, arr2))
        except Exception:
            res['ssim'] = None
    else:
        res['ssim'] = None
    e1 = img1_s.filter(ImageFilter.FIND_EDGES)
    e2 = img2_s.filter(ImageFilter.FIND_EDGES)
    ed = ImageChops.difference(e1, e2)
    stat = ImageStat.Stat(ed)
    res['edge_diff_mean'] = float(np.mean(stat.mean))
    return res


# ---------------------------
# Firebase initialization
# ---------------------------
@st.cache_resource
def init_firebase():
    try:
        creds = dict(st.secrets["firebase_credentials"])
        if "private_key" in creds and isinstance(creds["private_key"], str):
            creds["private_key"] = creds["private_key"].replace('\\n', '\n')
        if not firebase_admin._apps:
            cred = credentials.Certificate(creds)
            firebase_admin.initialize_app(cred)
        return firestore.client()
    except Exception as e:
        st.error("Erro inicializando Firebase. Verifique st.secrets['firebase_credentials'].")
        st.error(str(e))
        st.stop()


if 'db' not in st.session_state:
    st.session_state['db'] = init_firebase()
db = st.session_state['db']


# ---------------------------
# Session defaults
# ---------------------------
def ensure_session_defaults():
    defaults = {
        'usuario_logado': None,
        'user_uid': None,
        'dados_usuario': None,
        'plano_treino': None,
        'frequencia': [],
        'historico_treinos': [],
        'historico_peso': [],
        'metas': [],
        'fotos_progresso': [],
        'medidas': [],
        'feedbacks': [],
        'ciclo_atual': None,
        'role': 'free', # <-- Adicionado esta linha, default √© 'free'
        'notificacoes': [],
        'settings': {'theme': 'light', 'notify_on_login': True},
        'offline_mode': False,
        'confirm_excluir_foto': False,
        'foto_a_excluir': None,
        'workout_in_progress': False,
        'current_workout_plan': None,
        'current_exercise_index': 0,
        'workout_log': [],
        'rest_timer_end': None,
        'warmup_in_progress': False,
        'cooldown_in_progress': False,
        'current_routine_exercise_index': 0,
        'routine_timer_end': None, # Mantido caso queira reativar timer
        'timer_finished_flag': False, # Mantido caso queira reativar timer
        'confirm_reset': False, # Para a fun√ß√£o de reset
    }
    for k, v in defaults.items():
        st.session_state.setdefault(k, v)
# ---------------------------
# Fun√ß√£o para buscar GIF de exerc√≠cio
# ---------------------------
@st.cache_data(ttl=3600 * 24)  # Cache de 24 horas
def find_exercise_video_youtube(exercise_name: str) -> Optional[str]:
    """Busca v√≠deo no YouTube via scraping e regex, retorna URL."""
    # st.write(f"--- Iniciando busca para: {exercise_name} ---") # DEBUG
    search_terms = [
        f"como fazer {exercise_name} execu√ß√£o correta",
        f"{exercise_name} tutorial pt-br",
        f"{exercise_name} exercise tutorial",
        f"{exercise_name} exercise form",
        exercise_name
    ]
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    for term in search_terms:
        try:
            # st.write(f"Tentando busca com termo: '{term}'") # DEBUG
            query = urllib.parse.urlencode({'search_query': term})
            url = f"https://www.youtube.com/results?{query}"
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            html_content = response.text
            video_ids = re.findall(r'"/watch\?v=([a-zA-Z0-9_-]{11})"', html_content)
            # st.write(f"IDs encontrados para '{term}': {video_ids}") # DEBUG

            if video_ids:
                first_unique_id = None
                seen_ids = set()
                for video_id in video_ids:
                    if video_id not in seen_ids:
                        first_unique_id = video_id
                        seen_ids.add(video_id)
                        break
                if first_unique_id:
                    video_url = f"https://www.youtube.com/watch?v={first_unique_id}"
                    # st.write(f"*** Encontrado v√≠deo: {video_url} ***") # DEBUG
                    return video_url
        except requests.exceptions.RequestException as e:
            # st.write(f"!!! Erro de rede durante a busca por '{term}': {e}") # DEBUG
            time.sleep(1)
            continue
        except Exception as e:
            # st.write(f"!!! Erro geral durante a busca por '{term}': {e}") # DEBUG
            continue
    # st.write(f"--- Busca finalizada para {exercise_name}, nenhum v√≠deo encontrado. ---") # DEBUG
    return None

def trocar_exercicio(nome_treino, exercise_index, exercicio_atual):
    """Substitui um exerc√≠cio por outro do mesmo grupo muscular."""
    try:
        # 1. Encontrar o grupo muscular do exerc√≠cio a ser trocado
        grupo_muscular = EXERCICIOS_DB.get(exercicio_atual, {}).get('grupo')
        if not grupo_muscular:
            st.warning("N√£o foi poss√≠vel identificar o grupo muscular para encontrar um substituto.")
            return

        # 2. Encontrar todos os exerc√≠cios candidatos do mesmo grupo
        df_treino_atual = pd.DataFrame(st.session_state['plano_treino'][nome_treino])
        exercicios_no_plano = set(df_treino_atual['Exerc√≠cio'])

        candidatos = [
            ex for ex, details in EXERCICIOS_DB.items()
            if details.get('grupo') == grupo_muscular and ex not in exercicios_no_plano
        ]

        # 3. Se houver candidatos, escolher um e fazer a troca
        if candidatos:
            novo_exercicio = random.choice(candidatos)

            # Atualiza o DataFrame no session_state
            df_para_atualizar = st.session_state['plano_treino'][nome_treino]
            # Convertendo para DataFrame para manipula√ß√£o segura
            df_manipulavel = pd.DataFrame(df_para_atualizar)
            df_manipulavel.loc[exercise_index, 'Exerc√≠cio'] = novo_exercicio

            # Salva de volta no formato de lista de dicion√°rios
            st.session_state['plano_treino'][nome_treino] = df_manipulavel.to_dict('records')

            st.toast(f"'{exercicio_atual}' trocado por '{novo_exercicio}'!")

            # 4. Salvar a altera√ß√£o no Firebase
            salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
        else:
            st.warning("Nenhum exerc√≠cio alternativo encontrado para este grupo muscular.")

    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar trocar o exerc√≠cio: {e}")

def trocar_exercicio(nome_treino, exercise_index, exercicio_atual):
    """Substitui um exerc√≠cio por outro do mesmo grupo muscular."""
    try:
        # 1. Encontrar o grupo muscular do exerc√≠cio a ser trocado
        grupo_muscular = EXERCICIOS_DB.get(exercicio_atual, {}).get('grupo')
        if not grupo_muscular:
            st.warning("N√£o foi poss√≠vel identificar o grupo muscular para encontrar um substituto.")
            return

        # 2. Encontrar todos os exerc√≠cios candidatos do mesmo grupo
        df_treino_atual = pd.DataFrame(st.session_state['plano_treino'][nome_treino])
        exercicios_no_plano = set(df_treino_atual['Exerc√≠cio'])

        candidatos = [
            ex for ex, details in EXERCICIOS_DB.items()
            if details.get('grupo') == grupo_muscular and ex not in exercicios_no_plano
        ]

        # 3. Se houver candidatos, escolher um e fazer a troca
        if candidatos:
            novo_exercicio = random.choice(candidatos)

            # Atualiza o DataFrame no session_state
            df_para_atualizar = st.session_state['plano_treino'][nome_treino]
            # Convertendo para DataFrame para manipula√ß√£o segura
            df_manipulavel = pd.DataFrame(df_para_atualizar)
            df_manipulavel.loc[exercise_index, 'Exerc√≠cio'] = novo_exercicio

            # Salva de volta no formato de lista de dicion√°rios
            st.session_state['plano_treino'][nome_treino] = df_manipulavel.to_dict('records')

            st.toast(f"'{exercicio_atual}' trocado por '{novo_exercicio}'!")

            # 4. Salvar a altera√ß√£o no Firebase
            salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
        else:
            st.warning("Nenhum exerc√≠cio alternativo encontrado para este grupo muscular.")

    except Exception as e:
        st.error(f"Ocorreu um erro ao tentar trocar o exerc√≠cio: {e}")

# ---------------------------
# Banco de Exerc√≠cios Expandido
# ---------------------------
WARMUP_ROUTINE_VIP_MOBILITY = [
    {"nome": "Gato-Camelo (Mobilidade Coluna)", "duracao_s": 60, "descricao": "Em quatro apoios, alterne arquear e arredondar a coluna."},
    {"nome": "Rota√ß√£o Tor√°cica (Quatro Apoios)", "duracao_s": 45, "descricao": "Em quatro apoios, leve uma m√£o √† nuca e gire o tronco, apontando o cotovelo para o teto."},
    {"nome": "C√≠rculos de Quadril (Em p√©)", "duracao_s": 60, "descricao": "Em p√©, m√£os na cintura, fa√ßa c√≠rculos amplos com o quadril."},
    {"nome": "Alongamento Maior Alongamento do Mundo", "duracao_s": 60, "descricao": "Posi√ß√£o de afundo, m√£o interna no ch√£o, rotacione o tronco elevando o bra√ßo externo."},
    {"nome": "Agachamento Cossaco (Mobilidade)", "duracao_s": 60, "descricao": "Pernas afastadas, transfira o peso para um lado, agachando lateralmente enquanto a outra perna estende."},
]

COOLDOWN_ROUTINE_VIP_YOGA = [
    {"nome": "Postura da Crian√ßa (Yoga Balasana)", "duracao_s": 60, "descricao": "Ajoelhado, sente-se sobre os calcanhares e incline o tronco √† frente, testa no ch√£o, bra√ßos relaxados."},
    {"nome": "Cachorro Olhando Para Baixo (Yoga Adho Mukha)", "duracao_s": 45, "descricao": "Forme um V invertido com o corpo, alongando costas e posteriores."},
    {"nome": "Alongamento Gato-Vaca Sentado (Yoga Marjaryasana/Bitilasana)", "duracao_s": 60, "descricao": "Sentado, alterne arredondar e arquear a coluna."},
    {"nome": "Tor√ß√£o Sentado (Yoga Ardha Matsyendrasana)", "duracao_s": 30, "descricao": "Sentado, cruze uma perna sobre a outra e tor√ßa o tronco suavemente."},
    {"nome": "Alongamento Borboleta (Yoga Baddha Konasana)", "duracao_s": 45, "descricao": "Sentado, junte as solas dos p√©s e puxe-os para perto, deixe os joelhos ca√≠rem para os lados."},
]
ALIMENTOS_DB = {
    "Prote√≠nas": ["Peito de Frango", "Til√°pia/Peixe Branco", "Ovos", "Clara de Ovo", "Whey Protein", "Carne Vermelha Magra (Patinho, Fil√© Mignon)", "Tofu", "Queijo Cottage", "Iogurte Grego Natural"],
    "Carboidratos": ["Arroz Branco/Integral", "Batata Doce", "Batata Inglesa", "Mandioca (Aipim)", "Aveia", "P√£o Integral", "Frutas (Banana, Ma√ß√£, Mam√£o)", "Macarr√£o Integral", "Feij√£o", "Lentilha"],
    "Gorduras": ["Azeite de Oliva Extra Virgem", "Abacate", "Castanhas (Nozes, Am√™ndoas)", "Pasta de Amendoim Integral", "Gema de Ovo", "Sementes (Chia, Linha√ßa)", "Salm√£o"]
}
# (O resto do seu c√≥digo, como EXERCICIOS_DB, continua abaixo)
EXERCICIOS_DB = {
    # ==================== PERNAS ====================
    # Foco Quadr√≠ceps/Geral
    'Agachamento com Barra': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar', 'Joelhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra apoiada nos ombros/trap√©zio. P√©s afastados na largura dos ombros. Des√ßa flexionando quadril e joelhos, mantendo a coluna neutra e o peito aberto. Suba estendendo quadril e joelhos.'
    },
    'Agachamento Frontal': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar', 'Joelhos', 'Punhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra apoiada na parte frontal dos ombros, cotovelos apontando para frente. Mant√©m o tronco mais ereto que o agachamento tradicional. Des√ßa mantendo o peito aberto e suba estendendo as pernas.'
    },
    'Agachamento com Halteres': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Segure halteres ao lado do corpo com as palmas voltadas para dentro. Mantenha o tronco ereto, des√ßa flexionando quadril e joelhos. Suba estendendo.'
    },
    'Agachamento Goblet': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Segure um halter verticalmente contra o peito. P√©s levemente mais afastados que os ombros. Des√ßa o mais fundo poss√≠vel, mantendo o tronco ereto e os cotovelos entre os joelhos. Suba.'
    },
    'Agachamento B√∫lgaro': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Halteres', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Uma perna √† frente, a outra com o peito do p√© apoiado em um banco atr√°s. Segure halteres ao lado do corpo ou sem peso. Des√ßa flexionando o joelho da frente at√© aproximadamente 90¬∞. Suba estendendo.'
    },
    'Afundo (Passada)': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Halteres/Barra', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, d√™ um passo largo √† frente e des√ßa flexionando ambos os joelhos at√© formar √¢ngulos de 90¬∞. A perna de tr√°s quase toca o ch√£o. Empurre com a perna da frente para voltar √† posi√ß√£o inicial. Alterne as pernas.'
    },
    'Afundo Estacion√°rio': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Halteres', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Mantenha uma perna √† frente e outra atr√°s em posi√ß√£o fixa. Des√ßa verticalmente flexionando os joelhos. Suba mantendo a mesma posi√ß√£o dos p√©s. Complete as repeti√ß√µes e troque de perna.'
    },
    'Leg Press 45¬∞': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sente-se na m√°quina com as costas bem apoiadas. P√©s na plataforma afastados na largura dos ombros. Destrave e des√ßa controladamente flexionando os joelhos (aprox. 90¬∞). Empurre de volta √† posi√ß√£o inicial sem travar os joelhos.'
    },
    'Hack Squat': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Posicione-se na m√°quina com as costas apoiadas e p√©s na plataforma. Ombros sob os apoios. Destrave e des√ßa flexionando os joelhos profundamente. Empurre para cima at√© quase estender completamente.'
    },
    'Cadeira Extensora': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sente-se na m√°quina, ajuste o apoio dos tornozelos. Estenda completamente os joelhos, levantando o peso. Retorne controladamente √† posi√ß√£o inicial.'
    },
    'Sissy Squat': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure em um apoio para equil√≠brio. Incline o tronco para tr√°s enquanto flexiona os joelhos, mantendo quadril, tronco e coxas alinhados. Des√ßa controladamente e volte contraindo os quadr√≠ceps.'
    },

    # Foco Posterior (Isquiotibiais)
    'Mesa Flexora': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deite-se de bru√ßos na m√°quina, joelhos alinhados com o eixo, tornozelos sob o apoio. Flexione os joelhos trazendo os calcanhares em dire√ß√£o aos gl√∫teos. Retorne controladamente.'
    },
    'Mesa Flexora Sentada': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina com as costas apoiadas, tornozelos sobre o apoio. Flexione os joelhos puxando os calcanhares para baixo. Retorne controladamente.'
    },
    'Stiff com Halteres': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres na frente das coxas. Mantenha os joelhos levemente flexionados (quase estendidos). Des√ßa o tronco projetando o quadril para tr√°s, mantendo a coluna reta e os halteres pr√≥ximos √†s pernas. Suba contraindo posteriores e gl√∫teos.'
    },
    'Stiff com Barra': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada pronada. Mantenha joelhos levemente flexionados. Des√ßa inclinando o tronco e projetando o quadril para tr√°s, barra pr√≥xima √†s pernas. Suba contraindo posteriores.'
    },
    'Levantamento Terra Romeno': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra/Halteres', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar ao stiff, mas inicia com a barra j√° elevada (n√£o do ch√£o). Des√ßa at√© a barra atingir aproximadamente a altura dos joelhos/canelas. Foco na fase exc√™ntrica dos posteriores.'
    },
    'Levantamento Terra': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra no ch√£o. P√©s sob a barra, na largura do quadril. Agache, segure a barra com pegada pronada. Mantenha coluna neutra, peito aberto. Levante estendendo quadril e joelhos simultaneamente at√© ficar completamente ereto. Des√ßa controladamente.'
    },
    'Good Morning': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Barra/Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra apoiada nos ombros (como agachamento). Em p√©, joelhos levemente flexionados. Incline o tronco para frente projetando o quadril para tr√°s, mantendo coluna reta. Volte contraindo posteriores e lombar.'
    },

    # Gl√∫teos
    'Eleva√ß√£o P√©lvica': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Barra', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas com os ombros apoiados em um banco e joelhos flexionados. Apoie uma barra sobre o quadril. Des√ßa o quadril e eleve-o o m√°ximo poss√≠vel, contraindo os gl√∫teos no topo. Controle a descida.'
    },
    'Hip Thrust Unilateral': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† eleva√ß√£o p√©lvica, mas executada com uma perna de cada vez. Outra perna estendida no ar. Aumenta a ativa√ß√£o do gl√∫teo trabalhado.'
    },
    'Extens√£o de Quadril (Coice)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal/Caneleiras/Polia', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em quatro apoios ou em p√© na polia/com caneleiras. Estenda uma perna para tr√°s e para cima, contraindo o gl√∫teo. Mantenha o abd√¥men contra√≠do e evite arquear a lombar. Retorne controladamente.'
    },
    'Coice na Polia (Cabo)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© de frente para a polia baixa, prenda o tornozelo no cabo. Estenda o quadril levando a perna para tr√°s, contraindo o gl√∫teo. Controle o retorno.'
    },
    'Abdu√ß√£o de Quadril': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina/El√°sticos/Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina abdutora, deitado de lado, ou em p√© com el√°sticos/caneleiras. Afaste a(s) perna(s) lateralmente contra a resist√™ncia, focando no gl√∫teo lateral (m√©dio/m√≠nimo). Retorne controladamente.'
    },
    'Abdu√ß√£o Deitado de Lado': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal/Caneleiras', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de lado, perna de baixo flexionada para apoio. Eleve a perna de cima lateralmente mantendo-a estendida. Contraia o gl√∫teo m√©dio. Des√ßa controladamente.'
    },
    'Gl√∫teo Sapinho (Frog Pump)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, junte as solas dos p√©s e afaste os joelhos (posi√ß√£o de "sapo"). Calcanhares pr√≥ximos aos gl√∫teos. Eleve o quadril do ch√£o, contraindo fortemente os gl√∫teos. Des√ßa controladamente.'
    },
    'Step Up': {
        'grupo': 'Pernas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal/Halteres', 'restricoes': ['Joelhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em frente a um banco ou caixa. Suba colocando um p√© completamente sobre o banco, empurre com essa perna (n√£o impulsione com a de tr√°s). Fique em p√© sobre o banco. Des√ßa controladamente. Alterne as pernas.'
    },

    # Panturrilhas
    'Panturrilha no Leg Press': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado no Leg Press, ponta dos p√©s na parte inferior da plataforma, calcanhares para fora. Joelhos estendidos (n√£o travados). Empurre a plataforma apenas com a flex√£o plantar. Retorne alongando.'
    },
    'Panturrilha em P√© (M√°quina)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© na m√°quina espec√≠fica, ombros sob os apoios, ponta dos p√©s na plataforma. Eleve os calcanhares o m√°ximo poss√≠vel contraindo as panturrilhas. Des√ßa alongando completamente.'
    },
    'Panturrilha Sentado (M√°quina)': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina espec√≠fica, joelhos sob os apoios, ponta dos p√©s na plataforma. Eleve os calcanhares contraindo as panturrilhas (foco no s√≥leo). Des√ßa alongando.'
    },
    'Panturrilha com Halteres': {
        'grupo': 'Pernas', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© com halteres nas m√£os, ponta dos p√©s em uma eleva√ß√£o (step ou anilha). Eleve os calcanhares o m√°ximo poss√≠vel. Des√ßa alongando completamente. Pode ser feito unilateral para maior amplitude.'
    },

    # ==================== PEITO ====================
    'Supino Reto com Barra': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, p√©s firmes no ch√£o. Pegada na barra um pouco mais larga que os ombros. Des√ßa a barra controladamente at√© tocar levemente o meio do peito. Empurre a barra de volta para cima.'
    },
    'Supino Reto com Halteres': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, segure os halteres acima do peito com as palmas para frente. Des√ßa os halteres lateralmente, flexionando os cotovelos. Empurre os halteres de volta para cima.'
    },
    'Supino Inclinado com Barra': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em banco inclinado (30-45¬∞). Pegada similar ao supino reto. Des√ßa a barra em dire√ß√£o √† parte superior do peito. Empurre para cima.'
    },
    'Supino Inclinado com Halteres': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em um banco inclinado (30-45¬∞). Movimento similar ao supino reto com halteres, mas descendo os pesos em dire√ß√£o √† parte superior do peito.'
    },
    'Supino Declinado': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Barra/Halteres', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em banco declinado (cabe√ßa mais baixa que o quadril), p√©s presos. Des√ßa a barra/halteres em dire√ß√£o √† parte inferior do peito. Empurre para cima. Foco no peitoral inferior.'
    },
    'Crucifixo com Halteres': {
        'grupo': 'Peito', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco reto, halteres acima do peito, palmas das m√£os voltadas uma para a outra, cotovelos levemente flexionados. Abra os bra√ßos descendo os halteres lateralmente em um arco. Retorne √† posi√ß√£o inicial contraindo o peito.'
    },
    'Crucifixo Inclinado': {
        'grupo': 'Peito', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar ao crucifixo reto, mas executado em banco inclinado (30-45¬∞). Maior √™nfase no peitoral superior.'
    },
    'Crucifixo na Polia (Cross Over)': {
        'grupo': 'Peito', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© entre as polias altas, segure as manoplas. Incline levemente o tronco √† frente. Com cotovelos levemente flexionados, puxe as manoplas em um arco para frente, juntando-as na frente do peito. Retorne controladamente.'
    },
    'Peck Deck (Voador)': {
        'grupo': 'Peito', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina, costas apoiadas. Cotovelos nos apoios ou segurando as manoplas. Junte os bra√ßos √† frente do peito contraindo o peitoral. Retorne controladamente.'
    },
    'Flex√£o de Bra√ßo': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Punhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'M√£os no ch√£o afastadas na largura dos ombros (ou um pouco mais). Corpo reto da cabe√ßa aos calcanhares. Des√ßa o peito flexionando os cotovelos. Empurre de volta √† posi√ß√£o inicial.'
    },
    'Flex√£o Declinada': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Punhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'P√©s elevados em um banco, m√£os no ch√£o. Execu√ß√£o similar √† flex√£o tradicional, mas com maior √™nfase no peitoral superior devido ao √¢ngulo.'
    },
    'Flex√£o Inclinada': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Punhos'],
        'niveis_permitidos': ['Iniciante'],
        'descricao': 'M√£os elevadas em um banco ou barra, p√©s no ch√£o. Vers√£o mais f√°cil da flex√£o tradicional, ideal para iniciantes.'
    },
    'Supino na M√°quina': {
        'grupo': 'Peito', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina de supino, costas apoiadas. Empurre as manoplas para frente estendendo os cotovelos. Retorne controladamente. Movimento guiado e seguro.'
    },

    # ==================== COSTAS ====================
    'Barra Fixa': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Pendure-se na barra com pegada pronada (palmas para frente) ou supinada (palmas para voc√™), m√£os afastadas na largura dos ombros ou mais. Puxe o corpo para cima at√© o queixo passar a barra, contraindo as costas. Des√ßa controladamente.'
    },
    'Barra Fixa Supinada': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† barra fixa, mas com pegada supinada (palmas voltadas para voc√™). M√£os na largura dos ombros. Maior ativa√ß√£o dos b√≠ceps e parte inferior do lat√≠ssimo.'
    },
    'Puxada Alta (Lat Pulldown)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina, ajuste o apoio dos joelhos. Pegada na barra mais larga que os ombros. Puxe a barra verticalmente em dire√ß√£o √† parte superior do peito, mantendo o tronco est√°vel e contraindo as costas. Retorne controladamente.'
    },
    'Puxada Frontal com Pegada Fechada': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† puxada alta, mas com pegada neutra ou supinada fechada (m√£os pr√≥ximas). Maior ativa√ß√£o da parte inferior do lat√≠ssimo e b√≠ceps.'
    },
    'Puxada com Tri√¢ngulo': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na polia alta, use o acess√≥rio em forma de V (tri√¢ngulo). Pegada neutra. Puxe em dire√ß√£o ao peito, mantendo cotovelos pr√≥ximos ao corpo.'
    },
    'Remada Curvada com Barra': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco √† frente (45-60¬∞), mantendo a coluna reta e os joelhos levemente flexionados. Pegada pronada na barra. Puxe a barra em dire√ß√£o ao abd√¥men/peito baixo, contraindo as costas. Des√ßa controladamente.'
    },
    'Remada Curvada Supinada': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† remada curvada, mas com pegada supinada (palmas para cima). Maior ativa√ß√£o dos b√≠ceps e parte inferior do lat√≠ssimo.'
    },
    'Remada Sentada (m√°quina)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina com o peito apoiado (se houver). Puxe as manoplas/pegadores em dire√ß√£o ao corpo, mantendo os cotovelos pr√≥ximos ao tronco e contraindo as esc√°pulas. Retorne controladamente.'
    },
    'Remada na Polia Baixa': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado de frente para a polia baixa, p√©s apoiados. Puxe a barra/tri√¢ngulo em dire√ß√£o ao abd√¥men, mantendo o tronco est√°vel. Contraia as esc√°pulas. Retorne alongando os bra√ßos.'
    },
    'Remada Unilateral (Serrote)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie um joelho e a m√£o do mesmo lado em um banco. Mantenha o tronco paralelo ao ch√£o e a coluna reta. Com o outro bra√ßo, puxe o halter em dire√ß√£o ao quadril/costela, mantendo o cotovelo pr√≥ximo ao corpo. Des√ßa controladamente.'
    },
    'Remada com Halteres (Ambos os Bra√ßos)': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco √† frente, joelhos levemente flexionados, halteres pendurados. Puxe ambos os halteres simultaneamente em dire√ß√£o ao abd√¥men/costelas, mantendo cotovelos pr√≥ximos ao corpo.'
    },
    'Pullover com Halter': {
        'grupo': 'Costas', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em um banco (perpendicular ou ao longo), segure um halter com ambas as m√£os acima do peito. Des√ßa o halter em um arco sobre a cabe√ßa mantendo leve flex√£o dos cotovelos. Puxe de volta contraindo dorsal e peito.'
    },
    'Pullover na Polia': {
        'grupo': 'Costas', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© de frente para a polia alta, segure a barra com os bra√ßos estendidos acima da cabe√ßa. Puxe a barra em um arco at√© a frente das coxas, mantendo os bra√ßos quase estendidos. Retorne controladamente.'
    },
    'Remada Cavalinho': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Coloque uma barra em um canto ou use m√°quina espec√≠fica. Posicione-se sobre a barra, inclinado. Puxe a extremidade da barra em dire√ß√£o ao peito. Movimento similar √† remada, mas com pegada √∫nica.'
    },
    'Levantamento Terra': {
        'grupo': 'Costas', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Barra no ch√£o. P√©s sob a barra, na largura do quadril. Agache, segure a barra com pegada pronada. Mantenha coluna neutra, peito aberto. Levante estendendo quadril e joelhos simultaneamente. Trabalha toda a cadeia posterior.'
    },

    # ==================== OMBROS ====================
    'Desenvolvimento Militar com Barra': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Lombar', 'Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), barra apoiada na parte superior do peito, pegada pronada um pouco mais larga que os ombros. Empurre a barra verticalmente para cima at√© estender os cotovelos. Des√ßa controladamente at√© a posi√ß√£o inicial.'
    },
    'Desenvolvimento com Halteres (sentado)': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado em um banco com encosto, segure os halteres na altura dos ombros com as palmas para frente. Empurre os halteres verticalmente para cima. Des√ßa controladamente.'
    },
    'Desenvolvimento com Halteres (em p√©)': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, halteres na altura dos ombros. Empurre os halteres para cima. Exige maior estabiliza√ß√£o do core comparado √† vers√£o sentada.'
    },
    'Desenvolvimento Arnold': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado, inicie com halteres na frente dos ombros, palmas voltadas para voc√™. Ao empurrar para cima, rode os punhos para que as palmas fiquem para frente no topo. Inverta o movimento na descida.'
    },
    'Desenvolvimento na M√°quina': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado na m√°quina, ajuste a altura do banco. Empurre as manoplas para cima. Movimento guiado e seguro, ideal para iniciantes.'
    },
    'Eleva√ß√£o Lateral': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres ao lado do corpo. Mantenha os cotovelos levemente flexionados. Eleve os bra√ßos lateralmente at√© a altura dos ombros. Des√ßa controladamente.'
    },
    'Eleva√ß√£o Lateral na Polia': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© de lado para a polia baixa, segure a manopla do lado oposto ao da polia. Eleve o bra√ßo lateralmente mantendo tens√£o constante. Des√ßa controladamente.'
    },
    'Eleva√ß√£o Lateral Inclinado': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco lateralmente apoiando uma m√£o em um suporte. Com o bra√ßo livre, execute eleva√ß√£o lateral. Isola melhor o deltoide lateral removendo a ajuda do trap√©zio.'
    },
    'Eleva√ß√£o Frontal': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres na frente das coxas (pegada pronada ou neutra). Eleve um bra√ßo de cada vez (ou ambos) para frente, mantendo o cotovelo levemente flexionado, at√© a altura dos ombros. Des√ßa controladamente.'
    },
    'Eleva√ß√£o Frontal com Barra': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Barra', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada pronada na frente das coxas. Eleve a barra para frente at√© a altura dos ombros, mantendo os bra√ßos quase estendidos. Des√ßa controladamente.'
    },
    'Remada Alta': {
        'grupo': 'Ombros', 'tipo': 'Composto', 'equipamento': 'Barra/Halteres', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada pronada fechada (m√£os pr√≥ximas). Puxe a barra verticalmente ao longo do corpo at√© a altura do queixo, cotovelos apontando para cima e para fora. Des√ßa controladamente.'
    },
    'Crucifixo Inverso com Halteres': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco para frente (sentado ou em p√© curvado), halteres pendurados. Eleve os bra√ßos lateralmente em arco, cotovelos levemente flexionados, at√© a altura dos ombros. Foco no deltoide posterior.'
    },
    'Crucifixo Inverso na M√°quina (Peck Deck Inverso)': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado de frente para a m√°quina peck deck (posi√ß√£o inversa), segure as manoplas. Abra os bra√ßos puxando para tr√°s, focando no deltoide posterior. Retorne controladamente.'
    },
    'Face Pull': {
        'grupo': 'Ombros', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na polia alta com corda, segure as pontas da corda. Puxe em dire√ß√£o ao rosto, abrindo os cotovelos para fora. Foco no deltoide posterior e trap√©zio m√©dio. Excelente para sa√∫de dos ombros.'
    },

    # ==================== B√çCEPS ====================
    'Rosca Direta com Barra': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra', 'restricoes': ['Punhos'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada supinada (palmas para cima), m√£os na largura dos ombros. Mantenha os cotovelos fixos ao lado do corpo. Flexione os cotovelos trazendo a barra em dire√ß√£o aos ombros. Des√ßa controladamente.'
    },
    'Rosca Direta com Barra W': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† rosca com barra reta, mas usando barra W (zigzag). A pegada angulada reduz o estresse nos punhos e antebra√ßos.'
    },
    'Rosca Direta com Halteres': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), segure halteres ao lado do corpo com pegada supinada. Mantenha os cotovelos fixos. Flexione os cotovelos, elevando os halteres. Pode ser feito simultaneamente ou alternadamente. Des√ßa controladamente.'
    },
    'Rosca Alternada': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© ou sentado, execute a rosca direta alternando os bra√ßos. Permite maior foco em cada bra√ßo individualmente e possibilita usar cargas ligeiramente maiores.'
    },
    'Rosca Martelo': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© (ou sentado), segure halteres ao lado do corpo com pegada neutra (palmas voltadas para o corpo). Mantenha os cotovelos fixos. Flexione os cotovelos, elevando os halteres. Des√ßa controladamente.'
    },
    'Rosca Concentrada': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado, apoie a parte de tr√°s do bra√ßo na parte interna da coxa. Segure um halter com pegada supinada. Flexione o cotovelo elevando o halter. Maior isolamento do b√≠ceps.'
    },
    'Rosca Scott (Banco Scott)': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado no banco Scott, bra√ßos apoiados na almofada inclinada. Segure a barra com pegada supinada. Flexione os cotovelos. O apoio impede o balan√ßo e isola melhor o b√≠ceps.'
    },
    'Rosca na Polia Baixa': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© de frente para a polia baixa, segure a barra. Execute a rosca mantendo tens√£o constante durante todo o movimento. Permite bom trabalho na fase exc√™ntrica.'
    },
    'Rosca 21': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'M√©todo de treinamento: 7 repeti√ß√µes da metade inferior (at√© 90¬∞), 7 repeti√ß√µes da metade superior (de 90¬∞ at√© completo), 7 repeti√ß√µes completas. Total de 21 repeti√ß√µes cont√≠nuas. Alta intensidade.'
    },
    'Rosca Inversa': {
        'grupo': 'B√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† rosca direta, mas com pegada pronada (palmas para baixo). Trabalha mais intensamente os antebra√ßos e braquiorradial, al√©m do b√≠ceps.'
    },

    # ==================== TR√çCEPS ====================
    'Tr√≠ceps Testa': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': ['Cotovelos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado em um banco reto, segure uma barra W (ou halteres com pegada neutra) acima do peito com os bra√ßos estendidos. Mantenha os bra√ßos (√∫meros) parados. Flexione os cotovelos descendo o peso em dire√ß√£o √† testa/cabe√ßa. Estenda os cotovelos de volta √† posi√ß√£o inicial.'
    },
    'Tr√≠ceps Franc√™s (Testa com Halteres)': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': ['Cotovelos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado, segure halteres com pegada neutra (palmas frente a frente). Mantenha os cotovelos apontando para cima. Des√ßa os halteres ao lado da cabe√ßa flexionando apenas os cotovelos. Estenda.'
    },
    'Tr√≠ceps Pulley': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, de frente para a polia alta, segure a barra ou corda com pegada pronada (ou neutra na corda). Mantenha os cotovelos fixos ao lado do corpo. Estenda completamente os cotovelos empurrando a barra/corda para baixo. Retorne controladamente.'
    },
    'Tr√≠ceps Pulley com Corda': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar ao tr√≠ceps pulley, mas usando corda. Na parte final do movimento, separe as pontas da corda para os lados aumentando a contra√ß√£o do tr√≠ceps.'
    },
    'Tr√≠ceps Unilateral na Polia': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Um bra√ßo por vez na polia alta. Permite maior amplitude de movimento e foco em cada bra√ßo. Boa corre√ß√£o de assimetrias.'
    },
    'Tr√≠ceps Coice': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Incline o tronco para frente, joelho e m√£o de um lado apoiados em banco. Cotovelo do bra√ßo trabalhado fixo junto ao corpo, antebra√ßo perpendicular ao ch√£o. Estenda o cotovelo levando o halter para tr√°s. Retorne controladamente.'
    },
    'Tr√≠ceps Overhead (Franc√™s em P√©)': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'Halteres/Barra', 'restricoes': ['Ombros', 'Cotovelos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© ou sentado, segure um halter (ou barra) acima da cabe√ßa com ambas as m√£os. Mantenha os cotovelos apontando para cima. Des√ßa o peso atr√°s da cabe√ßa flexionando apenas os cotovelos. Estenda de volta.'
    },
    'Tr√≠ceps na Polia Alta (Overhead)': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'De costas para a polia alta, segure a corda acima da cabe√ßa. Cotovelos apontando para frente. Estenda os cotovelos empurrando a corda para frente e para cima. √änfase na cabe√ßa longa do tr√≠ceps.'
    },
    'Mergulho no Banco': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Ombros', 'Punhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie as m√£os em um banco atr√°s do corpo, dedos para frente. Mantenha as pernas estendidas √† frente (ou joelhos flexionados para facilitar). Flexione os cotovelos descendo o corpo verticalmente. Empurre de volta para cima estendendo os cotovelos.'
    },
    'Mergulho nas Paralelas': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': ['Ombros'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie-se nas barras paralelas com os bra√ßos estendidos. Mantenha o corpo mais vertical para foco no tr√≠ceps (inclinado trabalha mais peito). Des√ßa flexionando os cotovelos. Empurre para cima.'
    },
    'Supino Fechado': {
        'grupo': 'Tr√≠ceps', 'tipo': 'Composto', 'equipamento': 'Barra', 'restricoes': ['Punhos'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado no banco, pegada na barra mais fechada que os ombros. Des√ßa a barra em dire√ß√£o ao peito mantendo cotovelos pr√≥ximos ao corpo. Empurre para cima. Trabalha tr√≠ceps e peito.'
    },

    # ==================== CORE ====================
    'Prancha': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Apoie os antebra√ßos e as pontas dos p√©s no ch√£o. Mantenha o corpo reto da cabe√ßa aos calcanhares, contraindo o abd√¥men e os gl√∫teos. Evite elevar ou baixar demais o quadril. Sustente a posi√ß√£o.'
    },
    'Prancha Lateral': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de lado, apoie o antebra√ßo e a lateral do p√©. Eleve o quadril formando uma linha reta. Mantenha a posi√ß√£o contraindo o core e os obl√≠quos. Trabalha principalmente os m√∫sculos laterais do abd√¥men.'
    },
    'Prancha com Eleva√ß√£o de Perna': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na posi√ß√£o de prancha, eleve alternadamente cada perna mantendo o quadril est√°vel. Aumenta o desafio de estabiliza√ß√£o.'
    },
    'Abdominal Crunch': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, joelhos flexionados e p√©s no ch√£o (ou pernas elevadas). M√£os atr√°s da cabe√ßa (sem puxar) ou cruzadas no peito. Eleve a cabe√ßa e os ombros do ch√£o, contraindo o abd√¥men ("enrolando" a coluna). Retorne controladamente.'
    },
    'Abdominal na Polia': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Ajoelhado de frente para a polia alta, segure a corda atr√°s da cabe√ßa. Flexione o tronco para baixo contraindo o abd√¥men. Retorne controladamente. Permite progress√£o com carga.'
    },
    'Abdominal Bicicleta': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, m√£os atr√°s da cabe√ßa, pernas elevadas. Leve o cotovelo em dire√ß√£o ao joelho oposto enquanto estende a outra perna. Alterne em movimento de pedalada. Trabalha reto abdominal e obl√≠quos.'
    },
    'Abdominal Infra (Reverso)': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, pernas flexionadas ou estendidas. Eleve o quadril do ch√£o trazendo os joelhos em dire√ß√£o ao peito. Foco no abd√¥men inferior. Des√ßa controladamente.'
    },
    'Eleva√ß√£o de Pernas': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, pernas estendidas. Pode colocar as m√£os sob a lombar para apoio. Mantendo as pernas retas (ou levemente flexionadas), eleve-as at√© formarem 90¬∞ com o tronco. Des√ßa controladamente quase at√© o ch√£o, sem deixar a lombar arquear.'
    },
    'Eleva√ß√£o de Pernas Suspenso': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Pendurado em uma barra fixa, eleve as pernas estendidas (ou joelhos flexionados para facilitar) at√© formarem 90¬∞ com o tronco. Des√ßa controladamente. Vers√£o avan√ßada e muito eficaz.'
    },
    'Russian Twist': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado com o tronco inclinado para tr√°s, joelhos flexionados, p√©s elevados do ch√£o. Segure um halter ou medicine ball. Rotacione o tronco alternando os lados, tocando o peso no ch√£o ao lado do corpo. Trabalha obl√≠quos.'
    },
    'Prancha Din√¢mica (Mountain Climber)': {
        'grupo': 'Core', 'tipo': 'Composto', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na posi√ß√£o de prancha alta (bra√ßos estendidos), traga alternadamente os joelhos em dire√ß√£o ao peito em movimento de corrida. Mant√©m o core ativado e adiciona componente cardiovascular.'
    },
    'Prancha com Toque no Ombro': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na posi√ß√£o de prancha alta, alterne tocando o ombro oposto com cada m√£o. Mant√©m o quadril est√°vel durante o movimento. Excelente para estabiliza√ß√£o e anti-rota√ß√£o.'
    },
    'Dead Bug': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, bra√ßos estendidos para cima, joelhos flexionados a 90¬∞. Des√ßa simultaneamente um bra√ßo sobre a cabe√ßa e a perna oposta estendida, mantendo a lombar colada no ch√£o. Retorne e alterne. Excelente para coordena√ß√£o e estabilidade.'
    },
    'Superman': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de bru√ßos, bra√ßos e pernas estendidos. Eleve simultaneamente bra√ßos, peito e pernas do ch√£o, contraindo lombar e gl√∫teos. Mantenha por um instante e retorne controladamente.'
    },
    'Bird Dog': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em quatro apoios. Estenda simultaneamente um bra√ßo para frente e a perna oposta para tr√°s, formando uma linha reta. Mantenha o core est√°vel. Retorne e alterne. Trabalha estabiliza√ß√£o e equil√≠brio.'
    },
    'Pallof Press': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√© de lado para a polia m√©dia, segure a manopla pr√≥xima ao peito. Estenda os bra√ßos para frente resistindo √† rota√ß√£o do tronco. Mantenha e retorne. Excelente exerc√≠cio anti-rota√ß√£o.'
    },
    'Abdominal Canivete (V-Up)': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado completamente estendido. Simultaneamente eleve pernas e tronco tentando tocar as m√£os nos p√©s, formando um "V". Des√ßa controladamente. Exerc√≠cio avan√ßado e intenso.'
    },
    'Roda Abdominal (Ab Wheel)': {
        'grupo': 'Core', 'tipo': 'Composto', 'equipamento': 'Acess√≥rio', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Ajoelhado, segure a roda abdominal. Role para frente estendendo o corpo o m√°ximo poss√≠vel mantendo o core contra√≠do. Puxe de volta contraindo o abd√¥men. Exerc√≠cio muito desafiador.'
    },
    'Hollow Body Hold': {
        'grupo': 'Core', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas, eleve ligeiramente os ombros e pernas do ch√£o (pernas estendidas), bra√ßos ao lado do corpo ou estendidos acima da cabe√ßa. Lombar colada no ch√£o. Mantenha a posi√ß√£o. Base do core em gin√°stica.'
    },
    'Windshield Wiper': {
        'grupo': 'Core', 'tipo': 'Isolado', 'equipamento': 'Peso Corporal', 'restricoes': ['Lombar'],
        'niveis_permitidos': ['Intermedi√°rio/Avan√ßado'],
        'descricao': 'Deitado de costas com pernas elevadas a 90¬∞, bra√ßos abertos para os lados. Des√ßa as pernas juntas para um lado (sem tocar o ch√£o) e retorne ao centro. Alterne. Trabalha intensamente os obl√≠quos.'
    },

    # ==================== TRAP√âZIO ====================
    'Encolhimento com Barra': {
        'grupo': 'Trap√©zio', 'tipo': 'Isolado', 'equipamento': 'Barra', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada pronada, bra√ßos estendidos na frente do corpo. Eleve os ombros em dire√ß√£o √†s orelhas contraindo o trap√©zio. Des√ßa controladamente. N√£o flexione os cotovelos.'
    },
    'Encolhimento com Halteres': {
        'grupo': 'Trap√©zio', 'tipo': 'Isolado', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure halteres ao lado do corpo, bra√ßos estendidos. Eleve os ombros em dire√ß√£o √†s orelhas. Des√ßa controladamente. Permite maior amplitude de movimento que a barra.'
    },
    'Encolhimento na M√°quina': {
        'grupo': 'Trap√©zio', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Utilize m√°quina espec√≠fica para encolhimento (trap bar ou smith machine). Execute o movimento vertical elevando os ombros. Trajet√≥ria est√°vel e controlada.'
    },
    'Face Pull': {
        'grupo': 'Trap√©zio', 'tipo': 'Isolado', 'equipamento': 'M√°quina', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Na polia alta com corda, segure as pontas da corda. Puxe em dire√ß√£o ao rosto, abrindo os cotovelos para fora. Trabalha trap√©zio m√©dio/inferior, deltoide posterior e manguito rotador.'
    },

    # ==================== ANTEBRA√áO ====================
    'Rosca Punho (Wrist Curl)': {
        'grupo': 'Antebra√ßo', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Sentado, antebra√ßos apoiados nas coxas ou em um banco, punhos para fora da borda. Segure a barra/halteres com pegada supinada. Flexione os punhos para cima. Trabalha flexores do antebra√ßo.'
    },
    'Rosca Punho Inversa': {
        'grupo': 'Antebra√ßo', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Similar √† rosca de punho, mas com pegada pronada (palmas para baixo). Estenda os punhos para cima. Trabalha extensores do antebra√ßo.'
    },
    'Farmer Walk (Caminhada do Fazendeiro)': {
        'grupo': 'Antebra√ßo', 'tipo': 'Composto', 'equipamento': 'Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Segure halteres pesados ao lado do corpo. Caminhe mantendo postura ereta e ombros para tr√°s. Trabalha intensamente a pegada, antebra√ßos, trap√©zio e core. Excelente para for√ßa funcional.'
    },
    'Dead Hang (Suspens√£o na Barra)': {
        'grupo': 'Antebra√ßo', 'tipo': 'Isom√©trico', 'equipamento': 'Peso Corporal', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Pendure-se em uma barra com pegada pronada, bra√ßos estendidos. Mantenha a suspens√£o o m√°ximo de tempo poss√≠vel. Desenvolve for√ßa de pegada e alonga os ombros.'
    },
    'Rosca Inversa': {
        'grupo': 'Antebra√ßo', 'tipo': 'Isolado', 'equipamento': 'Barra/Halteres', 'restricoes': [],
        'niveis_permitidos': ['Iniciante', 'Intermedi√°rio/Avan√ßado'],
        'descricao': 'Em p√©, segure a barra com pegada pronada. Execute uma rosca direta mantendo as palmas para baixo. Trabalha intensamente braquiorradial e extensores do antebra√ßo.'
    },
}

PREMADE_WORKOUTS_DB = {
    # Treino 1
    "ppl_6d_adv": {
        "title": "Push/Pull/Legs (PPL) 6 Dias",
        "description": "Divis√£o cl√°ssica PPL 2x/semana. Foco em hipertrofia e for√ßa para avan√ßados.",
        "image_url": "https://images.pexels.com/photos/1552242/pexels-photo-1552242.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Push A (Peito/Ombro/Tr√≠ceps)": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 2: Pull A (Costas/B√≠ceps)": [
                {"Exerc√≠cio": "Barra Fixa", "S√©ries": "4", "Repeti√ß√µes": "Falha", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Curvada com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 3: Legs A (Pernas)": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "120s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Afundo Estacion√°rio", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
            ],
            "Dia 4: Push B (Varia√ß√£o)": [
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Desenvolvimento Militar com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Mergulho nas Paralelas", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Frontal", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley com Corda", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 5: Pull B (Varia√ß√£o)": [
                {"Exerc√≠cio": "Levantamento Terra", "S√©ries": "3", "Repeti√ß√µes": "5", "Descanso": "120s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Face Pull", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Scott (Banco Scott)", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
            ],
            "Dia 6: Legs B (Varia√ß√£o)": [
                {"Exerc√≠cio": "Agachamento Frontal", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "120s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Agachamento B√∫lgaro", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha Sentado (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 2
    "ul_4d_hipertrofia": {
        "title": "Upper/Lower (Hipertrofia)",
        "description": "Divis√£o de 4 dias (Superior/Inferior 2x) para frequ√™ncia 2x/semana.",
        "image_url": "https://images.pexels.com/photos/1954524/pexels-photo-1954524.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Upper A (Foco For√ßa)": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-8", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Curvada com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-8", "Descanso": "90s"},
                {"Exerc√≠cio": "Desenvolvimento Militar com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-10", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "3", "Repeti√ß√µes": "8-10", "Descanso": "45s"},
            ],
            "Dia 2: Lower A (Foco For√ßa)": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-8", "Descanso": "120s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "60s", "Descanso": "30s"},
            ],
            "Dia 3: Upper B (Foco Volume)": [
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "4", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley com Corda", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 4: Lower B (Foco Volume)": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Agachamento B√∫lgaro", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha Sentado (M√°quina)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 3
    "fullbody_3d_iniciante": {
        "title": "Full Body 3 Dias (Iniciante)",
        "description": "Treino de corpo inteiro 3x/semana, ideal para quem est√° come√ßando.",
        "image_url": "https://images.pexels.com/photos/3289711/pexels-photo-3289711.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Full Body A": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "30-60s", "Descanso": "30s"},
            ],
            "Dia 2: Full Body B": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino na M√°quina", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Abdominal Crunch", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ],
            "Dia 3: Full Body C": [
                {"Exerc√≠cio": "Afundo Estacion√°rio", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "10-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Eleva√ß√£o de Pernas", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 4
    "foco_gluteo_4d": {
        "title": "Foco em Gl√∫teos (4 Dias)",
        "description": "Divis√£o Upper/Lower com √™nfase extra em gl√∫teos e posteriores.",
        "image_url": "https://images.pexels.com/photos/6550853/pexels-photo-6550853.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Inferiores (Foco Gl√∫teo/Post)": [
                {"Exerc√≠cio": "Eleva√ß√£o P√©lvica", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Agachamento B√∫lgaro", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 2: Superiores (Geral)": [
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "10-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 3: Inferiores (Foco Quad/Gl√∫teo)": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Cadeira Extensora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Abdu√ß√£o de Quadril", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
            ],
            "Dia 4: Superiores & Core": [
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Flex√£o de Bra√ßo", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "60s", "Descanso": "30s"},
                {"Exerc√≠cio": "Abdominal Infra (Reverso)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 5
    "ppl_ul_5d_interm": {
        "title": "Intermedi√°rio 5 Dias (PPL + UL)",
        "description": "Divis√£o PPL cl√°ssica (Foco For√ßa) + 2 dias Upper/Lower (Foco Volume).",
        "image_url": "https://images.pexels.com/photos/1552252/pexels-photo-1552252.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Push (Peito/Ombro/Tr√≠ceps)": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 2: Pull (Costas/B√≠ceps)": [
                {"Exerc√≠cio": "Barra Fixa", "S√©ries": "4", "Repeti√ß√µes": "Falha", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Curvada com Barra", "S√©ries": "3", "Repeti√ß√µes": "6-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "45s"},
                {"Exerc√≠cio": "Face Pull", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
            ],
            "Dia 3: Legs (Pernas/Core)": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "120s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
                {"Exerc√≠cio": "Eleva√ß√£o de Pernas Suspenso", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "60s"},
            ],
            "Dia 4: Upper (Volume)": [
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley com Corda", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 5: Lower (Volume/Core)": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "60s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Agachamento B√∫lgaro", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "Falha (max 90s)", "Descanso": "45s"},
            ]
        }
    },
    # Treino 6
    "ab_4d_iniciante_split": {
        "title": "Iniciante 4 Dias (Split A/B)",
        "description": "Treino A/B alternado (A: Push/Core, B: Pull/Legs) para focar na base.",
        "image_url": "https://images.pexels.com/photos/2204196/pexels-photo-2204196.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Treino A: Peito/Ombro/Tr√≠ceps + Core": [
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Abdominal Crunch", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ],
            "Treino B: Costas/B√≠ceps + Pernas": [
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Direta com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ]
        }
    },
    # Treino 7
    "ul_4d_forca": {
        "title": "For√ßa Upper/Lower (4 Dias)",
        "description": "Treino focado em progress√£o de carga nos exerc√≠cios compostos. Ideal para quem quer ficar mais forte.",
        "image_url": "https://images.pexels.com/photos/116077/pexels-photo-116077.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Upper For√ßa (Peito/Costas)": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "4", "Repeti√ß√µes": "4-6", "Descanso": "120s"},
                {"Exerc√≠cio": "Remada Curvada com Barra", "S√©ries": "4", "Repeti√ß√µes": "4-6", "Descanso": "120s"},
                {"Exerc√≠cio": "Desenvolvimento Militar com Barra", "S√©ries": "3", "Repeti√ß√µes": "5-8", "Descanso": "90s"},
                {"Exerc√≠cio": "Barra Fixa Supinada", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "60s"},
            ],
            "Dia 2: Lower For√ßa (Pernas)": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "4-6", "Descanso": "120s-180s"},
                {"Exerc√≠cio": "Levantamento Terra Romeno", "S√©ries": "3", "Repeti√ß√µes": "6-8", "Descanso": "90s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "8-10", "Descanso": "60s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "8-10", "Descanso": "45s"},
            ],
            "Dia 3: Upper Hipertrofia (Varia√ß√£o)": [
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "8-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Scott (Banco Scott)", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
            ],
            "Dia 4: Lower Hipertrofia (Varia√ß√£o)": [
                {"Exerc√≠cio": "Agachamento B√∫lgaro", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Cadeira Extensora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Panturrilha Sentado (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 8
    "split_5d_peito_bracos": {
        "title": "Avan√ßado 5 Dias (Foco Peito/Bra√ßos)",
        "description": "Divis√£o cl√°ssica 'Bro Split' com √™nfase no desenvolvimento do peitoral e bra√ßos.",
        "image_url": "https://images.pexels.com/photos/2247179/pexels-photo-2247179.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Peito": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Crucifixo na Polia (Cross Over)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Flex√£o de Bra√ßo", "S√©ries": "2", "Repeti√ß√µes": "Falha", "Descanso": "60s"},
            ],
            "Dia 2: Costas": [
                {"Exerc√≠cio": "Levantamento Terra", "S√©ries": "3", "Repeti√ß√µes": "5-8", "Descanso": "120s"},
                {"Exerc√≠cio": "Barra Fixa", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Cavalinho", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada com Tri√¢ngulo", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 3: Pernas": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "120s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Stiff com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
            ],
            "Dia 4: Ombros/Trap√©zio": [
                {"Exerc√≠cio": "Desenvolvimento Militar com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Crucifixo Inverso com Halteres", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Encolhimento com Halteres", "S√©ries": "4", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
                {"Exerc√≠cio": "Face Pull", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
            ],
            "Dia 5: Bra√ßos (B√≠ceps/Tr√≠ceps)": [
                {"Exerc√≠cio": "Supino Fechado", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Barra", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Scott (Banco Scott)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley com Corda", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "30s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "30s"},
            ]
        }
    },
    # Treino 9
    "ppl_3d_interm": {
        "title": "Push/Pull/Legs (3 Dias)",
        "description": "A divis√£o PPL cl√°ssica. Frequ√™ncia 1x/semana por grupo, ideal para quem tem 3 dias fixos.",
        "image_url": "https://images.pexels.com/photos/1552249/pexels-photo-1552249.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Push (Peito/Ombro/Tr√≠ceps)": [
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 2: Pull (Costas/B√≠ceps)": [
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "10-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
            ],
            "Dia 3: Legs (Pernas/Core)": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
                {"Exerc√≠cio": "Abdominal Infra (Reverso)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 10
    "casa_3d_iniciante": {
        "title": "Treino em Casa (Iniciante)",
        "description": "Treino Full Body 3x/semana usando apenas Peso Corporal e Halteres.",
        "image_url": "https://images.pexels.com/photos/4162451/pexels-photo-4162451.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Full Body A": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Flex√£o de Bra√ßo", "S√©ries": "3", "Repeti√ß√µes": "Falha (min 5)", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "10-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o P√©lvica", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "45-60s", "Descanso": "30s"},
            ],
            "Dia 2: Full Body B": [
                {"Exerc√≠cio": "Afundo Estacion√°rio", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Abdominal Bicicleta", "S√©ries": "3", "Repeti√ß√µes": "20-30 (total)", "Descanso": "30s"},
            ],
            "Dia 3: Full Body C": [
                {"Exerc√≠cio": "Agachamento com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Flex√£o Inclinada", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada com Halteres (Ambos os Bra√ßos)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Mergulho no Banco", "S√©ries": "3", "Repeti√ß√µes": "Falha (min 8)", "Descanso": "45s"},
                {"Exerc√≠cio": "Eleva√ß√£o de Pernas", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "30s"},
            ]
        }
    },
    # Treino 11
    "rapido_3d_composto": {
        "title": "Treino R√°pido (Foco Compostos)",
        "description": "Treino Full Body 3x/semana focado apenas nos exerc√≠cios compostos. R√°pido e eficaz.",
        "image_url": "https://images.pexels.com/photos/3837464/pexels-photo-3837464.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Foco A": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "45s"},
            ],
            "Dia 2: Foco B": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o de Pernas", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "45s"},
            ],
            "Dia 3: Foco C": [
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "90s"},
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "4", "Repeti√ß√µes": "8-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Abdominal na Polia", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ]
        }
    },
    # Treino 12
    "split_5d_bodybuilding": {
        "title": "Avan√ßado 5 Dias (Bodybuilding)",
        "description": "Divis√£o cl√°ssica de bodybuilding (um grupo por dia) para m√°ximo volume e hipertrofia.",
        "image_url": "https://images.pexels.com/photos/2261482/pexels-photo-2261482.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Peito": [
                {"Exerc√≠cio": "Supino Inclinado com Halteres", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Crucifixo na Polia (Cross Over)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Peck Deck (Voador)", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 2: Costas": [
                {"Exerc√≠cio": "Remada Curvada com Barra", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Pullover na Polia", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 3: Pernas": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "120s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Cadeira Extensora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Panturrilha em P√© (M√°quina)", "S√©ries": "4", "Repeti√ß√µes": "10-15", "Descanso": "30s"},
            ],
            "Dia 4: Ombros": [
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "4", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral na Polia", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Crucifixo Inverso com Halteres", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Encolhimento com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "45s"},
            ],
            "Dia 5: Bra√ßos (B√≠ceps/Tr√≠ceps)": [
                {"Exerc√≠cio": "Rosca Direta com Barra W", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Testa", "S√©ries": "4", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Alternada", "S√©ries": "3", "Repeti√ß√µes": "10-12/lado", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley com Corda", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Tr√≠ceps Unilateral na Polia", "S√©ries": "3", "Repeti√ß√µes": "10-15/lado", "Descanso": "45s"},
            ]
        }
    },
    # Treino 13
    "fullbody_2d_iniciante": {
        "title": "Iniciante 2 Dias (Full Body)",
        "description": "Treino de corpo inteiro 2x/semana. A melhor op√ß√£o para quem tem tempo limitado.",
        "image_url": "https://images.pexels.com/photos/1547248/pexels-photo-1547248.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Full Body A": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Supino na M√°quina", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
                {"Exerc√≠cio": "Prancha", "S√©ries": "3", "Repeti√ß√µes": "Falha (max 60s)", "Descanso": "30s"},
            ],
            "Dia 2: Full Body B": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Desenvolvimento na M√°quina", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Direta com Halteres", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ]
        }
    },
    # Treino 14
    "fullbody_3d_forca_adv": {
        "title": "Full Body 3 Dias (For√ßa)",
        "description": "Foco em progress√£o de carga nos 3 grandes exerc√≠cios compostos. Para avan√ßados.",
        "image_url": "https://images.pexels.com/photos/791763/pexels-photo-791763.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1 (Foco Agachamento)": [
                {"Exerc√≠cio": "Agachamento com Barra", "S√©ries": "4", "Repeti√ß√µes": "4-6", "Descanso": "120s"},
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "8-12/lado", "Descanso": "60s"},
                {"Exerc√≠cio": "Rosca Martelo", "S√©ries": "2", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ],
            "Dia 2 (Foco Supino)": [
                {"Exerc√≠cio": "Supino Reto com Barra", "S√©ries": "4", "Repeti√ß√µes": "4-6", "Descanso": "120s"},
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "10-15", "Descanso": "60s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "8-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Eleva√ß√£o Lateral", "S√©ries": "3", "Repeti√ß√µes": "12-15", "Descanso": "45s"},
            ],
            "Dia 3 (Foco Terra)": [
                {"Exerc√≠cio": "Levantamento Terra", "S√©ries": "3", "Repeti√ß√µes": "4-6", "Descanso": "120s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "6-10", "Descanso": "90s"},
                {"Exerc√≠cio": "Stiff com Halteres", "S√©ries": "3", "Repeti√ß√µes": "10-12", "Descanso": "60s"},
                {"Exerc√≠cio": "Tr√≠ceps Pulley", "S√©ries": "2", "Repeti√ß√µes": "10-15", "Descanso": "45s"},
            ]
        }
    },
    # Treino 15
    "metabolico_3d_geral": {
        "title": "Treino Metab√≥lico (Condicionamento)",
        "description": "Foco em condicionamento e queima cal√≥rica. S√©ries mais altas e descansos mais curtos.",
        "image_url": "https://images.pexels.com/photos/6456303/pexels-photo-6456303.jpeg?auto=compress&cs=tinysrgb&w=600",
        "plano": {
            "Dia 1: Full Body A": [
                {"Exerc√≠cio": "Agachamento Goblet", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Flex√£o de Bra√ßo", "S√©ries": "3", "Repeti√ß√µes": "Falha", "Descanso": "45s"},
                {"Exerc√≠cio": "Remada Sentada (m√°quina)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Afundo (Passada)", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "45s"},
                {"Exerc√≠cio": "Prancha Din√¢mica (Mountain Climber)", "S√©ries": "3", "Repeti√ß√µes": "45s", "Descanso": "30s"},
            ],
            "Dia 2: Full Body B": [
                {"Exerc√≠cio": "Leg Press 45¬∞", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Puxada Alta (Lat Pulldown)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Desenvolvimento com Halteres (sentado)", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Mesa Flexora", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Abdominal Bicicleta", "S√©ries": "3", "Repeti√ß√µes": "45s", "Descanso": "30s"},
            ],
            "Dia 3: Full Body C": [
                {"Exerc√≠cio": "Eleva√ß√£o P√©lvica", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Supino Reto com Halteres", "S√©ries": "3", "Repeti√ß√µes": "15-20", "Descanso": "45s"},
                {"Exerc√≠cio": "Remada Unilateral (Serrote)", "S√©ries": "3", "Repeti√ß√µes": "12-15/lado", "Descanso": "45s"},
                {"Exerc√≠cio": "Step Up", "S√©ries": "3", "Repeti√ß√µes": "10-12/perna", "Descanso": "45s"},
                {"Exerc√≠cio": "Russian Twist", "S√©ries": "3", "Repeti√ß√µes": "45s", "Descanso": "30s"},
            ]
        }
    }
} # <-- FIM DO DICION√ÅRIO


EXERCISE_SUBSTITUTIONS = {
    # Substitui√ß√µes PRINCIPALMENTE por RESTRI√á√ÉO
    'Agachamento com Barra': 'Leg Press 45¬∞',
    'Agachamento Frontal': 'Hack Squat',
    'Stiff com Halteres': 'Mesa Flexora',
    'Stiff com Barra': 'Mesa Flexora',
    'Levantamento Terra Romeno': 'Mesa Flexora',
    'Levantamento Terra': 'Leg Press 45¬∞',
    'Good Morning': 'Mesa Flexora',
    'Remada Curvada com Barra': 'Remada Sentada (m√°quina)',
    'Remada Curvada Supinada': 'Remada na Polia Baixa',
    'Remada com Halteres (Ambos os Bra√ßos)': 'Remada Sentada (m√°quina)',
    'Remada Cavalinho': 'Remada Sentada (m√°quina)',
    'Desenvolvimento Militar com Barra': 'Desenvolvimento com Halteres (sentado)',
    'Desenvolvimento com Halteres (em p√©)': 'Desenvolvimento com Halteres (sentado)',
    'Remada Alta': 'Eleva√ß√£o Lateral',
    'Supino Reto com Barra': 'Supino Reto com Halteres',
    'Supino Inclinado com Barra': 'Supino Inclinado com Halteres',
    'Supino Declinado': 'Supino Reto com Halteres',
    'Pullover com Halter': 'Pullover na Polia',
    'Tr√≠ceps Testa': 'Tr√≠ceps Pulley',
    'Tr√≠ceps Franc√™s (Testa com Halteres)': 'Tr√≠ceps Pulley',
    'Tr√≠ceps Overhead (Franc√™s em P√©)': 'Tr√≠ceps Pulley',
    'Supino Fechado': 'Tr√≠ceps Pulley',
    'Rosca Direta com Barra': 'Rosca Direta com Halteres',
    'Flex√£o de Bra√ßo': 'Supino Reto com Halteres',
    'Flex√£o Declinada': 'Supino Inclinado com Halteres',
    'Flex√£o Inclinada': 'Supino Reto com Halteres',
    'Eleva√ß√£o de Pernas': 'Prancha',
    'Eleva√ß√£o de Pernas Suspenso': 'Abdominal Infra (Reverso)',
    'Superman': 'Prancha',
    'Abdominal Canivete (V-Up)': 'Abdominal Crunch',
    'Roda Abdominal (Ab Wheel)': 'Prancha',
    'Hollow Body Hold': 'Prancha',
    'Windshield Wiper': 'Russian Twist',
    'Extens√£o de Quadril (Coice)': 'Coice na Polia (Cabo)',

    # Substitui√ß√µes PRINCIPALMENTE por N√çVEL (Iniciante n√£o pode fazer)
    'Barra Fixa': 'Puxada Alta (Lat Pulldown)',
    'Barra Fixa Supinada': 'Puxada Frontal com Pegada Fechada',
    'Mergulho no Banco': 'Tr√≠ceps Pulley',
    'Mergulho nas Paralelas': 'Tr√≠ceps Pulley',
    'Agachamento B√∫lgaro': 'Afundo Estacion√°rio',
    'Sissy Squat': 'Cadeira Extensora',
    'Hack Squat': 'Leg Press 45¬∞',
    'Rosca 21': 'Rosca Direta com Halteres',
    'Prancha com Eleva√ß√£o de Perna': 'Prancha',
    'Prancha com Toque no Ombro': 'Prancha',
    'Mountain Climber': 'Prancha',
    'Desenvolvimento Arnold': 'Desenvolvimento com Halteres (sentado)',
    'Eleva√ß√£o Lateral Inclinado': 'Eleva√ß√£o Lateral',
    'Pallof Press': 'Prancha Lateral',

    # Substitui√ß√µes por EQUIPAMENTO n√£o dispon√≠vel
    'Hip Thrust Unilateral': 'Eleva√ß√£o P√©lvica',
    'Step Up': 'Afundo (Passada)',
    'Panturrilha em P√© (M√°quina)': 'Panturrilha no Leg Press',
    'Panturrilha Sentado (M√°quina)': 'Panturrilha no Leg Press',
    'Peck Deck (Voador)': 'Crucifixo com Halteres',
    'Crucifixo na Polia (Cross Over)': 'Crucifixo com Halteres',
    'Crucifixo Inclinado': 'Crucifixo com Halteres',
    'Supino na M√°quina': 'Supino Reto com Halteres',
    'Pullover na Polia': 'Pullover com Halter',
    'Puxada com Tri√¢ngulo': 'Puxada Alta (Lat Pulldown)',
    'Puxada Frontal com Pegada Fechada': 'Puxada Alta (Lat Pulldown)',
    'Remada na Polia Baixa': 'Remada Sentada (m√°quina)',
    'Desenvolvimento na M√°quina': 'Desenvolvimento com Halteres (sentado)',
    'Eleva√ß√£o Lateral na Polia': 'Eleva√ß√£o Lateral',
    'Crucifixo Inverso na M√°quina (Peck Deck Inverso)': 'Crucifixo Inverso com Halteres',
    'Rosca Scott (Banco Scott)': 'Rosca Concentrada',
    'Rosca na Polia Baixa': 'Rosca Direta com Halteres',
    'Tr√≠ceps Pulley com Corda': 'Tr√≠ceps Pulley',
    'Tr√≠ceps Unilateral na Polia': 'Tr√≠ceps Pulley',
    'Tr√≠ceps na Polia Alta (Overhead)': 'Tr√≠ceps Overhead (Franc√™s em P√©)',
    'Abdominal na Polia': 'Abdominal Crunch',
    'Coice na Polia (Cabo)': 'Extens√£o de Quadril (Coice)',
    'Mesa Flexora Sentada': 'Mesa Flexora',
    'Encolhimento na M√°quina': 'Encolhimento com Halteres',
}

# Grupos de exerc√≠cios por categoria (√∫til para busca e organiza√ß√£o)
GRUPOS_MUSCULARES = {
    'Pernas': ['Quadr√≠ceps', 'Isquiotibiais', 'Gl√∫teos', 'Panturrilhas', 'Adutores'],
    'Superior': ['Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps', 'Trap√©zio', 'Antebra√ßo'],
    'Core': ['Abd√¥men', 'Lombar', 'Obl√≠quos']
}

# Dificuldade dos exerc√≠cios (para progress√£o)
NIVEL_DIFICULDADE = {
    'Iniciante': [
        'Leg Press 45¬∞', 'Cadeira Extensora', 'Mesa Flexora', 'Mesa Flexora Sentada',
        'Eleva√ß√£o P√©lvica', 'Abdu√ß√£o de Quadril', 'Gl√∫teo Sapinho (Frog Pump)',
        'Panturrilha no Leg Press', 'Agachamento com Halteres', 'Agachamento Goblet',
        'Afundo (Passada)', 'Afundo Estacion√°rio', 'Panturrilha com Halteres',
        'Supino Reto com Halteres', 'Supino Inclinado com Halteres', 'Crucifixo com Halteres',
        'Flex√£o Inclinada', 'Flex√£o de Bra√ßo', 'Peck Deck (Voador)', 'Supino na M√°quina',
        'Puxada Alta (Lat Pulldown)', 'Remada Sentada (m√°quina)', 'Remada Unilateral (Serrote)',
        'Remada na Polia Baixa', 'Pullover na Polia',
        'Desenvolvimento com Halteres (sentado)', 'Eleva√ß√£o Lateral', 'Eleva√ß√£o Frontal',
        'Desenvolvimento na M√°quina', 'Crucifixo Inverso com Halteres', 'Face Pull',
        'Rosca Direta com Halteres', 'Rosca Alternada', 'Rosca Martelo', 'Rosca Concentrada',
        'Rosca Scott (Banco Scott)', 'Rosca na Polia Baixa',
        'Tr√≠ceps Pulley', 'Tr√≠ceps Pulley com Corda', 'Tr√≠ceps Coice', 'Tr√≠ceps Unilateral na Polia',
        'Prancha', 'Prancha Lateral', 'Abdominal Crunch', 'Abdominal Infra (Reverso)',
        'Abdominal Bicicleta', 'Russian Twist', 'Dead Bug', 'Bird Dog',
        'Encolhimento com Halteres', 'Encolhimento com Barra',
        'Rosca Punho (Wrist Curl)', 'Dead Hang (Suspens√£o na Barra)'
    ],
    'Intermedi√°rio/Avan√ßado': [
        'Agachamento com Barra', 'Agachamento Frontal', 'Agachamento B√∫lgaro', 'Hack Squat',
        'Sissy Squat', 'Stiff com Halteres', 'Stiff com Barra', 'Levantamento Terra Romeno',
        'Levantamento Terra', 'Good Morning', 'Hip Thrust Unilateral', 'Step Up',
        'Extens√£o de Quadril (Coice)', 'Coice na Polia (Cabo)', 'Abdu√ß√£o Deitado de Lado',
        'Supino Reto com Barra', 'Supino Inclinado com Barra', 'Supino Declinado',
        'Crucifixo Inclinado', 'Crucifixo na Polia (Cross Over)', 'Flex√£o Declinada',
        'Pullover com Halter',
        'Barra Fixa', 'Barra Fixa Supinada', 'Remada Curvada com Barra', 'Remada Curvada Supinada',
        'Remada com Halteres (Ambos os Bra√ßos)', 'Remada Cavalinho',
        'Desenvolvimento Militar com Barra', 'Desenvolvimento com Halteres (em p√©)',
        'Desenvolvimento Arnold', 'Remada Alta', 'Eleva√ß√£o Lateral Inclinado',
        'Eleva√ß√£o Lateral na Polia', 'Eleva√ß√£o Frontal com Barra',
        'Crucifixo Inverso na M√°quina (Peck Deck Inverso)',
        'Rosca Direta com Barra', 'Rosca Direta com Barra W', 'Rosca 21', 'Rosca Inversa',
        'Tr√≠ceps Testa', 'Tr√≠ceps Franc√™s (Testa com Halteres)', 'Tr√≠ceps Overhead (Franc√™s em P√©)',
        'Tr√≠ceps na Polia Alta (Overhead)', 'Mergulho no Banco', 'Mergulho nas Paralelas',
        'Supino Fechado',
        'Prancha com Eleva√ß√£o de Perna', 'Prancha com Toque no Ombro', 'Eleva√ß√£o de Pernas',
        'Eleva√ß√£o de Pernas Suspenso', 'Prancha Din√¢mica (Mountain Climber)', 'Superman',
        'Pallof Press', 'Abdominal Canivete (V-Up)', 'Roda Abdominal (Ab Wheel)',
        'Hollow Body Hold', 'Windshield Wiper', 'Abdominal na Polia',
        'Encolhimento na M√°quina', 'Farmer Walk (Caminhada do Fazendeiro)',
        'Rosca Punho Inversa'
    ]

}
WARMUP_ROUTINE = [
    {"nome": "Polichinelos", "duracao_s": 60, "descricao": "Movimento de saltar abrindo e fechando pernas e bra√ßos simultaneamente."},
    {"nome": "Corrida Estacion√°ria (Joelho Alto)", "duracao_s": 60, "descricao": "Simule uma corrida no lugar, elevando bem os joelhos."},
    {"nome": "Rota√ß√£o de Tronco", "duracao_s": 45, "descricao": "Em p√©, gire o tronco suavemente para os lados, mantendo o quadril est√°vel."},
    {"nome": "C√≠rculos com os Bra√ßos (Para Frente)", "duracao_s": 30, "descricao": "Gire os bra√ßos estendidos para frente em c√≠rculos amplos."},
    {"nome": "C√≠rculos com os Bra√ßos (Para Tr√°s)", "duracao_s": 30, "descricao": "Gire os bra√ßos estendidos para tr√°s em c√≠rculos amplos."},
    {"nome": "Agachamento sem Peso (Mobilidade)", "duracao_s": 60, "descricao": "Agache o mais fundo poss√≠vel com boa forma, focando na mobilidade do quadril e tornozelo."},
    {"nome": "Alongamento Din√¢mico de Isquiotibiais (Perna Reta)", "duracao_s": 45, "descricao": "Em p√©, balance uma perna reta para frente e para tr√°s controladamente."},
]

COOLDOWN_ROUTINE = [
    {"nome": "Alongamento Quadr√≠ceps (Em p√©)", "duracao_s": 30, "descricao": "Segure o p√© atr√°s, puxe o calcanhar em dire√ß√£o ao gl√∫teo, mantendo joelhos juntos."},
    {"nome": "Alongamento Posterior Coxa (Sentado ou em p√©)", "duracao_s": 30, "descricao": "Tente alcan√ßar a ponta dos p√©s com as pernas estendidas, alongando a parte de tr√°s das coxas."},
    {"nome": "Alongamento Gl√∫teos (Figura 4 Deitado)", "duracao_s": 30, "descricao": "Deitado, cruze um tornozelo sobre o joelho oposto e puxe a coxa de baixo em dire√ß√£o ao peito."},
    {"nome": "Alongamento Peitoral (No batente da porta)", "duracao_s": 30, "descricao": "Apoie o antebra√ßo no batente e gire o corpo suavemente para o lado oposto."},
    {"nome": "Alongamento Dorsal/Lat√≠ssimo (Ajoelhado)", "duracao_s": 30, "descricao": "Ajoelhe-se e estenda os bra√ßos √† frente no ch√£o, 'afundando' o peito em dire√ß√£o ao solo."},
    {"nome": "Alongamento Tr√≠ceps (Atr√°s da cabe√ßa)", "duracao_s": 30, "descricao": "Leve um cotovelo acima e atr√°s da cabe√ßa, puxe-o suavemente com a outra m√£o."},
    {"nome": "Alongamento B√≠ceps/Antebra√ßo", "duracao_s": 30, "descricao": "Estenda um bra√ßo √† frente com a palma para cima, puxe os dedos para baixo com a outra m√£o."},
]


# ---------------------------
# Plan serialization helpers
# ---------------------------
def plan_to_serial(plano: Optional[Dict[str, Any]]):
    if not plano:
        return None
    out = {}
    for k, v in plano.items():
        if isinstance(v, pd.DataFrame):
            out[k] = v.to_dict(orient='records')
        else:
            out[k] = v
    return out


def serial_to_plan(serial: Optional[Dict[str, Any]]):
    if not serial:
        return None
    out = {}
    for k, v in serial.items():
        if isinstance(v, list):
            try:
                out[k] = pd.DataFrame(v)
            except Exception:
                out[k] = v
        else:
            out[k] = v
    return out


# ---------------------------
# Firestore save/load (with spinner)
# ---------------------------
def salvar_dados_usuario_firebase(uid: str):
    if not uid or uid == 'demo-uid':
        return
    try:
        with st.spinner("üíæ Salvando dados no Firestore..."):
            doc = db.collection('usuarios').document(uid)
            plano_serial = plan_to_serial(st.session_state.get('plano_treino'))
            freq = []
            for d in st.session_state.get('frequencia', []):
                if isinstance(d, (date, datetime)):
                    if isinstance(d, date) and not isinstance(d, datetime):
                        freq.append(datetime.combine(d, datetime.min.time()))
                    else:
                        freq.append(d)
                else:
                    freq.append(d)
            hist = []
            for t in st.session_state.get('historico_treinos', []):
                copy = dict(t)
                if 'data' in copy and isinstance(copy['data'], date) and not isinstance(copy['data'], datetime):
                    copy['data'] = datetime.combine(copy['data'], datetime.min.time())
                hist.append(copy)
            metas_save = []
            for m in st.session_state.get('metas', []):
                copy = dict(m)
                if 'prazo' in copy and isinstance(copy['prazo'], date):
                    copy['prazo'] = datetime.combine(copy['prazo'], datetime.min.time())
                metas_save.append(copy)
            fotos_save = []
            for f in st.session_state.get('fotos_progresso', []):
                copy = dict(f)
                if 'data' in copy and isinstance(copy['data'], date):
                    copy['data'] = copy['data'].isoformat()
                fotos_save.append(copy)
            payload = {
                'dados_usuario': st.session_state.get('dados_usuario'),
                'plano_treino': plano_serial,
                'frequencia': freq,
                'historico_treinos': hist,
                'historico_peso': st.session_state.get('historico_peso', []),
                'metas': metas_save,
                'fotos_progresso': fotos_save,
                'medidas': st.session_state.get('medidas', []),
                'feedbacks': st.session_state.get('feedbacks', []),
                'ciclo_atual': st.session_state.get('ciclo_atual'),
                'role': st.session_state.get('role'),
                'settings': st.session_state.get('settings', {}),
                'ultimo_save': datetime.now()
            }
            doc.set(payload, merge=True)
            time.sleep(0.4)
        st.success("‚úÖ Dados salvos!")
    except Exception as e:
        st.error("Erro ao salvar no Firestore:")
        st.error(str(e))


def carregar_dados_usuario_firebase(uid: str):
    if not uid: return
    try:
        with st.spinner("üîÅ Carregando dados..."):
            doc = db.collection('usuarios').document(uid).get()
            time.sleep(0.2)
        if not doc.exists: return
        data = doc.to_dict()
        st.session_state['dados_usuario'] = data.get('dados_usuario')
        st.session_state['plano_treino'] = serial_to_plan(data.get('plano_treino'))
        st.session_state['frequencia'] = [d.date() if isinstance(d, datetime) else d for d in data.get('frequencia', [])]
        st.session_state['historico_treinos'] = data.get('historico_treinos', [])
        st.session_state['fotos_progresso'] = data.get('fotos_progresso', [])
        st.session_state['medidas'] = data.get('medidas', [])
        st.session_state['feedbacks'] = data.get('feedbacks', [])
        st.session_state['metas'] = data.get('metas', [])
        st.session_state['role'] = data.get('role', 'free') # <-- Carrega o role, default 'free' se n√£o existir
        st.session_state['settings'] = data.get('settings', st.session_state.get('settings', {}))
        st.session_state['ciclo_atual'] = data.get('ciclo_atual') # Carrega ciclo atual tamb√©m
    except Exception as e:
        st.error(f"Erro ao carregar: {e}")


# ---------------------------
# Fun√ß√µes para a Rede Social
# ---------------------------
@st.cache_data(ttl=120)
def carregar_feed_firebase(user_uid: str, limit=50):
    if not user_uid:
        return []
    following_uids = get_following_list(user_uid)
    uids_to_show = list(set(following_uids + [user_uid]))
    if not uids_to_show:
        return []
    try:
        posts_ref = db.collection('posts').where('user_uid', 'in', uids_to_show).order_by('timestamp',
                                                                                          direction=firestore.Query.DESCENDING).limit(
            limit)
        return [doc.to_dict() | {'id': doc.id} for doc in posts_ref.stream()]
    except Exception as e:
        st.error(f"Erro ao carregar o feed: {e}")
        return []


def salvar_post_firebase(user_uid, username, text_content=None, image_b64=None):
    if not user_uid or not username:
        st.error("Usu√°rio n√£o identificado para postar.")
        return False
    if not text_content and not image_b64:
        st.warning("O post precisa de texto ou imagem.")
        return False
    try:
        post_data = {'user_uid': user_uid, 'username': username, 'text_content': text_content, 'image_b64': image_b64,
                     'like_count': 0, 'comment_count': 0, 'timestamp': firestore.SERVER_TIMESTAMP}
        db.collection('posts').add(post_data)
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar o post: {e}")
        return False


def _toggle_like_transaction(transaction, post_ref, like_ref):
    like_doc = like_ref.get(transaction=transaction)
    if like_doc.exists:
        transaction.delete(like_ref)
        transaction.update(post_ref, {'like_count': firestore.Increment(-1)})
    else:
        transaction.set(like_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
        transaction.update(post_ref, {'like_count': firestore.Increment(1)})


def curtir_post(post_id, user_uid):
    if not user_uid or not post_id: return
    post_ref = db.collection('posts').document(post_id)
    like_ref = post_ref.collection('likes').document(user_uid)
    db.run_transaction(lambda transaction: _toggle_like_transaction(transaction, post_ref, like_ref))
    st.cache_data.clear()


def comentar_post(post_id, user_uid, username, text):
    if not all([user_uid, post_id, username, text]): return
    try:
        post_ref = db.collection('posts').document(post_id)
        comments_ref = post_ref.collection('comments')
        comment_data = {'user_uid': user_uid, 'username': username, 'text': text,
                        'timestamp': firestore.SERVER_TIMESTAMP}
        comments_ref.add(comment_data)
        post_ref.update({'comment_count': firestore.Increment(1)})
        st.cache_data.clear()
        return True
    except Exception as e:
        st.error(f"Erro ao comentar: {e}")
        return False


@st.cache_data(ttl=300)
def carregar_comentarios(post_id):
    try:
        comments_ref = db.collection('posts').document(post_id).collection('comments').order_by('timestamp',
                                                                                                direction=firestore.Query.ASCENDING)
        return [doc.to_dict() for doc in comments_ref.stream()]
    except Exception:
        return []


@st.cache_data(ttl=600)
def get_all_users():
    try:
        users_ref = db.collection('usuarios').stream()
        return [{'id': user.id, 'username': user.to_dict().get('username', 'Usu√°rio An√¥nimo')} for user in users_ref]
    except Exception as e:
        st.error(f"Erro ao buscar usu√°rios: {e}")
        return []


@st.cache_data(ttl=300)
def get_following_list(user_uid: str) -> List[str]:
    if not user_uid:
        return []
    try:
        following_ref = db.collection('usuarios').document(user_uid).collection('following').stream()
        return [doc.id for doc in following_ref]
    except Exception:
        return []


def follow_user(follower_uid: str, followed_uid: str):
    if not follower_uid or not followed_uid or follower_uid == followed_uid:
        return
    batch = db.batch()
    following_ref = db.collection('usuarios').document(follower_uid).collection('following').document(followed_uid)
    batch.set(following_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
    followers_ref = db.collection('usuarios').document(followed_uid).collection('followers').document(follower_uid)
    batch.set(followers_ref, {'timestamp': firestore.SERVER_TIMESTAMP})
    batch.commit()
    st.cache_data.clear()


def unfollow_user(follower_uid: str, followed_uid: str):
    if not follower_uid or not followed_uid:
        return
    batch = db.batch()
    following_ref = db.collection('usuarios').document(follower_uid).collection('following').document(followed_uid)
    batch.delete(following_ref)
    followers_ref = db.collection('usuarios').document(followed_uid).collection('followers').document(follower_uid)
    batch.delete(followers_ref)
    batch.commit()
    st.cache_data.clear()


# ---------------------------
# Auth helpers
# ---------------------------
def criar_usuario_firebase(email: str, senha: str, nome: str) -> (bool, str):
    try:
        try:
            _ = auth.get_user_by_email(email)
            return False, "J√° existe um usu√°rio com esse e-mail."
        except auth.UserNotFoundError:
            pass
        user = auth.create_user(email=email, password=senha, display_name=nome)
        uid = user.uid
        db.collection('usuarios').document(uid).set({
            'email': email, 'username': nome, 'dados_usuario': {'nome': nome},
            'plano_treino': None, 'frequencia': [], 'historico_treinos': [],
            'historico_peso': [], 'metas': [], 'fotos_progresso': [], 'medidas': [],
            'feedbacks': [], 'ciclo_atual': None,
            'role': 'free', # <-- Garante que est√° definido como 'free'
            'password_hash': sha256(senha),
            'data_criacao': datetime.now()
        })
        return True, "Usu√°rio criado com sucesso!"
    except Exception as e:
        return False, f"Erro ao criar usu√°rio: {e}"

def verificar_credenciais_firebase(username_or_email: str, senha: str) -> (bool, str):
    if username_or_email == 'demo' and senha == 'demo123':
        st.session_state['user_uid'] = 'demo-uid'
        st.session_state['usuario_logado'] = 'Demo'
        doc = db.collection('usuarios').document('demo-uid').get()
        if doc.exists:
            carregar_dados_usuario_firebase('demo-uid')
        else:
            st.session_state['dados_usuario'] = {'nome': 'Demo', 'peso': 75, 'altura': 175,
                                                 'nivel': 'Intermedi√°rio/Avan√ßado', 'dias_semana': 4,
                                                 'objetivo': 'Hipertrofia', 'restricoes': ['Lombar']}
            st.session_state['plano_treino'] = gerar_plano_personalizado(st.session_state['dados_usuario'])
            st.session_state['frequencia'] = []
            st.session_state['historico_treinos'] = []
            st.session_state['metas'] = []
            st.session_state['fotos_progresso'] = []
        return True, "Modo demo ativado."
    try:
        user = auth.get_user_by_email(username_or_email)
        uid = user.uid
        doc = db.collection('usuarios').document(uid).get()
        if not doc.exists:
            return False, "Usu√°rio sem documento no Firestore."
        data = doc.to_dict()
        stored_hash = data.get('password_hash')
        if stored_hash and stored_hash == sha256(senha):
            st.session_state['user_uid'] = uid
            st.session_state['usuario_logado'] = data.get('username') or username_or_email
            carregar_dados_usuario_firebase(uid)
            cookies['user_uid'] = uid
            return True, f"Bem-vindo(a), {st.session_state['usuario_logado']}!"
        else:
            return False, "Senha incorreta."
    except auth.UserNotFoundError:
        return False, "Usu√°rio n√£o encontrado."
    except Exception as e:
        return False, f"Erro ao autenticar: {e}"


# ---------------------------
# Periodization & Notifications
# ---------------------------
def verificar_periodizacao(num_treinos: int):
    TREINOS = 20
    ciclo = num_treinos // TREINOS
    fase_idx = ciclo % 3
    treinos_no_ciclo = num_treinos % TREINOS
    fases = [
        {'nome': 'Hipertrofia', 'series': '3-4', 'reps': '8-12', 'descanso': '60-90s', 'cor': '#FF6B6B'},
        {'nome': 'For√ßa', 'series': '4-5', 'reps': '4-6', 'descanso': '120-180s', 'cor': '#4ECDC4'},
        {'nome': 'Resist√™ncia', 'series': '2-3', 'reps': '15-20', 'descanso': '30-45s', 'cor': '#95E1D3'},
    ]
    return {'fase_atual': fases[fase_idx], 'treinos_restantes': TREINOS - treinos_no_ciclo,
            'proxima_fase': fases[(fase_idx + 1) % 3], 'numero_ciclo': ciclo + 1}


def check_notifications_on_open():
    notifs = []
    dados = st.session_state.get('dados_usuario') or {}
    dias_list = dados.get('dias_semana_list') or None
    if dias_list and st.session_state['settings'].get('notify_on_login', True):
        hoje = datetime.now().weekday()
        if hoje in dias_list:
            notifs.append({'tipo': 'lembrete_treino', 'msg': 'Hoje √© dia de treino! Confira seu plano.'})
    for m in st.session_state.get('metas', []):
        prazo = m.get('prazo')
        try:
            prazo_dt = date.fromisoformat(prazo) if isinstance(prazo, str) else prazo
            dias = (prazo_dt - datetime.now().date()).days
            if 0 <= dias <= 3:
                notifs.append({'tipo': 'meta', 'msg': f"Meta '{m.get('descricao')}' vence em {dias} dia(s)."})
        except:
            pass
    num_treinos = len(set(st.session_state.get('frequencia', [])))
    info = verificar_periodizacao(num_treinos)
    if info['treinos_restantes'] <= 0 and st.session_state.get('ciclo_atual') != info['numero_ciclo']:
        notifs.append({'tipo': 'nova_fase',
                       'msg': f"üëè Novo ciclo iniciado: {info['fase_atual']['nome']} (Ciclo {info['numero_ciclo']})"})
        st.session_state['ciclo_atual'] = info['numero_ciclo']
        if dados:
            st.session_state['plano_treino'] = gerar_plano_personalizado(dados, info['fase_atual'])
            notifs.append({'tipo': 'plano_ajustado', 'msg': 'Seu plano foi ajustado para a nova fase de treino!'})
    for t in (5, 10, 30, 50, 100):
        if num_treinos == t:
            notifs.append({'tipo': 'conquista', 'msg': f"üéâ Voc√™ alcan√ßou {t} treinos!"})
    st.session_state['notificacoes'] = notifs


# ---------------------------
# UI & Plan Generation
# ---------------------------
def show_logo_center():
    st.markdown("<div style='text-align:center;'><h1>üèãÔ∏è FitPro</h1><p>Seu Personal Trainer Digital</p></div>",
                unsafe_allow_html=True)
# [NOVA] Fun√ß√£o de callback para navega√ß√£o (necess√°ria para os bot√µes VIP)
def navigate_to_page(page_name):
    """Atualiza o session_state para mudar a p√°gina no pr√≥ximo rerun."""
    st.session_state['selected_page'] = page_name


def confirm_delete_photo_dialog(idx: int, uid: Optional[str]):
    if HAS_ST_DIALOG:
        @st.dialog("üóëÔ∏è Confirmar Exclus√£o")
        def inner():
            st.write("Deseja realmente excluir esta foto? Esta a√ß√£o √© irrevers√≠vel.")
            c1, c2 = st.columns(2)
            with c1:
                if st.button("‚ùå Cancelar"):
                    st.rerun()
            with c2:
                if st.button("‚úÖ Confirmar"):
                    fotos = st.session_state.get('fotos_progresso', [])
                    if 0 <= idx < len(fotos):
                        fotos.pop(idx)
                        st.session_state['fotos_progresso'] = fotos
                        if uid:
                            salvar_dados_usuario_firebase(uid)
                        st.success("Foto exclu√≠da.")
                        st.rerun()

        inner()
    else:
        st.session_state['foto_a_excluir'] = idx
        st.session_state['confirm_excluir_foto'] = True


def gerar_plano_personalizado(dados_usuario: Dict[str, Any], fase_atual: Optional[Dict] = None) -> Dict:
    nivel = dados_usuario.get('nivel', 'Iniciante')  # Iniciante ou Intermedi√°rio/Avan√ßado
    dias = dados_usuario.get('dias_semana', 3)
    objetivo = dados_usuario.get('objetivo', 'Hipertrofia')
    restricoes_usr = dados_usuario.get('restricoes', [])
    sexo = dados_usuario.get('sexo', 'Masculino')  # Usado apenas se precisarmos de desempate fino

    # Define s√©ries/reps/descanso base (agora tamb√©m considerando o n√≠vel para s√©ries)
    if fase_atual:
        series_base_str = fase_atual['series']  # Ex: '3-4'
        reps_base = fase_atual['reps']
        descanso_base = fase_atual['descanso']
    else:  # Fallback se n√£o houver fase (raro)
        if objetivo == 'Hipertrofia':
            series_base_str, reps_base, descanso_base = ('3-4' if nivel != 'Iniciante' else '3'), '8-12', '60-90s'
        elif objetivo == 'Emagrecimento':
            series_base_str, reps_base, descanso_base = '3', '12-15', '45-60s'
        else:
            series_base_str, reps_base, descanso_base = '3', '15-20', '30-45s'

    # Determina o n√∫mero de s√©ries com base no n√≠vel e na fase/objetivo
    series_parts = series_base_str.split('-')
    series_final = series_parts[0] if nivel == 'Iniciante' else series_parts[-1]
    # Garante que seja um n√∫mero (caso a base seja s√≥ '3', por exemplo)
    if not series_final.isdigit(): series_final = '3'  # Default seguro

    # Fun√ß√£o selecionar_exercicios (robusta, com filtros de n√≠vel, restri√ß√£o e exclus√£o)
    def selecionar_exercicios(grupos: List[str], n_compostos: int, n_isolados: int, excluir: List[str] = []) -> List[
        Dict]:
        exercicios_selecionados = []
        candidatos_validos = []
        # Filtra exerc√≠cios por grupo, n√≠vel permitido e restri√ß√µes
        for ex_nome, ex_data in EXERCICIOS_DB.items():
            niveis_permitidos = ex_data.get('niveis_permitidos', ['Iniciante', 'Intermedi√°rio/Avan√ßado'])
            if nivel not in niveis_permitidos: continue  # Filtra por n√≠vel aqui

            if ex_data.get('grupo') in grupos and ex_nome not in excluir:
                exercicio_tem_restricao = any(r in ex_data.get('restricoes', []) for r in restricoes_usr)
                if exercicio_tem_restricao:
                    substituto = EXERCISE_SUBSTITUTIONS.get(ex_nome)
                    if substituto and substituto not in excluir:
                        sub_details = EXERCICIOS_DB.get(substituto, {})
                        sub_niveis_permitidos = sub_details.get('niveis_permitidos',
                                                                ['Iniciante', 'Intermedi√°rio/Avan√ßado'])
                        # Verifica n√≠vel E restri√ß√£o do substituto
                        if nivel in sub_niveis_permitidos and substituto not in candidatos_validos and not any(
                                r in sub_details.get('restricoes', []) for r in restricoes_usr):
                            candidatos_validos.append(substituto)
                # Adiciona original se permitido para o n√≠vel e seguro
                elif nivel in niveis_permitidos and ex_nome not in candidatos_validos:
                    candidatos_validos.append(ex_nome)

        # Seleciona compostos e isolados da lista de v√°lidos
        candidatos = list(set(candidatos_validos));
        random.shuffle(candidatos)
        compostos_selecionados = [ex for ex in candidatos if EXERCICIOS_DB[ex]['tipo'] == 'Composto']
        isolados_selecionados = [ex for ex in candidatos if EXERCICIOS_DB[ex]['tipo'] != 'Composto']
        compostos_finais = compostos_selecionados[:n_compostos]
        isolados_finais = isolados_selecionados[:n_isolados]
        exercicios_finais = compostos_finais + isolados_finais

        total_desejado = n_compostos + n_isolados
        if len(exercicios_finais) < total_desejado:
            faltantes = total_desejado - len(exercicios_finais)
            if len(isolados_finais) < n_isolados and len(compostos_selecionados) > len(compostos_finais):
                extras_c = [ex for ex in compostos_selecionados if ex not in exercicios_finais][:faltantes];
                exercicios_finais.extend(extras_c);
                faltantes -= len(extras_c)
            if faltantes > 0 and len(compostos_finais) < n_compostos and len(isolados_selecionados) > len(
                    isolados_finais):
                extras_i = [ex for ex in isolados_selecionados if ex not in exercicios_finais][:faltantes];
                exercicios_finais.extend(extras_i)

        exercicios_finais = exercicios_finais[:total_desejado]

        for ex in exercicios_finais:
            exercicios_selecionados.append(
                {'Exerc√≠cio': ex, 'S√©ries': series_final, 'Repeti√ß√µes': reps_base, 'Descanso': descanso_base})

        return exercicios_selecionados if exercicios_finais else []

    # --- L√ìGICA DE GERA√á√ÉO BASEADA NO DOCUMENTO ---
    plano = {}  # Come√ßa vazio a cada chamada
    grupos_todos = ['Pernas', 'Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps', 'Core', 'Trap√©zio', 'Antebra√ßo']
    grupos_superiores = ['Peito', 'Costas', 'Ombros', 'B√≠ceps', 'Tr√≠ceps', 'Trap√©zio', 'Antebra√ßo']
    grupos_inferiores = ['Pernas', 'Core']
    grupos_push = ['Peito', 'Ombros', 'Tr√≠ceps']
    grupos_pull = ['Costas', 'B√≠ceps', 'Trap√©zio', 'Antebra√ßo']
    grupos_legs = ['Pernas']

    if nivel == 'Iniciante':
        if dias == 1:
            plano['Treino: Full Body'] = selecionar_exercicios(grupos_todos, 3, 3)  # Target: 6
        elif dias == 2:
            plano['Treino A: Superiores'] = selecionar_exercicios(grupos_superiores, 2, 3)  # Target: 5
            plano['Treino B: Inferiores'] = selecionar_exercicios(grupos_inferiores, 2, 2)  # Target: 4
        elif dias == 3:
            fb1 = selecionar_exercicios(grupos_todos, 3, 2)  # Target: 5
            fb2 = selecionar_exercicios(grupos_todos, 3, 2, excluir=[ex['Exerc√≠cio'] for ex in fb1])
            fb3 = selecionar_exercicios(grupos_todos, 3, 2, excluir=[ex['Exerc√≠cio'] for ex in fb1 + fb2])
            plano['Dia 1: Full Body A'] = fb1
            plano['Dia 2: Full Body B'] = fb2 if fb2 else fb1
            plano['Dia 3: Full Body C'] = fb3 if fb3 else fb2 if fb2 else fb1
        elif dias == 4:
            plano['Treino A (Push+Core)'] = selecionar_exercicios(['Peito', 'Ombros', 'Tr√≠ceps', 'Core'], 3,
                                                                  2)  # Target: 5
            plano['Treino B (Pull+Legs)'] = selecionar_exercicios(['Costas', 'B√≠ceps', 'Pernas'], 3, 2)  # Target: 5
        elif dias == 5:
            upper_a = selecionar_exercicios(grupos_superiores, 3, 2)  # Target: 5
            lower_a = selecionar_exercicios(grupos_inferiores, 3, 2)  # Target: 5
            upper_b = selecionar_exercicios(grupos_superiores, 3, 2,
                                            excluir=[ex['Exerc√≠cio'] for ex in upper_a])  # Target: 5
            lower_b = selecionar_exercicios(grupos_inferiores, 3, 2,
                                            excluir=[ex['Exerc√≠cio'] for ex in lower_a])  # Target: 5
            plano['Dia 1: Superiores A'] = upper_a;
            plano['Dia 2: Inferiores A'] = lower_a
            plano['Dia 3: Superiores B'] = upper_b;
            plano['Dia 4: Inferiores B'] = lower_b
            plano['Dia 5: Superiores A'] = upper_a
        elif dias >= 6:
            abc_a = selecionar_exercicios(['Peito', 'Tr√≠ceps'], 3, 2)  # Target: 5
            abc_b = selecionar_exercicios(['Costas', 'B√≠ceps'], 3, 2)  # Target: 5
            abc_c = selecionar_exercicios(['Pernas', 'Ombros'], 3, 2)  # Target: 5
            plano['Dia 1: Peito/Tr√≠ceps A'] = abc_a;
            plano['Dia 2: Costas/B√≠ceps A'] = abc_b;
            plano['Dia 3: Pernas/Ombros A'] = abc_c
            plano['Dia 4: Peito/Tr√≠ceps B'] = selecionar_exercicios(['Peito', 'Tr√≠ceps'], 3, 2,
                                                                    excluir=[ex['Exerc√≠cio'] for ex in abc_a]) or abc_a
            plano['Dia 5: Costas/B√≠ceps B'] = selecionar_exercicios(['Costas', 'B√≠ceps'], 3, 2,
                                                                    excluir=[ex['Exerc√≠cio'] for ex in abc_b]) or abc_b
            plano['Dia 6: Pernas/Ombros B'] = selecionar_exercicios(['Pernas', 'Ombros'], 3, 2,
                                                                    excluir=[ex['Exerc√≠cio'] for ex in abc_c]) or abc_c

    # --- ESTE 'ELIF' √â CRUCIAL (EM VEZ DE 'IF') ---
    elif nivel == 'Intermedi√°rio/Avan√ßado':
        if dias == 1:
            plano['Treino: Full Body Intenso'] = selecionar_exercicios(grupos_todos, 4, 1)  # Target: 5
        elif dias == 2:
            plano['Treino A: Full Body Foco For√ßa'] = selecionar_exercicios(grupos_todos, 4, 1)  # Target: 5
            plano['Treino B: Full Body Foco Volume'] = selecionar_exercicios(grupos_todos, 2, 3)  # Target: 5
        elif dias == 3:
            plano['Dia 1: Push'] = selecionar_exercicios(grupos_push, 3, 2)  # Target: 5
            plano['Dia 2: Pull'] = selecionar_exercicios(grupos_pull, 3, 2)  # Target: 5
            plano['Dia 3: Legs'] = selecionar_exercicios(grupos_legs + ['Core'], 3, 2)  # Target: 5
        elif dias == 4:
            upper_a = selecionar_exercicios(grupos_superiores, 3, 2)  # Target: 5
            lower_a = selecionar_exercicios(grupos_inferiores, 3, 2)  # Target: 5
            plano['Dia 1: Upper For√ßa'] = upper_a;
            plano['Dia 2: Lower For√ßa'] = lower_a
            plano['Dia 3: Upper Volume'] = selecionar_exercicios(grupos_superiores, 2, 3,
                                                                 excluir=[ex['Exerc√≠cio'] for ex in
                                                                          upper_a])  # Target: 5
            plano['Dia 4: Lower Volume'] = selecionar_exercicios(grupos_inferiores, 2, 3,
                                                                 excluir=[ex['Exerc√≠cio'] for ex in
                                                                          lower_a])  # Target: 5
        elif dias == 5:
            plano['Dia 1: Push'] = selecionar_exercicios(grupos_push, 3, 2)  # Target: 5
            plano['Dia 2: Pull'] = selecionar_exercicios(grupos_pull, 3, 2)  # Target: 5
            plano['Dia 3: Legs'] = selecionar_exercicios(grupos_legs, 3, 2)  # Target: 5
            plano['Dia 4: Upper Leve'] = selecionar_exercicios(grupos_superiores, 2, 3)  # Target: 5
            plano['Dia 5: Lower/Core Leve'] = selecionar_exercicios(grupos_inferiores, 3, 2)  # Target: 5
        elif dias >= 6:
            a1 = selecionar_exercicios(['Peito', 'Ombros', 'Tr√≠ceps'], 3, 2)  # Target: 5
            b1 = selecionar_exercicios(['Costas', 'B√≠ceps', 'Trap√©zio'], 3, 2)  # Target: 5
            c1 = selecionar_exercicios(['Pernas', 'Core'], 3, 2)  # Target: 5
            plano['Dia 1: Peito/Ombro/Tr√≠ceps A'] = a1;
            plano['Dia 2: Costas/B√≠ceps/Trap√©zio A'] = b1;
            plano['Dia 3: Pernas/Core A'] = c1
            plano['Dia 4: Peito/Ombro/Tr√≠ceps B'] = selecionar_exercicios(['Peito', 'Ombros', 'Tr√≠ceps'], 3, 2,
                                                                          excluir=[ex['Exerc√≠cio'] for ex in a1]) or a1
            plano['Dia 5: Costas/B√≠ceps/Trap√©zio B'] = selecionar_exercicios(['Costas', 'B√≠ceps', 'Trap√©zio'], 3, 2,
                                                                             excluir=[ex['Exerc√≠cio'] for ex in
                                                                                      b1]) or b1
            plano['Dia 6: Pernas/Core B'] = selecionar_exercicios(['Pernas', 'Core'], 3, 2,
                                                                  excluir=[ex['Exerc√≠cio'] for ex in c1]) or c1

    # Formata√ß√£o final
    plano_final = {}
    for nome, exercicios_lista in plano.items():
        plano_final[nome] = exercicios_lista if exercicios_lista else []
    return plano_final


# ---------------------------
# Pages
# ---------------------------
def render_auth():
    show_logo_center()
    st.markdown("---")
    tab_login, tab_cad = st.tabs(["üîë Login", "üìù Cadastro"])
    with tab_login:
        with st.form("form_login"):
            username = st.text_input("E-mail ou 'demo'")
            senha = st.text_input("Senha", type='password')
            col1, col2 = st.columns([3, 1])
            with col2:
                if st.form_submit_button("üëÅÔ∏è Modo Demo"):
                    ok, msg = verificar_credenciais_firebase('demo', 'demo123')
                    if ok:
                        st.success(msg); st.rerun()
                    else:
                        st.error(msg)
            if st.form_submit_button("Entrar"):
                if not username or not senha:
                    st.error("Preencha username e senha.")
                else:
                    ok, msg = verificar_credenciais_firebase(username.strip(), senha)
                    if ok:
                        st.success(msg); st.rerun()
                    else:
                        st.error(msg)
    with tab_cad:
        with st.form("form_cadastro"):
            nome = st.text_input("Nome completo")
            email = st.text_input("E-mail")
            senha = st.text_input("Senha", type='password')
            senha_conf = st.text_input("Confirmar senha", type='password')
            termos = st.checkbox("Aceito os Termos de Uso")
            if st.form_submit_button("Criar Conta"):
                if not nome or len(nome.strip()) < 3:
                    st.error("Nome m√≠nimo 3 caracteres.")
                elif not valid_email(email):
                    st.error("E-mail inv√°lido.")
                elif len(senha) < 6:
                    st.error("Senha m√≠nimo 6 caracteres.")
                elif senha != senha_conf:
                    st.error("Senhas n√£o coincidem.")
                elif not termos:
                    st.error("Aceite os termos.")
                else:
                    ok, msg = criar_usuario_firebase(email.strip(), senha, nome.strip())
                    if ok:
                        st.success(msg); st.info("Fa√ßa login agora.")
                    else:
                        st.error(msg)
    st.stop()


# [MODIFICADO] Fun√ß√£o render_main com a nova "Biblioteca VIP"
def render_main():
    # Verifica os modos ativos em ordem: Warmup > Workout > Cooldown
    if st.session_state.get('warmup_in_progress', False):
        render_warmup_session()
        st.stop()
    elif st.session_state.get('workout_in_progress', False):
        render_workout_session()
        st.stop()
    elif st.session_state.get('cooldown_in_progress', False):
        render_cooldown_session()
        st.stop()

    # --- O c√≥digo abaixo s√≥ √© executado se nenhum modo estiver ativo ---

    check_notifications_on_open()

    # --- Sidebar ---
    st.sidebar.title("üèãÔ∏è FitPro")
    st.sidebar.write(f"üë§ {st.session_state.get('usuario_logado')}")
    if st.sidebar.button("üö™ Sair"):
        uid = st.session_state.get('user_uid')
        if uid and uid != 'demo-uid':
            salvar_dados_usuario_firebase(uid)

        try:
            del cookies['user_uid']
        except Exception:
            pass

            # --- CORRE√á√ÉO DE SINTAXE AQUI ---
        # Corrige o SyntaxError: invalid syntax (linha 1852)
        keys_to_delete = [k for k in st.session_state.keys() if k != 'db']
        for k in keys_to_delete:
            del st.session_state[k]
        # --- FIM DA CORRE√á√ÉO ---

        ensure_session_defaults()
        st.rerun()

    st.sidebar.markdown("---")
    st.sidebar.subheader("Configura√ß√µes")
    theme = st.sidebar.selectbox("Tema", ["light", "dark"],
                                 index=0 if st.session_state['settings'].get('theme', 'light') == 'light' else 1)
    st.session_state['settings']['theme'] = theme
    notify_on_open = st.sidebar.checkbox("Notifica√ß√µes ao abrir",
                                         value=st.session_state['settings'].get('notify_on_login', True))
    st.session_state['settings']['notify_on_login'] = notify_on_open
    st.sidebar.checkbox("Modo offline (cache)", value=st.session_state.get('offline_mode', False), key='offline_mode')

    if st.session_state.get('role') == 'admin':
        st.sidebar.success("üëë Admin")

    if st.session_state.get('notificacoes'):
        for n in st.session_state.get('notificacoes', []):
            if n.get('tipo') == 'conquista':
                st.balloons()
                st.success(n.get('msg', 'Notifica√ß√£o'))
            else:
                try:
                    st.toast(n.get('msg', 'Notifica√ß√£o'))
                except Exception:
                    st.info(n.get('msg', 'Notifica√ß√£o'))
        st.session_state['notificacoes'] = []

    # --- Navega√ß√£o Principal (Selectbox) ---
    user_role = st.session_state.get('role', 'free')

    # Define a lista base de p√°ginas
    pages = [
        "Dashboard", "Rede Social", "Buscar Usu√°rios", "Question√°rio", "Meu Treino",
        "Registrar Treino", "Progresso", "Fotos", "Comparar Fotos", "Medidas",
        "Planejamento Semanal", "Metas", "Nutri√ß√£o", "Busca",
        "Export/Backup", "Solicitar VIP"
    ]

    # Adiciona a Biblioteca VIP dinamicamente
    if user_role in ['vip', 'admin']:
        # Insere a biblioteca depois de "Meu Treino"
        pages.insert(5, "Biblioteca VIP")

    if user_role == 'admin':
        pages.append("Admin")  # Adiciona Admin ao final

    if 'selected_page' not in st.session_state or st.session_state['selected_page'] not in pages:
        st.session_state['selected_page'] = "Dashboard"

    page = st.selectbox(
        "Navega√ß√£o",
        pages,
        index=pages.index(st.session_state['selected_page']),
        key='selected_page'
    )

    # Mapeamento completo das p√°ginas (incluindo as que foram "perdidas")
    page_map = {
        "Dashboard": render_dashboard,
        "Rede Social": render_rede_social,
        "Buscar Usu√°rios": render_buscar_usuarios,
        "Question√°rio": render_questionario,
        "Meu Treino": render_meu_treino,
        "Biblioteca VIP": render_vip_library,  # <-- Mapeamento VIP
        "Registrar Treino": render_registrar_treino,
        "Progresso": render_progresso,
        "Fotos": render_fotos,  # <-- Mapeamento corrigido
        "Comparar Fotos": render_comparar_fotos,  # <-- Mapeamento corrigido
        "Medidas": render_medidas,  # <-- Mapeamento corrigido
        "Planejamento Semanal": render_planner,  # <-- Mapeamento corrigido
        "Metas": render_metas,  # <-- Mapeamento corrigido
        "Nutri√ß√£o": render_nutricao_gated,
        "Busca": render_busca,  # <-- Mapeamento corrigido
        "Export/Backup": render_export_backup,
        "Solicitar VIP": render_solicitar_vip,
        "Admin": render_admin_panel,  # <-- Mapeamento corrigido
    }

    render_func = page_map.get(page, lambda: st.write("P√°gina em desenvolvimento."))

    try:
        render_func()
    except NameError as e:
        # Este erro agora s√≥ aparecer√° se uma fun√ß√£o de renderiza√ß√£o
        # estiver *realmente* apagada do seu ficheiro.
        st.error(f"Erro: A fun√ß√£o para a p√°gina '{page}' n√£o foi encontrada.")
        st.error(f"Detalhe: {e}")
        st.code(f"Verifique se a fun√ß√£o 'def {e.name}()' existe no seu c√≥digo.")
def render_admin_panel():
    st.title("üëë Painel Admin")
    st.warning("Use com cuidado ‚Äî a√ß√µes afetam usu√°rios reais.")

    # --- Se√ß√£o para Solicita√ß√µes VIP Pendentes ---
    st.markdown("---")
    st.subheader("üì¨ Solicita√ß√µes de Acesso VIP Pendentes")

    try:
        # Busca solicita√ß√µes com status 'pendente', ordenadas pela mais antiga
        vip_requests_ref = db.collection('solicitacoes_vip').where('status', '==', 'pendente').order_by('timestamp').stream()
        pending_requests = list(vip_requests_ref) # Converte para lista

        if not pending_requests:
            st.info("Nenhuma solicita√ß√£o VIP pendente no momento.")
        else:
            st.write(f"Total de solicita√ß√µes pendentes: {len(pending_requests)}")
            for request in pending_requests:
                req_data = request.to_dict()
                req_id = request.id
                req_user_uid = req_data.get('user_uid', 'N/A')
                req_username = req_data.get('username', 'N/A')
                req_email = req_data.get('user_email_contato', 'N/A') # Pega o email de contato
                req_message = req_data.get('mensagem', '(Sem mensagem)')
                req_time = req_data.get('timestamp')
                req_time_str = req_time.strftime('%d/%m/%Y %H:%M') if isinstance(req_time, datetime) else "Data inv√°lida"

                with st.expander(f"De: {req_username} ({req_email}) - Em: {req_time_str}"):
                    st.write(f"**UID do Usu√°rio:** `{req_user_uid}`")
                    st.write("**Mensagem:**")
                    st.write(f"> {req_message}")
                    st.markdown("---")

                    col1_req, col2_req = st.columns(2)
                    with col1_req:
                        # Bot√£o para marcar como processada
                        if st.button("Marcar como Processada", key=f"process_{req_id}", use_container_width=True):
                            try:
                                db.collection('solicitacoes_vip').document(req_id).update({'status': 'processado'})
                                st.success(f"Solicita√ß√£o de {req_username} marcada como processada.")
                                st.rerun() # Atualiza a lista
                            except Exception as e:
                                st.error(f"Erro ao atualizar status: {e}")

    except Exception as e:
        st.error(f"Erro ao buscar solicita√ß√µes VIP: {e}")
    # --- FIM DA SE√á√ÉO VIP ---


    # --- Se√ß√£o de Gerenciamento de Usu√°rios ---
    st.markdown("---")
    st.subheader("üë• Gerenciar Usu√°rios")
    try:
        users_stream = db.collection('usuarios').stream()
        users = list(users_stream)
    except Exception as e:
        st.error(f"Erro ao listar usu√°rios: {e}")
        return

    st.write(f"Total usu√°rios: {len(users)}")
    for u in users:
        d = u.to_dict()
        user_id = u.id
        nome = d.get('username', (d.get('dados_usuario') or {}).get('nome', '-'))
        # CORRE√á√ÉO: Garante que current_role nunca seja None
        current_role = d.get('role') or 'free'

        st.markdown(f"**{nome}** (`{user_id}`)")
        st.write(f"Treinos: {len(d.get('frequencia', []))} | Role Atual: **{current_role.upper()}**")

        c1, c2, c3, c4 = st.columns(4)
        with c1:
            if st.button("üëÅÔ∏è Ver Dados", key=f"ver_{user_id}"):
                 st.json(d)

        with c2:
            if current_role != 'vip' and current_role != 'admin':
                if st.button("‚≠ê Tornar VIP", key=f"make_vip_{user_id}", type="primary"):
                    try:
                        db.collection('usuarios').document(user_id).update({'role': 'vip'})
                        st.success(f"{nome} agora √© VIP!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao tornar VIP: {e}")

        with c3:
            if current_role != 'free' and current_role != 'admin':
                 if st.button("‚¨áÔ∏è Tornar Free", key=f"make_free_{user_id}"):
                    try:
                        db.collection('usuarios').document(user_id).update({'role': 'free'})
                        st.success(f"{nome} agora √© Free.")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao tornar Free: {e}")

        with c4:
            if current_role != 'admin':
                if st.button("üóëÔ∏è Excluir", key=f"del_{user_id}"):
                    st.session_state['user_to_delete'] = user_id
                    st.session_state['confirm_delete_user'] = True
                    st.rerun()
        st.markdown("---")

    # L√≥gica de confirma√ß√£o de exclus√£o
    if st.session_state.get('confirm_delete_user'):
        st.warning("Confirmar exclus√£o do usu√°rio (irrevog√°vel).")
        ca, cb = st.columns(2)
        with ca:
            if st.button("‚úÖ Confirmar exclus√£o"):
                uid_del = st.session_state.get('user_to_delete')
                if uid_del:
                    try:
                        try: auth.delete_user(uid_del)
                        except Exception: pass
                        db.collection('usuarios').document(uid_del).delete()
                        st.success("Usu√°rio exclu√≠do.")
                    except Exception as e: st.error(f"Erro ao excluir: {e}")
                st.session_state['confirm_delete_user'] = False; st.session_state['user_to_delete'] = None; st.rerun()
        with cb:
            if st.button("‚ùå Cancelar"):
                st.session_state['confirm_delete_user'] = False; st.session_state['user_to_delete'] = None; st.rerun()


def render_premade_workout_viewer():
    """Exibe o plano de treino pr√©-feito selecionado."""
    workout_id = st.session_state.get('selected_premade_workout')
    # Se, por algum motivo, o ID n√£o for encontrado, volte
    if not workout_id or workout_id not in PREMADE_WORKOUTS_DB:
        st.error("Erro ao carregar o treino. Voltando √† biblioteca.")
        st.session_state.pop('selected_premade_workout', None)
        st.rerun()
        return

    workout = PREMADE_WORKOUTS_DB[workout_id]

    # Bot√£o para voltar
    if st.button("‚Üê Voltar para a Biblioteca"):
        del st.session_state['selected_premade_workout']
        st.rerun()
        return

    st.title(workout["title"])
    st.markdown(f"_{workout['description']}_")
    st.markdown("---")

    # Reutiliza a l√≥gica de exibi√ß√£o de 'render_meu_treino'
    plano = workout['plano']
    for nome_treino, exercicios_lista in plano.items():
        if not exercicios_lista: continue

        st.subheader(nome_treino)
        df_treino = pd.DataFrame(exercicios_lista)

        for index, row in df_treino.iterrows():
            exercicio = row.get('Exerc√≠cio', 'N/A')
            series = row.get('S√©ries', 'N/A')
            repeticoes = row.get('Repeti√ß√µes', 'N/A')
            descanso = row.get('Descanso', 'N/A')

            with st.expander(f"**{exercicio}** | {series} S√©ries x {repeticoes} Reps"):
                col_media, col_instr = st.columns([1, 2])  # Propor√ß√£o [1, 2]

                with col_media:
                    video_url = find_exercise_video_youtube(exercicio)
                    if video_url:
                        st.link_button("üé• Assistir Execu√ß√£o", video_url)
                        st.caption(f"Abre o v√≠deo de {exercicio} no YouTube")
                    else:
                        st.info("V√≠deo de execu√ß√£o indispon√≠vel.")

                with col_instr:
                    st.markdown("##### üìã **Instru√ß√µes**")
                    st.markdown(
                        f"- **S√©ries:** `{series}`\n- **Repeti√ß√µes:** `{repeticoes}`\n- **Descanso:** `{descanso}`")

                    ex_data = EXERCICIOS_DB.get(exercicio)
                    if ex_data:
                        st.markdown("---")
                        st.write(f"**Grupo Muscular:** {ex_data.get('grupo', 'N/A')}")
                        st.write(f"**Equipamento:** {ex_data.get('equipamento', 'N/A')}")
                        if ex_data.get('descricao'):
                            st.markdown("---")
                            st.markdown(f"**üìù Como Fazer:**\n{ex_data.get('descricao')}")
                    else:
                        st.warning(f"Exerc√≠cio '{exercicio}' n√£o encontrado na Base de Dados. Descri√ß√£o indispon√≠vel.")
        st.markdown("---")


def render_workout_card_grid():
    """Exibe a grade de cards de treino pr√©-feitos."""
    st.info(
        "Explore programas de treino completos, criados por especialistas. Clique em 'Ver Plano de Treino' para ver os detalhes.")
    st.markdown("---")

    # Define o n√∫mero de colunas para os cards
    num_cols = 3
    # L√™ dinamicamente CADA item do seu banco de dados de treinos
    workout_items = list(PREMADE_WORKOUTS_DB.items())

    # Faz um loop por todos os treinos que encontrar
    for i in range(0, len(workout_items), num_cols):
        cols = st.columns(num_cols)
        batch = workout_items[i:i + num_cols]  # Pega 3 treinos por vez

        for j, (workout_id, workout) in enumerate(batch):
            with cols[j]:
                with st.container(border=True):
                    try:
                        # Usa 'use_container_width' (corrigido do aviso)
                        st.image(workout["image_url"], use_container_width=True)
                    except Exception:
                        st.error("Imagem n√£o p√¥de ser carregada.")  # Fallback

                    st.subheader(workout["title"])
                    st.caption(workout["description"])

                    # Bot√£o que define o ID do treino selecionado
                    if st.button("Ver Plano de Treino", key=workout_id, use_container_width=True, type="primary"):
                        st.session_state['selected_premade_workout'] = workout_id
                        st.rerun()


def render_vip_library():
    """Fun√ß√£o principal da p√°gina 'Biblioteca VIP', decide o que mostrar."""
    st.title("üìö Biblioteca de Treinos VIP")

    # Verifica se um treino foi selecionado
    if st.session_state.get('selected_premade_workout'):
        # Se sim, mostra a visualiza√ß√£o detalhada do treino
        render_premade_workout_viewer()
    else:
        # Se n√£o, mostra a grade de cards para sele√ß√£o
        render_workout_card_grid()


def render_nutricao_gated():
    user_role = st.session_state.get('role', 'free')

    # --- CORRE√á√ÉO AQUI ---
    # Verifica se o role √© 'vip' OU 'admin'
    if user_role in ['vip', 'admin']:
    # --- FIM DA CORRE√á√ÉO ---
        render_nutricao_vip()
    else:
        render_nutricao_free()


# [NOVA] P√°gina de "An√∫ncio" para usu√°rios Free
def render_nutricao_free():
    st.title("ü•ó Nutri√ß√£o Avan√ßada (VIP)")

    # Reutiliza a fun√ß√£o de CTA (Call to Action) VIP
    render_vip_cta(
        title="‚ú® Desbloqueie sua Nutri√ß√£o VIP!",
        text="A calculadora b√°sica de TMB foi atualizada para um plano nutricional completo, exclusivo para membros VIP.",
        button_text="Quero o Plano Nutricional VIP!",
        key_prefix="cta_nutri"
    )

    st.markdown("---")
    st.subheader("O que voc√™ desbloqueia:")
    st.markdown("""
    * **Metas de Calorias e Macros de Precis√£o:** Baseado no seu n√≠vel de atividade e objetivo (cutting, bulking ou manuten√ß√£o).
    * **Sugest√£o de Divis√£o de Refei√ß√µes:** Um template de como dividir suas metas ao longo do dia.
    * **Biblioteca de Alimentos:** Exemplos de fontes limpas de prote√≠nas, carboidratos e gorduras.
    * **Calculadora de Hidrata√ß√£o:** Saiba quanta √°gua voc√™ realmente precisa beber.
    """)


# [NOVA] P√°gina de Nutri√ß√£o Robusta (apenas para VIPs)
def render_nutricao_vip():
    st.title("ü•ó Plano de Nutri√ß√£o VIP")
    dados = st.session_state.get('dados_usuario') or {}

    # Puxa dados do perfil ou usa defaults
    peso_default = float(dados.get('peso', 70.0))
    altura_default = float(dados.get('altura', 170.0))
    idade_default = int(dados.get('idade', 25))
    sexo_default_idx = 0 if dados.get('sexo', 'Masculino') == 'Masculino' else 1

    # ----------------- TABS DA P√ÅGINA -----------------
    tab_calc, tab_alimentos, tab_agua = st.tabs(["üìä Calculadora de Metas", "ü•ë Biblioteca de Alimentos", "üíß Hidrata√ß√£o"])

    with tab_calc:
        st.subheader("1. Calcule suas Metas Di√°rias")
        st.caption("Baseado na f√≥rmula de Mifflin-St Jeor e seus objetivos.")

        with st.form("form_nutri_vip"):
            col1, col2 = st.columns(2)
            with col1:
                peso = st.number_input("Peso (kg)", min_value=30.0, value=peso_default, step=0.1)
                altura = st.number_input("Altura (cm)", min_value=100.0, value=altura_default, step=0.1)
                idade = st.number_input("Idade", min_value=12, max_value=100, value=idade_default)

            with col2:
                sexo = st.selectbox("Sexo", ["Masculino", "Feminino"], index=sexo_default_idx)
                nivel_atividade = st.selectbox("N√≠vel de Atividade Di√°ria (incluindo treinos)",
                                               ['Sedent√°rio (pouco/nenhum exerc√≠cio)', 'Leve (1-3 dias/semana)',
                                                'Moderado (3-5 dias/semana)', 'Ativo (6-7 dias/semana)',
                                                'Muito Ativo (trabalho f√≠sico + treino)'], index=2)
                objetivo_dieta = st.selectbox("Qual seu objetivo nutricional?",
                                              ['Manter Peso (Manuten√ß√£o)', 'Perder Peso Leve (D√©ficit de ~10%)',
                                               'Perder Peso (D√©ficit de ~20%)', 'Ganhar Peso Leve (Super√°vit de ~10%)',
                                               'Ganhar Peso (Super√°vit de ~20%)'], index=0)

            calc_submitted = st.form_submit_button("Calcular Metas Nutricionais")

        if calc_submitted:
            # 1. Calcular TMB
            tmb = calcular_tmb_mifflin(sexo, peso, altura, idade)
            # 2. Calcular Gasto Cal√≥rico Di√°rio (TDEE)
            multiplicador = get_multiplicador_atividade(nivel_atividade)
            calorias_manutencao = tmb * multiplicador
            # 3. Ajustar pelo Objetivo
            calorias_meta = ajustar_calorias_objetivo(calorias_manutencao, objetivo_dieta)
            # 4. Calcular Macros VIP
            macros = calcular_macros_vip(calorias_meta, peso)

            st.session_state['macros_vip'] = macros  # Salva para usar na outra se√ß√£o
            st.session_state['calorias_meta'] = calorias_meta

            st.success(f"Metas calculadas para o objetivo: **{objetivo_dieta}**")

            # Exibir resultados das metas
            kcal_col, prot_col, carb_col, gord_col = st.columns(4)
            kcal_col.metric("Calorias Totais", f"{calorias_meta:,.0f} kcal")
            prot_col.metric("Prote√≠nas", f"{macros['proteina_g']:,.0f} g")
            carb_col.metric("Carboidratos", f"{macros['carboidratos_g']:,.0f} g")
            gord_col.metric("Gorduras", f"{macros['gordura_g']:,.0f} g")

        st.markdown("---")
        st.subheader("2. Sugest√£o de Divis√£o de Refei√ß√µes")

        # Usa os dados salvos no session_state se existirem
        if 'macros_vip' in st.session_state:
            num_refeicoes = st.slider("Dividir em quantas refei√ß√µes?", 3, 6, 4)
            df_refeicoes = distribuir_refeicoes(st.session_state['macros_vip'], num_refeicoes)
            st.dataframe(df_refeicoes, hide_index=True, use_container_width=True)
            st.caption(
                f"Esta √© uma sugest√£o de divis√£o. O total di√°rio √©: {st.session_state['calorias_meta']:,.0f} kcal (P: {st.session_state['macros_vip']['proteina_g']}g, C: {st.session_state['macros_vip']['carboidratos_g']}g, G: {st.session_state['macros_vip']['gordura_g']}g)")
        else:
            st.info("Calcule suas metas acima para ver a sugest√£o de divis√£o de refei√ß√µes.")

    with tab_alimentos:
        st.subheader("ü•ë Biblioteca de Alimentos Sugeridos")
        st.caption("Use esta lista como inspira√ß√£o para montar suas refei√ß√µes com base nas metas calculadas.")

        col_p, col_c, col_g = st.columns(3)
        with col_p:
            st.markdown("<h5>üçó Fontes de Prote√≠na</h5>", unsafe_allow_html=True)
            st.markdown("\n".join(f"- {item}" for item in ALIMENTOS_DB["Prote√≠nas"]))
        with col_c:
            st.markdown("<h5>üçö Fontes de Carboidratos</h5>", unsafe_allow_html=True)
            st.markdown("\n".join(f"- {item}" for item in ALIMENTOS_DB["Carboidratos"]))
        with col_g:
            st.markdown("<h5>ü•ë Fontes de Gordura</h5>", unsafe_allow_html=True)
            st.markdown("\n".join(f"- {item}" for item in ALIMENTOS_DB["Gorduras"]))

    with tab_agua:
        st.subheader("üíß Calculadora de Hidrata√ß√£o")
        peso_agua = st.number_input("Seu Peso (kg)", min_value=30.0, value=peso_default, step=0.1, key="peso_agua")
        ml_por_kg = st.slider("Mililitros (ml) por kg de peso", 30, 50, 35)

        meta_agua_l = (peso_agua * ml_por_kg) / 1000

        st.metric("Sua Meta Di√°ria de √Ågua", f"{meta_agua_l:.1f} Litros")
        st.caption("Lembre-se: em dias de treino intenso ou muito calor, voc√™ pode precisar de mais.")

# ---------------------------
# Page implementations
# ---------------------------
def render_workout_session():
    st.title("üî• Treino em Andamento")

    # Pega os dados do estado da sess√£o
    plano_atual = st.session_state.get('current_workout_plan', [])
    idx_atual = st.session_state.get('current_exercise_index', 0)

    if not plano_atual or idx_atual >= len(plano_atual):
        st.error("Erro ao carregar o exerc√≠cio atual. Voltando para a sele√ß√£o de treino.")
        st.session_state['workout_in_progress'] = False
        time.sleep(2)
        st.rerun()
        return

    exercicio_atual = plano_atual[idx_atual]
    nome_exercicio = exercicio_atual.get('Exerc√≠cio', 'Exerc√≠cio Desconhecido')
    series_str = exercicio_atual.get('S√©ries', '3')
    try:
        num_series = int(str(series_str).split('-')[0])
    except ValueError:
        num_series = 3

    progresso = (idx_atual + 1) / len(plano_atual)
    col_prog, col_timer = st.columns(2)
    col_prog.progress(progresso, text=f"Exerc√≠cio {idx_atual + 1} de {len(plano_atual)}")
    timer_placeholder = col_timer.empty()

    is_resting = False
    rest_timer_end_value = st.session_state.get('rest_timer_end', None)
    if rest_timer_end_value:
        remaining = rest_timer_end_value - time.time()
        if remaining > 0:
            is_resting = True
            mins, secs = divmod(int(remaining), 60)
            timer_placeholder.metric("‚è≥ Descanso", f"{mins:02d}:{secs:02d}")
            time.sleep(1)
            st.rerun()
        else:
            st.session_state.rest_timer_end = None
            st.toast("üí™ Descanso finalizado!")
            st.rerun()

    with st.container(border=True):
        col_video, col_details = st.columns([1, 2])
        with col_video:
            video_url = find_exercise_video_youtube(nome_exercicio)
            if video_url:
                st.link_button("üé• Assistir Execu√ß√£o", video_url)
                st.caption(f"Abre o v√≠deo de {nome_exercicio} no YouTube")
            else:
                st.info("V√≠deo indispon√≠vel.")
        with col_details:
            st.header(nome_exercicio)
            st.markdown(
                f"**S√©ries:** `{exercicio_atual.get('S√©ries', 'N/A')}` | **Repeti√ß√µes:** `{exercicio_atual.get('Repeti√ß√µes', 'N/A')}`\n**Descanso:** `{exercicio_atual.get('Descanso', 'N/A')}`")
            ex_data = EXERCICIOS_DB.get(nome_exercicio, {})
            descricao_exercicio = ex_data.get('descricao')
            if descricao_exercicio:
                st.markdown("---")
                st.caption(f"üìù **Como Fazer:** {descricao_exercicio}")

    st.subheader("Registre suas s√©ries")
    for i in range(num_series):
        set_key = f"set_{idx_atual}_{i}"
        if set_key not in st.session_state:
            st.session_state[set_key] = {'completed': False, 'weight': 0.0, 'reps': 0}
        set_info = st.session_state[set_key]
        cols = st.columns([1, 2, 2, 1])
        disable_inputs = is_resting and not set_info['completed']
        completed = cols[0].checkbox(f"S√©rie {i + 1}", value=set_info['completed'], key=f"check_{set_key}",
                                     disabled=disable_inputs)

        if completed and not set_info['completed']:
            if is_resting:
                st.warning("Termine seu descanso!");
                st.session_state[set_key]['completed'] = False;
                st.rerun()
            else:
                set_info['completed'] = True
                descanso_str = exercicio_atual.get('Descanso', '60s')
                try:
                    rest_seconds = int(re.search(r'\d+', descanso_str).group())
                except:
                    rest_seconds = 60
                st.session_state.rest_timer_end = time.time() + rest_seconds
                st.session_state.workout_log.append(
                    {'data': date.today().isoformat(), 'exercicio': nome_exercicio, 'series': i + 1,
                     'peso': set_info['weight'], 'reps': set_info['reps'], 'timestamp': iso_now()})
                st.rerun()
        if not set_info['completed']:
            set_info['weight'] = cols[1].number_input("Peso (kg)", key=f"weight_{set_key}",
                                                      value=float(set_info.get('weight', 0.0)), format="%.1f",
                                                      disabled=disable_inputs)
            set_info['reps'] = cols[2].number_input("Reps", key=f"reps_{set_key}", value=int(set_info.get('reps', 0)),
                                                    disabled=disable_inputs)
        else:
            cols[1].write(f"Peso: **{set_info.get('weight', 0.0)} kg**")
            cols[2].write(f"Reps: **{set_info.get('reps', 0)}**")

    st.markdown("---")
    all_sets_done = all(
        st.session_state.get(f"set_{idx_atual}_{i}", {}).get('completed', False) for i in range(num_series))
    nav_cols = st.columns([1, 1, 1])

    with nav_cols[1]:  # Bot√£o Central
        if all_sets_done:
            if idx_atual < len(plano_atual) - 1:
                if st.button("Pr√≥ximo Exerc√≠cio ‚Üí", use_container_width=True, type="primary", disabled=is_resting):
                    st.session_state['current_exercise_index'] += 1
                    st.rerun()
            else:
                if st.button("‚úÖ Concluir √öltimo Exerc√≠cio", use_container_width=True, type="primary",
                             disabled=is_resting):
                    hist = st.session_state.get('historico_treinos', [])
                    hist.extend(st.session_state.workout_log)
                    st.session_state['historico_treinos'] = hist
                    freq = st.session_state.get('frequencia', [])
                    today = date.today()
                    if today not in freq: freq.append(today); st.session_state['frequencia'] = freq
                    salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
                    st.session_state['workout_in_progress'] = False
                    st.session_state['workout_log'] = []
                    st.balloons()
                    st.success("Treino finalizado com sucesso!")

                    if st.session_state.get('role') == 'vip':
                        st.session_state['current_routine'] = COOLDOWN_ROUTINE_VIP_YOGA
                    else:
                        st.session_state['current_routine'] = COOLDOWN_ROUTINE

                    st.session_state.cooldown_in_progress = True
                    st.session_state.current_routine_exercise_index = 0

                    # --- CORRE√á√ÉO AQUI ---
                    # Sintaxe de limpeza corrigida (usando loop for)
                    keys_to_delete = [k for k in st.session_state if k.startswith('set_')]
                    for k in keys_to_delete:
                        del st.session_state[k]
                    # --- FIM DA CORRE√á√ÉO ---

                    time.sleep(1.5)
                    st.rerun()

    with nav_cols[2]:  # Bot√£o da Direita
        if st.button("‚ùå Desistir do Treino", use_container_width=True):
            st.session_state['workout_in_progress'] = False
            st.session_state['workout_log'] = []
            st.session_state['rest_timer_end'] = None

            # --- CORRE√á√ÉO AQUI ---
            # Sintaxe de limpeza corrigida (usando loop for)
            keys_to_delete = [k for k in st.session_state if k.startswith('set_')]
            for k in keys_to_delete:
                del st.session_state[k]
            # --- FIM DA CORRE√á√ÉO ---

            st.warning("Treino cancelado.")
            time.sleep(1)
            st.rerun()

    # CTA para Cooldown VIP
    if all_sets_done and idx_atual == len(plano_atual) - 1 and st.session_state.get('role') == 'free':
        st.markdown("---")
        with st.container(border=True):
            st.info(
                "üßò **Membros VIP t√™m acesso a rotinas de alongamento guiadas (Yoga, Foco em Recupera√ß√£o) ap√≥s o treino.**")
            if st.button("Quero as rotinas VIP!", key="cta_cooldown"):
                st.session_state['selected_page'] = "Solicitar VIP"
                st.rerun()


def render_warmup_session():
    st.title("üî• Aquecimento Guiado")

    # [MODIFICADO] Pega a rotina selecionada do session_state
    # 'current_routine' √© definida pelo bot√£o clicado em 'render_meu_treino'
    # Se n√£o for definida por algum motivo, usa a rotina padr√£o (WARMUP_ROUTINE)
    routine = st.session_state.get('current_routine', WARMUP_ROUTINE)

    idx = st.session_state.get('current_routine_exercise_index', 0)  # Pega o √≠ndice atual

    # Verifica se j√° terminou a rotina
    if idx >= len(routine):
        st.success("Aquecimento conclu√≠do! Pronto para o treino.")
        if st.button("Ir para Sele√ß√£o de Treino", type="primary"):
            # Limpa estados da rotina ao sair
            st.session_state.warmup_in_progress = False
            st.session_state.current_routine_exercise_index = 0
            st.session_state.pop('current_routine', None)  # Limpa a rotina selecionada
            # Limpa estados do timer (caso tenham sido usados em vers√µes anteriores)
            st.session_state.pop('routine_timer_end', None)
            st.session_state.pop('timer_finished_flag', None)
            st.rerun()
        st.stop()  # Interrompe a execu√ß√£o aqui se terminou

    # Pega os detalhes do exerc√≠cio atual
    exercise = routine[idx]
    nome = exercise["nome"]
    # duracao = exercise["duracao_s"] # Dura√ß√£o n√£o √© mais usada ativamente
    descricao = exercise["descricao"]

    st.header(f"{idx + 1}/{len(routine)}. {nome}")
    st.progress((idx + 1) / len(routine))

    col_video, col_info = st.columns([1, 1])

    # --- Coluna do V√≠deo ---
    with col_video:
        video_url = find_exercise_video_youtube(nome)
        if video_url:
            st.link_button("üé• Assistir Execu√ß√£o", video_url)
            st.caption(f"Abre o v√≠deo de {nome} no YouTube")
        else:
            st.info("V√≠deo indispon√≠vel.")

    # --- Coluna de Informa√ß√µes e Bot√£o Pr√≥ximo ---
    with col_info:
        st.markdown(f"**üìù Como Fazer:** {descricao}")
        st.markdown("---")

        # Bot√£o para avan√ßar para o pr√≥ximo exerc√≠cio
        if st.button("Pr√≥ximo Exerc√≠cio ‚Üí", key=f"next_warmup_{idx}", type="primary"):
            st.session_state.current_routine_exercise_index += 1
            st.rerun()  # Recarrega para mostrar o pr√≥ximo item

    # --- Fim da Coluna de Informa√ß√µes ---

    st.markdown("---")
    # Bot√£o para Sair (sempre vis√≠vel)
    if st.button("‚ùå Sair do Aquecimento", key="skip_warmup"):
        st.session_state.warmup_in_progress = False
        st.session_state.current_routine_exercise_index = 0
        st.session_state.pop('current_routine', None)  # Limpa a rotina selecionada
        st.session_state.pop('routine_timer_end', None)
        st.session_state.pop('timer_finished_flag', None)
        st.warning("Aquecimento interrompido.")
        time.sleep(1)
        st.rerun()

def render_cooldown_session():
    st.title("üßò Alongamento P√≥s-Treino")

    routine = COOLDOWN_ROUTINE
    idx = st.session_state.current_routine_exercise_index

    if idx >= len(routine):
        st.success("Alongamento conclu√≠do! √ìtima recupera√ß√£o.")
        if st.button("Voltar ao Dashboard"):
            st.session_state.cooldown_in_progress = False
            # Poderia redirecionar para uma p√°gina espec√≠fica se quisesse
            st.rerun()
        st.stop()

    exercise = routine[idx]
    nome = exercise["nome"]
    duracao = exercise["duracao_s"]  # Dura√ß√£o por lado, se aplic√°vel
    descricao = exercise["descricao"]

    st.header(f"{idx + 1}. {nome}")
    st.progress((idx + 1) / len(routine))
    st.info(f"Mantenha a posi√ß√£o por aproximadamente **{duracao} segundos** (por lado, se aplic√°vel).")

    col_video, col_info = st.columns([1, 1])

    with col_video:
        video_url = find_exercise_video_youtube(nome)
        if video_url:
            st.video(video_url)
        else:
            st.info("V√≠deo indispon√≠vel.")

    with col_info:
        st.markdown(f"**üìù Como Fazer:** {descricao}")
        st.markdown("---")
        # Bot√£o simples para avan√ßar (sem timer obrigat√≥rio no cooldown)
        if st.button("Pr√≥ximo Alongamento ‚Üí", key=f"next_cooldown_{idx}", type="primary"):
            st.session_state.current_routine_exercise_index += 1
            st.rerun()

    if st.button("‚ùå Finalizar Alongamento Agora", key="skip_cooldown"):
        st.session_state.cooldown_in_progress = False
        st.warning("Alongamento finalizado.")
        time.sleep(1)
        st.rerun()

def render_rede_social():
    st.title("üåê Feed Social")
    st.markdown("---")
    with st.expander("üí¨ Criar nova publica√ß√£o"):
        with st.form("form_novo_post", clear_on_submit=True):
            comentario = st.text_area("O que voc√™ est√° pensando?",
                                      placeholder="Compartilhe seu progresso, uma dica ou uma foto do seu treino!")
            foto_post = st.file_uploader("Adicionar uma foto", type=['png', 'jpg', 'jpeg'])
            submitted = st.form_submit_button("Publicar")
            if submitted:
                user_uid = st.session_state.get('user_uid')
                username = st.session_state.get('usuario_logado')
                img_b64 = None
                if foto_post:
                    try:
                        img = Image.open(foto_post).convert('RGB')
                        img.thumbnail((800, 800))
                        img_b64 = b64_from_pil(img)
                    except Exception as e:
                        st.error(f"Erro ao processar a imagem: {e}")
                with st.spinner("Publicando..."):
                    sucesso = salvar_post_firebase(user_uid, username, comentario, img_b64)
                    if sucesso:
                        st.success("Publica√ß√£o criada com sucesso!"); st.rerun()
                    else:
                        st.error("N√£o foi poss√≠vel criar a publica√ß√£o.")
    st.markdown("---")
    st.subheader("Seu Feed")
    user_uid = st.session_state.get('user_uid')
    posts = carregar_feed_firebase(user_uid)
    if not posts:
        st.info(
            "Seu feed est√° vazio. Siga outros atletas na p√°gina 'Buscar Usu√°rios' para ver as publica√ß√µes deles aqui!")
        return
    for post in posts:
        post_id = post.get('id')
        username = post.get('username', 'Usu√°rio An√¥nimo')
        timestamp = post.get('timestamp')
        data_post = timestamp.strftime("%d/%m/%Y √†s %H:%M") if isinstance(timestamp, datetime) else "algum tempo atr√°s"
        with st.container(border=True):
            st.markdown(f"**üë§ {username}** ¬∑ *{data_post}*")
            if post.get('text_content'): st.write(post['text_content'])
            if post.get('image_b64'):
                try:
                    st.image(base64.b64decode(post['image_b64']))
                except Exception:
                    st.warning("N√£o foi poss√≠vel carregar a imagem deste post.")
            like_count, comment_count = post.get('like_count', 0), post.get('comment_count', 0)
            col1, col2, _ = st.columns([1, 1, 5])
            with col1:
                if st.button(f"‚ù§Ô∏è Curtir ({like_count})", key=f"like_{post_id}"):
                    curtir_post(post_id, st.session_state.get('user_uid'));
                    st.rerun()
            with col2:
                st.write(f"üí¨ Coment√°rios ({comment_count})")
            with st.expander("Ver e adicionar coment√°rios"):
                comentarios = carregar_comentarios(post_id)
                if comentarios:
                    for comment in comentarios:
                        st.markdown(f"> **{comment.get('username', 'Usu√°rio')}:** {comment.get('text', '')}")
                else:
                    st.write("Nenhum coment√°rio ainda.")
                comment_text = st.text_input("Escreva um coment√°rio...", key=f"comment_input_{post_id}",
                                             label_visibility="collapsed")
                if st.button("Enviar", key=f"comment_btn_{post_id}"):
                    if comment_text:
                        sucesso = comentar_post(post_id, st.session_state.get('user_uid'),
                                                st.session_state.get('usuario_logado'), comment_text)
                        if sucesso: st.session_state[f"comment_input_{post_id}"] = ""; st.rerun()
                    else:
                        st.warning("O coment√°rio n√£o pode estar vazio.")


def render_buscar_usuarios():
    st.title("üîé Buscar Usu√°rios")
    st.info("Encontre outros atletas e comece a segui-los para ver suas publica√ß√µes no seu feed.")
    current_user_uid = st.session_state.get('user_uid')
    all_users = get_all_users()
    following_list = get_following_list(current_user_uid)
    if not all_users:
        st.warning("Nenhum usu√°rio encontrado.")
        return
    for user in all_users:
        user_id, username = user['id'], user['username']
        if user_id == current_user_uid: continue
        with st.container(border=True):
            col1, col2 = st.columns([3, 1])
            with col1:
                st.subheader(username)
            with col2:
                is_following = user_id in following_list
                if is_following:
                    if st.button("Deixar de Seguir", key=f"unfollow_{user_id}", use_container_width=True):
                        unfollow_user(current_user_uid, user_id);
                        st.success(f"Voc√™ deixou de seguir {username}.");
                        st.rerun()
                else:
                    if st.button("Seguir", key=f"follow_{user_id}", type="primary", use_container_width=True):
                        follow_user(current_user_uid, user_id);
                        st.success(f"Voc√™ est√° seguindo {username}!");
                        st.rerun()


def render_dashboard():
    st.title("üìä Dashboard")
    show_logo_center() # Mant√©m o logo e t√≠tulo
    st.markdown("---")

    col1, col2 = st.columns(2)
    user_role = st.session_state.get('role', 'free') # Pega o role do usu√°rio

    with col1:
        st.subheader("üöÄ Seu Progresso")
        num_treinos = len(set(st.session_state.get('frequencia', [])))
        st.metric("Total de Treinos Completos", num_treinos)

        streak_semanal = 0
        frequencia_completa = st.session_state.get('frequencia', [])
        if frequencia_completa:
            try:
                datas_treino = sorted([d for d in frequencia_completa if isinstance(d, date)])
                if datas_treino:
                    hoje = date.today(); semana_atual = hoje.isocalendar()[1]; ano_atual = hoje.year
                    semanas_treinadas = sorted(list(set(d.isocalendar()[0:2] for d in datas_treino)), reverse=True)
                    semana_esperada = semana_atual; ano_esperado = ano_atual
                    for ano_semana, num_semana in semanas_treinadas:
                        if ano_semana == ano_esperado and num_semana == semana_esperada:
                            streak_semanal += 1
                            dia_anterior = hoje - timedelta(weeks=streak_semanal)
                            semana_esperada = dia_anterior.isocalendar()[1]; ano_esperado = dia_anterior.year
                        else:
                            if streak_semanal == 0 and ano_semana == ano_atual and num_semana == semana_atual: streak_semanal = 1
                            break
            except Exception: streak_semanal = 0
        st.metric("üî• Sequ√™ncia Semanal", f"{streak_semanal} Semanas")

        conquistas = [n['msg'] for n in st.session_state.get('notificacoes', []) if n.get('tipo') == 'conquista']
        if conquistas: st.success(f"üèÜ √öltima Conquista: {conquistas[-1]}")


    with col2:
        st.subheader("üéØ Foco Atual")
        if num_treinos > 0:
            info = verificar_periodizacao(num_treinos); fase = info['fase_atual']; cor_fase = fase.get('cor', '#4ECDC4')
            st.markdown(f"""
                <div style='padding: 15px; border-radius: 10px; background-color: {cor_fase}; color: #FFFFFF; border-left: 5px solid #FFFFFF;'>
                <h4 style='margin:0; color: #FFFFFF;'>Fase: {fase['nome']} (Ciclo {info['numero_ciclo']})</h4>
                <small>{fase['reps']} reps ¬∑ {fase['series']} s√©ries ¬∑ Descanso {fase['descanso']}</small><br>
                <small>Treinos restantes na fase: {info['treinos_restantes']}</small>
                </div> <br> """, unsafe_allow_html=True)
        else: st.info("Complete seu primeiro treino para iniciar a periodiza√ß√£o!")

        quotes = ["...", "...", "..."] # Sua lista de frases
        st.markdown(f"> *‚Äú{random.choice(quotes)}‚Äù*", help="Frase do dia")

    st.markdown("---")
    st.subheader("üìÖ Calend√°rio de Treinos")

    # [GATING APLICADO AQUI]
    limite_dias_calendario = None # VIP v√™ tudo
    if user_role == 'free':
        limite_dias_calendario = 30 # Free v√™ √∫ltimos 30 dias
        st.caption(f"‚ÑπÔ∏è Usu√°rios VIP t√™m acesso ao hist√≥rico completo. Exibindo √∫ltimos {limite_dias_calendario} dias.")

    frequencia_para_calendario = []
    if frequencia_completa:
        hoje_cal = date.today()
        if limite_dias_calendario:
            data_limite_cal = hoje_cal - timedelta(days=limite_dias_calendario)
            frequencia_para_calendario = [d for d in frequencia_completa if isinstance(d, date) and d >= data_limite_cal]
        else: # VIP
            frequencia_para_calendario = [d for d in frequencia_completa if isinstance(d, date)]

    if frequencia_para_calendario:
        dias_display = 30 # Sempre mostrar 30 dias no visual
        ultimos_dias_cal = [hoje_cal - timedelta(days=i) for i in range(dias_display)]
        treinos_periodo_cal = set(frequencia_para_calendario)
        df_cal = pd.DataFrame({'data_obj': ultimos_dias_cal})
        df_cal['data'] = df_cal['data_obj'].apply(lambda d: d.strftime('%Y-%m-%d'))
        df_cal['treinou'] = df_cal['data_obj'].apply(lambda d: 1 if d in treinos_periodo_cal else 0)
        df_cal['dia_semana_num'] = df_cal['data_obj'].apply(lambda d: d.weekday())
        df_cal['dia_semana_nome'] = df_cal['data_obj'].apply(lambda d: d.strftime('%a'))
        df_cal['semana_ano'] = df_cal['data_obj'].apply(lambda d: d.isocalendar()[1])
        dias_ordem = ["Seg", "Ter", "Qua", "Qui", "Sex", "Sab", "Dom"]
        try:
            heatmap_data = df_cal.pivot_table(index='semana_ano', columns='dia_semana_num', values='treinou', aggfunc='max').fillna(0)
            heatmap_data = heatmap_data.reindex(columns=range(7), fill_value=0); heatmap_data.columns = dias_ordem
            fig_cal = px.imshow(heatmap_data, labels=dict(x="Dia", y="Semana", color="Treinou"), x=dias_ordem, text_auto=False, aspect="auto", color_continuous_scale=px.colors.sequential.Greens)
            fig_cal.update_xaxes(side="top"); fig_cal.update_layout(title="Vis√£o Semanal (Verde = Treinou)")
            st.plotly_chart(fig_cal, use_container_width=True)
        except Exception as e:
             st.warning(f"N√£o foi poss√≠vel gerar o calend√°rio visual: {e}")
             st.dataframe(df_cal[['data', 'dia_semana_nome', 'treinou']].sort_values(by='data').head(30))
    else:
        st.info("Registre treinos para ver o calend√°rio.")


def render_questionario():
    st.title("üèãÔ∏è Perfil do Atleta")
    st.markdown("Responda ao formul√°rio para gerarmos um plano de treino **exclusivo para voc√™**.")
    dados = st.session_state.get('dados_usuario') or {}
    with st.form("form_q"):
        col1, col2 = st.columns(2)
        with col1:
            nome = st.text_input("Nome completo", value=dados.get('nome', ''))
            idade = st.number_input("Idade", 12, 100, value=dados.get('idade', 25))
            peso = st.number_input("Peso (kg)", 30.0, 200.0, value=dados.get('peso', 70.0), step=0.1)
            altura = st.number_input("Altura (cm)", 100.0, 250.0, value=dados.get('altura', 170.0), step=0.1)
            # [NOVO] Campo Sexo
            sexo = st.selectbox("Sexo", ["Masculino", "Feminino"], index=0 if dados.get('sexo', 'Masculino') == 'Masculino' else 1)

        with col2:
            nivel = st.selectbox("Qual seu n√≠vel de experi√™ncia?", ["Iniciante", "Intermedi√°rio/Avan√ßado"],
                                 index=0 if dados.get('nivel') == 'Iniciante' else 1)
            objetivo = st.selectbox("Qual seu objetivo principal?", ["Hipertrofia", "Emagrecimento", "Condicionamento"],
                                      index=["Hipertrofia", "Emagrecimento", "Condicionamento"].index(
                                          dados.get('objetivo', 'Hipertrofia')))
            dias = st.slider("Quantos dias por semana pode treinar?", 2, 6, value=dados.get('dias_semana', 3))

        restricoes = st.multiselect("Possui alguma dor ou restri√ß√£o nas seguintes √°reas?",
                                    ["Lombar", "Joelhos", "Ombros", "Cotovelos", "Punhos"],
                                    default=dados.get('restricoes', []))

        if st.form_submit_button("Salvar Perfil e Gerar Treino"):
            # [MODIFICADO] Adiciona 'sexo' aos novos dados
            novos_dados = {'nome': nome, 'idade': idade, 'peso': peso, 'altura': altura, 'sexo': sexo, # <- Adicionado
                           'nivel': nivel, 'objetivo': objetivo, 'dias_semana': dias, 'restricoes': restricoes,
                           'data_cadastro': iso_now()}
            st.session_state['dados_usuario'] = novos_dados
            hp = st.session_state.get('historico_peso', [])
            if not hp or hp[-1].get('peso') != peso:
                hp.append({'data': iso_now(), 'peso': peso})
                st.session_state['historico_peso'] = hp
            with st.spinner("ü§ñ Criando seu plano de treino personalizado..."):
                st.session_state['plano_treino'] = gerar_plano_personalizado(novos_dados)
                time.sleep(1)
            uid = st.session_state.get('user_uid')
            if uid:
                salvar_dados_usuario_firebase(uid)
            st.success("Perfil salvo e plano de treino personalizado gerado com sucesso!")
            st.info("Acesse a p√°gina 'Meu Treino' para visualizar.")


def render_meu_treino():
    st.title("üí™ Meu Treino")
    plano = st.session_state.get('plano_treino')
    user_role = st.session_state.get('role', 'free')  # Pega o role do usu√°rio

    # Checagem inicial mais robusta para plano vazio
    plano_vazio = True
    if plano and isinstance(plano, dict):
        for nome_treino, treino_data in plano.items():
            # Verifica se √© um DataFrame n√£o vazio ou uma lista n√£o vazia de dicion√°rios
            if isinstance(treino_data, pd.DataFrame) and not treino_data.empty:
                plano_vazio = False;
                break
            elif isinstance(treino_data, list) and treino_data and all(isinstance(item, dict) for item in treino_data):
                plano_vazio = False;
                break

    if not plano or plano_vazio:
        st.info("Voc√™ ainda n√£o tem um plano de treino. V√° para a p√°gina 'Question√°rio' para gerar o seu primeiro!")
        return

    # Exibe a descri√ß√£o do plano
    dados = st.session_state.get('dados_usuario') or {}
    st.info(
        f"Este plano foi criado para um atleta **{dados.get('nivel', 'N/A')}** treinando **{dados.get('dias_semana', 'N/A')}** dias por semana com foco em **{dados.get('objetivo', 'N/A')}**.")
    st.markdown("---")

    # Bot√£o Geral de Aquecimento (para todos)
    if st.button("üî• Iniciar Aquecimento Padr√£o", use_container_width=True):
        st.session_state.warmup_in_progress = True
        st.session_state['current_routine'] = WARMUP_ROUTINE  # Define a rotina padr√£o
        st.session_state.current_routine_exercise_index = 0
        st.session_state.routine_timer_end = None
        st.rerun()

    # [NOVO] CTA para rotinas VIP
    if user_role == 'free':
        # Bot√£o sutil que leva para a p√°gina VIP
        st.caption("‚ú® Membros VIP t√™m acesso a mais rotinas (Mobilidade, Yoga).")
        if st.button("Saiba mais sobre rotinas VIP", key="cta_warmup_learn_more", type="link",
                     use_container_width=True):
            st.session_state['selected_page'] = "Solicitar VIP"
            st.rerun()
    else:  # Se for VIP
        # Bot√£o para rotina VIP (Exemplo)
        if st.button("ü§∏‚Äç‚ôÇÔ∏è Iniciar Aquecimento VIP (Mobilidade)", use_container_width=True):
            st.session_state.warmup_in_progress = True
            st.session_state['current_routine'] = WARMUP_ROUTINE_VIP_MOBILITY  # Define a rotina VIP
            st.session_state.current_routine_exercise_index = 0
            st.rerun()

    st.markdown("---")

    # Loop para exibir os treinos (A, B, C...)
    for nome_treino, treino_data in plano.items():
        # Garante que df_treino seja um DataFrame, tratando se treino_data j√° √© um DF ou uma lista
        if isinstance(treino_data, pd.DataFrame):
            df_treino = treino_data
        elif isinstance(treino_data, list):
            df_treino = pd.DataFrame(treino_data)  # Converte lista de dicts para DF
        else:
            df_treino = pd.DataFrame()  # Cria DF vazio se o dado for inv√°lido

        if df_treino.empty: continue  # Pula este dia se n√£o houver exerc√≠cios

        col1, col2 = st.columns([3, 1])
        with col1:
            st.subheader(nome_treino)
            st.caption(f"{len(df_treino)} exerc√≠cios")
        with col2:
            # Bot√£o para iniciar o modo interativo
            if st.button("‚ñ∂Ô∏è Iniciar Treino", key=f"start_{nome_treino}", use_container_width=True, type="primary"):
                st.session_state.update(
                    {'workout_in_progress': True, 'current_workout_plan': df_treino.to_dict('records'),
                     'current_exercise_index': 0, 'workout_log': [], 'rest_timer_end': None})
                st.rerun()

            # Bot√£o para registro r√°pido (contabilizar frequ√™ncia)
            if st.button("‚úÖ Marcar Conclu√≠do", key=f"quick_complete_{nome_treino}", use_container_width=True):
                hoje = date.today()
                frequencia_atual = st.session_state.get('frequencia', [])
                if hoje not in frequencia_atual:
                    frequencia_atual.append(hoje);
                    st.session_state['frequencia'] = frequencia_atual
                    salvar_dados_usuario_firebase(st.session_state.get('user_uid'))
                    st.toast(f"√ìtimo! Treino '{nome_treino}' contabilizado para hoje.")
                else:
                    st.toast("O treino de hoje j√° foi contabilizado!")
            st.caption("Marca o dia como treinado.")

        # Expanders para os exerc√≠cios
        for index, row in df_treino.iterrows():
            exercicio = row['Exerc√≠cio']
            series = row['S√©ries']
            repeticoes = row['Repeti√ß√µes']
            descanso = row['Descanso']

            with st.expander(f"**{exercicio}** | {series} S√©ries x {repeticoes} Reps"):
                col_media, col_instr = st.columns([1, 2])  # Propor√ß√£o [1, 2]

                with col_media:
                    video_url = find_exercise_video_youtube(exercicio)
                    if video_url:
                        st.link_button("üé• Assistir Execu√ß√£o", video_url)
                        st.caption(f"Abre o v√≠deo de {exercicio} no YouTube")
                    else:
                        st.info("V√≠deo de execu√ß√£o indispon√≠vel.")

                with col_instr:
                    st.markdown("##### üìã **Instru√ß√µes**")
                    st.markdown(
                        f"- **S√©ries:** `{series}`\n- **Repeti√ß√µes:** `{repeticoes}`\n- **Descanso:** `{descanso}`")
                    st.markdown("---")

                    ex_data = EXERCICIOS_DB.get(exercicio, {})
                    grupo_muscular = ex_data.get('grupo', 'N/A')
                    equipamento = ex_data.get('equipamento', 'N/A')
                    descricao_exercicio = ex_data.get('descricao')

                    st.write(f"**Grupo Muscular:** {grupo_muscular}")
                    st.write(f"**Equipamento:** {equipamento}")

                    if descricao_exercicio:
                        st.markdown("---")
                        st.markdown(f"**üìù Como Fazer:**\n{descricao_exercicio}")

                    st.markdown(" ")  # Espa√ßo
                    st.button("üîÑ Trocar Exerc√≠cio",
                              key=f"swap_{nome_treino}_{index}",
                              on_click=trocar_exercicio,
                              args=(nome_treino, index, exercicio),
                              use_container_width=True)
        st.markdown("---")  # Separador entre os treinos (A, B, C...)


def render_registrar_treino():
    st.title("üìù Registrar Treino")
    with st.form("f_registrar"):
        data = st.date_input("Data", datetime.now().date())
        tipos = list(st.session_state.get('plano_treino', {}).keys()) + ["Cardio", "Outro"] if st.session_state.get(
            'plano_treino') else ["Cardio", "Outro"]
        tipo = st.selectbox("Tipo", tipos)
        exercicio = st.selectbox("Exerc√≠cio", [""] + sorted(list(EXERCICIOS_DB.keys())))
        c1, c2, c3 = st.columns(3)
        with c1:
            series = st.number_input("S√©ries", 1, 12, 3)
        with c2:
            reps = st.number_input("Repeti√ß√µes", 1, 50, 10)
        with c3:
            peso = st.number_input("Peso (kg)", 0.0, 500.0, 0.0, 0.5)
        obs = st.text_area("Observa√ß√µes")
        if st.form_submit_button("Registrar"):
            if not exercicio:
                st.error("Escolha um exerc√≠cio.")
            else:
                novo = {'data': data.isoformat(), 'tipo': tipo, 'exercicio': exercicio, 'series': int(series),
                        'reps': int(reps), 'peso': float(peso), 'volume': int(series) * int(reps) * float(peso),
                        'observacoes': obs, 'timestamp': iso_now()}
                hist = st.session_state.get('historico_treinos', [])
                hist.append(novo)
                st.session_state['historico_treinos'] = hist
                freq = st.session_state.get('frequencia', [])
                if data not in freq:
                    freq.append(data)
                    st.session_state['frequencia'] = freq
                uid = st.session_state.get('user_uid')
                if uid: salvar_dados_usuario_firebase(uid)
                st.success("‚úÖ Treino registrado.")
                with st.form("form_feedback_quick"):
                    st.subheader("Feedback r√°pido")
                    nota = st.slider("Dificuldade (1-5)", 1, 5, 3)
                    dor = st.checkbox("Teve dor/desconforto")
                    comentarios = st.text_area("Coment√°rios (opcional)")
                    if st.form_submit_button("Enviar feedback"):
                        st.session_state['feedbacks'].append(
                            {'exercicio': exercicio, 'nota': nota, 'dor': dor, 'comentarios': comentarios,
                             'data': data.isoformat()})
                        if uid: salvar_dados_usuario_firebase(uid)
                        st.success("Obrigado pelo feedback!")

def render_prs(historico_completo):
    st.markdown("---")
    st.subheader("üèÜ Recordes Pessoais (VIP)")
    if not historico_completo:
        st.info("Registre treinos para calcular seus recordes.")
        return
    df_hist = pd.DataFrame(historico_completo)
    if not all(col in df_hist.columns for col in ['exercicio', 'peso', 'reps', 'data']):
         st.warning("Dados hist√≥ricos incompletos para PRs.")
         return
    df_hist['peso'] = pd.to_numeric(df_hist['peso'], errors='coerce')
    df_hist['reps'] = pd.to_numeric(df_hist['reps'], errors='coerce')
    try: # Tratamento robusto de datas
        def safe_to_date_prs(d):
            if isinstance(d, date): return d
            try: return datetime.fromisoformat(str(d).split('T')[0]).date()
            except: return None
        df_hist['data_obj'] = df_hist['data'].apply(safe_to_date_prs)
        df_hist = df_hist.dropna(subset=['peso', 'reps', 'data_obj'])
    except Exception: st.error("Erro ao processar datas para PRs."); return
    if df_hist.empty: st.info("Nenhum registro v√°lido para PRs."); return

    exercicios_pr = [ # Lista de exerc√≠cios principais
        'Agachamento com Barra', 'Agachamento Goblet', 'Leg Press 45¬∞', 'Supino Reto com Barra',
        'Supino Reto com Halteres', 'Desenvolvimento Militar com Barra', 'Desenvolvimento com Halteres (sentado)',
        'Remada Curvada com Barra', 'Puxada Alta (Lat Pulldown)', 'Barra Fixa', 'Levantamento Terra'
    ]
    df_prs = df_hist[df_hist['exercicio'].isin(exercicios_pr)].copy()
    if df_prs.empty: st.info("Nenhum registro para os exerc√≠cios principais de PR."); return

    # Pega o √≠ndice do maior peso para cada exerc√≠cio
    prs_idx = df_prs.loc[df_prs.groupby('exercicio')['peso'].idxmax()].index
    prs = df_prs.loc[prs_idx].sort_values(by='exercicio')

    st.dataframe(
        prs[['exercicio', 'peso', 'reps', 'data_obj']],
        column_config={
            "exercicio": "Exerc√≠cio",
            "peso": st.column_config.NumberColumn("Recorde (kg)", format="%.1f kg"),
            "reps": "Reps no Recorde",
            "data_obj": st.column_config.DateColumn("Data", format="DD/MM/YYYY")
        }, hide_index=True, use_container_width=True
    )


def render_solicitar_vip():
    st.title("‚ú® Solicitar Acesso VIP")
    st.markdown("""
    Desbloqueie o potencial m√°ximo do FitPro! Usu√°rios VIP t√™m acesso a:
    * üìà Hist√≥rico de treino completo (sem limite de dias).
    * üèÜ An√°lise de Recordes Pessoais (PRs).
    * ü§∏‚Äç‚ôÇÔ∏è Rotinas de aquecimento e alongamento adicionais.
    * ... e muito mais em breve!
    """)

    # Adiciona um container com borda para deixar o formul√°rio mais bonito
    with st.container(border=True):
        st.subheader("Formul√°rio de Solicita√ß√£o")
        st.info(
            "Preencha seu melhor e-mail para contato. Nossa equipe administrativa revisar√° sua solicita√ß√£o e enviar√° as instru√ß√µes de upgrade manualmente.")

        user_uid = st.session_state.get('user_uid')

        # N√£o vamos mais tentar buscar o email do Firebase Auth aqui
        # Em vez disso, vamos pedir ao usu√°rio

        with st.form("form_solicitar_vip", clear_on_submit=True):

            # Mostra o nome do usu√°rio, mas desabilitado (apenas para informa√ß√£o)
            st.text_input(
                "Usu√°rio (para refer√™ncia)",
                value=st.session_state.get('usuario_logado', 'N/A'),
                disabled=True
            )

            # [MUDAN√áA] Caixa de texto para o email em vez de texto est√°tico
            email_contato = st.text_input(
                "Seu melhor E-mail para contato*",
                placeholder="seu.email@exemplo.com"
            )

            mensagem = st.text_area(
                "Mensagem (Opcional)",
                placeholder="Gostaria de saber mais sobre o acesso VIP..."
            )

            submitted = st.form_submit_button("Enviar Solicita√ß√£o VIP")

            if submitted:
                # [MUDAN√áA] Valida√ß√£o do email inserido
                if not valid_email(email_contato):  # Reutiliza a fun√ß√£o helper que j√° temos
                    st.error("Por favor, insira um e-mail v√°lido.")
                elif user_uid and user_uid != 'demo-uid':
                    try:
                        # Salva a solicita√ß√£o no Firestore com o email fornecido pelo usu√°rio
                        db.collection('solicitacoes_vip').add({
                            'user_uid': user_uid,
                            'username': st.session_state.get('usuario_logado', 'N/A'),
                            'user_email_contato': email_contato,  # <-- Usa o email do formul√°rio
                            'mensagem': mensagem,
                            'timestamp': firestore.SERVER_TIMESTAMP,
                            'status': 'pendente'
                        })
                        st.success("Solicita√ß√£o enviada com sucesso! Entraremos em contato pelo e-mail fornecido.")
                        st.balloons()
                    except Exception as e:
                        st.error(f"Erro ao enviar solicita√ß√£o: {e}")
                else:
                    st.warning("Fun√ß√£o n√£o dispon√≠vel para modo demo ou usu√°rio n√£o identificado.")


def render_vip_cta(title="‚ú® Recurso VIP Exclusivo",
                   text="Esta funcionalidade est√° dispon√≠vel apenas para membros VIP.",
                   button_text="Quero ser VIP!",
                   key_prefix="cta_vip"):
    """
    Renderiza um "an√∫ncio" (Call to Action) padronizado para upgrade VIP.
    """
    with st.container(border=True):
        st.subheader(f"‚≠ê {title}")
        st.write(text)
        st.write("Desbloqueie este e outros recursos, como hist√≥rico ilimitado, an√°lises avan√ßadas e mais rotinas de treino!")

        # --- CORRE√á√ÉO AQUI ---
        # A l√≥gica de navega√ß√£o foi movida para o 'on_click'
        # O Streamlit far√° o rerun automaticamente ap√≥s o on_click.
        st.button(
            button_text,
            key=f"{key_prefix}_{title.replace(' ', '')}",
            type="primary",
            on_click=navigate_to_page,  # Chama a fun√ß√£o de callback
            args=("Solicitar VIP",)      # Passa o nome da p√°gina como argumento
        )
        # --- FIM DA CORRE√á√ÉO ---


def render_progresso():
    st.title("üìà Progresso")
    historico_completo = st.session_state.get('historico_treinos', [])
    user_role = st.session_state.get('role', 'free')

    if not historico_completo:
        st.info("Registre treinos para ver gr√°ficos.")
        return

    historico_filtrado = []
    # [GATING APLICADO AQUI]
    if user_role == 'free':
        limite_dias_prog = 60 # Exemplo: Free v√™ √∫ltimos 60 dias
        hoje_dt = datetime.now()
        data_limite_dt = hoje_dt - timedelta(days=limite_dias_prog)
        for record in historico_completo:
            try:
                data_str = record.get('data', '')
                if isinstance(data_str, date) and not isinstance(data_str, datetime): data_record_dt = datetime.combine(data_str, datetime.min.time())
                elif isinstance(data_str, datetime): data_record_dt = data_str
                else: data_record_dt = datetime.fromisoformat(str(data_str).split('T')[0])
                if data_record_dt >= data_limite_dt:
                    historico_filtrado.append(record)
            except: continue
        if len(historico_completo) > len(historico_filtrado):
            render_vip_cta(
                title="üìä Veja seu Hist√≥rico Completo",
                text=f"Usu√°rios FREE t√™m acesso aos √∫ltimos {limite_dias_prog} dias. Membros VIP veem todo o hist√≥rico de progresso, sem limites!",
                button_text="Desbloquear Hist√≥rico Completo",
                key_prefix="cta_hist"
            )
            st.markdown("---")
    else: # VIP ou Admin
        historico_filtrado = historico_completo

    if not historico_filtrado:
         st.info("Nenhum treino registrado no per√≠odo vis√≠vel.")
         if user_role in ['vip', 'admin']: render_prs(historico_completo) # VIP/Admin ainda v√™ PRs
         return

    df = pd.DataFrame(historico_filtrado)
    try:
         def safe_to_datetime(d):
            if isinstance(d, datetime): return d
            if isinstance(d, date): return datetime.combine(d, datetime.min.time())
            try: return datetime.fromisoformat(str(d).split('T')[0])
            except: return pd.NaT
         df['data'] = df['data'].apply(safe_to_datetime); df = df.dropna(subset=['data'])
    except Exception as e: st.error(f"Erro ao processar datas do hist√≥rico: {e}"); return

    st.subheader("Volume Total de Treino por Dia")
    if not df.empty and 'volume' in df.columns:
        df['volume'] = pd.to_numeric(df['volume'], errors='coerce'); df = df.dropna(subset=['volume'])
        if not df.empty:
            vol = df.groupby(df['data'].dt.date)['volume'].sum().reset_index()
            fig = px.line(vol, x='data', y='volume', title='Volume por dia', markers=True)
            st.plotly_chart(fig, use_container_width=True)
            vol['rolling'] = vol['volume'].rolling(7, min_periods=1).mean()
            if len(vol['rolling']) >= 8:
                last, prev = vol['rolling'].iloc[-1], vol['rolling'].iloc[-8]
                if prev > 0 and abs(last - prev) / prev < 0.05:
                    st.warning("Poss√≠vel plat√¥ detectado (varia√ß√£o de volume <5% nas √∫ltimas semanas).")
        else: st.info("Dados de volume insuficientes.")
    else: st.info("Dados de volume insuficientes.")

    # --- CORRE√á√ÉO AQUI ---
    # Chama a fun√ß√£o de PRs para VIPs e ADMINs
    if user_role in ['vip', 'admin']:
        render_prs(historico_completo)
    # --- FIM DA CORRE√á√ÉO ---
    else:
        st.markdown("---")
        render_vip_cta(
            title="üèÜ An√°lise de Recordes Pessoais (PRs)",
            text="Acompanhe seus recordes pessoais nos principais exerc√≠cios e veja sua for√ßa aumentar ao longo do tempo. Esta √© uma an√°lise exclusiva para membros VIP.",
            button_text="Desbloquear An√°lise de PRs",
            key_prefix="cta_prs"
        )


def render_fotos():
    st.title("üì∏ Fotos de Progresso")

    # Se√ß√£o para adicionar nova foto
    with st.expander("‚ûï Adicionar Nova Foto"):
        uploaded_file = st.file_uploader("Selecione uma imagem (PNG, JPG)", type=['png', 'jpg', 'jpeg'])
        if uploaded_file:
            try:
                img = Image.open(uploaded_file).convert('RGB')
                # Redimensionar para preview e para n√£o salvar imagens gigantes
                img.thumbnail((400, 400))
                st.image(img, caption='Preview', width=300)

                data_foto = st.date_input("Data da foto", date.today())  # Usa date.today()
                # Pega o peso atual como sugest√£o, mas permite editar
                peso_atual_sugerido = st.session_state.get('dados_usuario', {}).get('peso', 70.0)
                peso_foto = st.number_input("Seu Peso (kg) nesta foto", min_value=20.0,
                                            value=float(peso_atual_sugerido), step=0.1)
                nota_foto = st.text_area("Notas sobre esta foto (opcional)")

                if st.button("üíæ Salvar Foto"):
                    # Converte a imagem (redimensionada) para base64
                    b64_string = b64_from_pil(img)
                    nova_foto = {
                        'data': data_foto.isoformat(),  # Salva data como string ISO
                        'peso': float(peso_foto),
                        'imagem': b64_string,
                        'nota': nota_foto,
                        'timestamp': iso_now()  # Timestamp do upload
                    }

                    fotos_atuais = st.session_state.get('fotos_progresso', [])
                    fotos_atuais.append(nova_foto)
                    st.session_state['fotos_progresso'] = fotos_atuais  # Atualiza a lista na sess√£o

                    # Salva no Firebase
                    uid = st.session_state.get('user_uid')
                    if uid and uid != 'demo-uid':
                        salvar_dados_usuario_firebase(uid)

                    st.success("Foto salva com sucesso!")
                    st.rerun()  # Recarrega para mostrar a foto na galeria

            except Exception as e:
                st.error(f"Erro ao processar a imagem: {e}")

    st.markdown("---")
    st.subheader("üñºÔ∏è Galeria")

    # Exibe as fotos salvas, da mais recente para a mais antiga
    fotos_salvas = st.session_state.get('fotos_progresso', [])
    # Ordena pela data da foto (chave 'data'), tratando como string ISO
    fotos_ordenadas = sorted(fotos_salvas, key=lambda x: x.get('data', '1970-01-01'), reverse=True)

    if not fotos_ordenadas:
        st.info("Nenhuma foto de progresso salva ainda.")
    else:
        # Define quantas fotos por linha (ex: 3 ou 4)
        fotos_por_linha = 4
        cols = st.columns(fotos_por_linha)
        col_idx = 0

        for i, foto_data in enumerate(fotos_ordenadas):
            with cols[col_idx % fotos_por_linha]:
                try:
                    # Tenta decodificar e mostrar a imagem
                    img_display = pil_from_b64(foto_data['imagem'])
                    st.image(img_display, caption=f"üìÖ {foto_data.get('data')} | ‚öñÔ∏è {foto_data.get('peso')} kg",
                             use_column_width=True)

                    # Exibe a nota se houver
                    if foto_data.get('nota'):
                        st.caption(f"üìù {foto_data['nota']}")

                    # Bot√£o Excluir (usa o √≠ndice original 'i' na lista ordenada para exclus√£o)
                    # A fun√ß√£o confirm_delete_photo_dialog espera o √≠ndice na lista como est√° no session_state
                    # Precisamos encontrar o √≠ndice original na lista N√ÉO ordenada
                    try:
                        original_index = fotos_salvas.index(foto_data)  # Encontra √≠ndice na lista original
                        if st.button("üóëÔ∏è Excluir", key=f"del_foto_{i}", use_container_width=True):
                            confirm_delete_photo_dialog(original_index, st.session_state.get('user_uid'))
                    except ValueError:
                        st.warning("Erro ao encontrar √≠ndice para exclus√£o.")  # Caso raro

                except Exception as e:
                    st.error(f"Erro ao exibir foto {i}: {e}")

                st.markdown("---")  # Separador entre fotos na coluna
            col_idx += 1

    # L√≥gica de confirma√ß√£o de exclus√£o (caso n√£o use st.dialog)
    if not HAS_ST_DIALOG and st.session_state.get('confirm_excluir_foto'):
        st.error("Deseja realmente excluir esta foto?")
        idx_para_excluir = st.session_state.get('foto_a_excluir')  # Pega o √≠ndice original

        btn_cols = st.columns(2)
        with btn_cols[0]:
            if st.button("‚úÖ Confirmar exclus√£o", type="primary"):
                if idx_para_excluir is not None and 0 <= idx_para_excluir < len(fotos_salvas):
                    fotos_salvas.pop(idx_para_excluir)  # Remove pelo √≠ndice original
                    st.session_state['fotos_progresso'] = fotos_salvas  # Atualiza
                    uid = st.session_state.get('user_uid')
                    if uid and uid != 'demo-uid':
                        salvar_dados_usuario_firebase(uid)
                    st.success("Foto exclu√≠da.")
                else:
                    st.error("√çndice inv√°lido para exclus√£o.")
                # Limpa estado de confirma√ß√£o
                st.session_state['confirm_excluir_foto'] = False
                st.session_state['foto_a_excluir'] = None
                st.rerun()
        with btn_cols[1]:
            if st.button("‚ùå Cancelar"):
                st.session_state['confirm_excluir_foto'] = False
                st.session_state['foto_a_excluir'] = None
                st.rerun()
def render_comparar_fotos():
    st.title("üîç Comparar Fotos")
    fotos = st.session_state.get('fotos_progresso', [])
    if len(fotos) < 2: st.info("Adicione pelo menos duas fotos para comparar."); return
    options = [f"{i} - {f['data']} - {f.get('peso')}kg" for i, f in enumerate(fotos)]
    sel = st.multiselect("Escolha duas fotos (antes, depois)", options, default=[options[-1], options[0]])
    if len(sel) != 2: st.info("Selecione exatamente duas fotos."); return
    idx1, idx2 = options.index(sel[0]), options.index(sel[1])
    img1, img2 = pil_from_b64(fotos[idx1]['imagem']), pil_from_b64(fotos[idx2]['imagem'])
    col1, col2 = st.columns(2)
    with col1:
        st.image(img1, caption=f"Antes: {fotos[idx1]['data']}")
    with col2:
        st.image(img2, caption=f"Depois: {fotos[idx2]['data']}")
    alpha = st.slider("Alpha (0=antes,1=depois)", 0.0, 1.0, 0.5)
    blended = overlay_blend(img1, img2, alpha)
    st.image(blended, caption=f"Blend (alpha={alpha})", use_column_width=True)
    st.json(compare_images_metric(img1, img2))


def render_medidas():
    st.title("üìè Medidas Corporais")

    # --- Formul√°rio para adicionar nova medida ---
    # (Permanece igual)
    with st.form("form_med", clear_on_submit=True):
        tipo = st.selectbox("Tipo", ['Cintura', 'Quadril', 'Bra√ßo', 'Coxa', 'Peito'])
        valor = st.number_input("Valor (cm)", min_value=10.0, max_value=300.0, value=40.0, step=0.1)
        data_medida = st.date_input("Data", datetime.now().date())
        submitted = st.form_submit_button("Salvar medida")
        if submitted:
            medidas = st.session_state.get('medidas', [])
            nova_medida = {'tipo': tipo, 'valor': float(valor), 'data': data_medida.isoformat(), 'timestamp': iso_now()}
            medidas.append(nova_medida)
            st.session_state['medidas'] = medidas # Atualiza sem ordenar aqui
            uid = st.session_state.get('user_uid')
            if uid: salvar_dados_usuario_firebase(uid)
            st.success(f"Medida de {tipo} ({valor} cm) salva!")
            st.rerun()

    st.markdown("---")

    # --- Exibi√ß√£o das √öltimas Medidas Registradas ---
    # (Permanece igual, com a l√≥gica corrigida de sort/drop_duplicates)
    st.subheader("√öltimas Medidas Registradas")
    medidas_salvas = st.session_state.get('medidas', [])
    if not medidas_salvas:
        st.info("Nenhuma medida registrada ainda. Use o formul√°rio acima para adicionar.")
    else:
        latest_measurements = {}
        try:
            df_medidas = pd.DataFrame(medidas_salvas)
            df_medidas['data'] = pd.to_datetime(df_medidas['data'])
            if 'timestamp' not in df_medidas.columns: df_medidas['timestamp'] = pd.to_datetime(df_medidas['data'], errors='coerce').fillna(pd.Timestamp('1970-01-01'))
            else: df_medidas['timestamp'] = pd.to_datetime(df_medidas['timestamp'], errors='coerce').fillna(pd.Timestamp('1970-01-01'))
            df_medidas_sorted = df_medidas.sort_values(by=['data', 'timestamp'], ascending=[False, False])
            df_latest = df_medidas_sorted.drop_duplicates(subset='tipo', keep='first')
            latest_measurements = df_latest.set_index('tipo').to_dict('index')
        except Exception as e: st.error(f"Erro ao processar as medidas salvas: {e}")

        tipos_esperados = ['Cintura', 'Quadril', 'Bra√ßo', 'Coxa', 'Peito']
        cols = st.columns(len(tipos_esperados))
        for i, tipo_m in enumerate(tipos_esperados):
            with cols[i]:
                if tipo_m in latest_measurements:
                    medida = latest_measurements[tipo_m]; valor_m = medida['valor']; data_dt = medida['data']
                    data_m_str = data_dt.strftime('%d/%m/%Y') if pd.notnull(data_dt) else "Data inv√°lida"
                    st.metric(label=f"{tipo_m}", value=f"{valor_m:.1f} cm", delta=f"Em {data_m_str}", delta_color="off")
                else: st.metric(label=tipo_m, value="N/A", delta="N√£o registrado", delta_color="off")

    st.markdown("---")

    # --- [REFORMATADO] Exibi√ß√£o de Indicadores de Refer√™ncia (Sa√∫de) ---
    st.subheader("üìä Indicadores de Refer√™ncia (Sa√∫de)") # Emoji adicionado
    dados_usuario = st.session_state.get('dados_usuario')

    if dados_usuario and 'altura' in dados_usuario and 'sexo' in dados_usuario:
        altura_cm = dados_usuario.get('altura', 0)
        sexo_usr = dados_usuario.get('sexo', 'Masculino')

        if altura_cm > 0:
            # 1. Rela√ß√£o Cintura-Altura (RCA)
            rca_ideal_max = altura_cm / 2
            st.markdown(f"üéØ **Rela√ß√£o Cintura-Altura (RCA):**")
            st.markdown(f"> Para **menor risco cardiovascular**, idealmente a circunfer√™ncia da cintura deve ser **menor que `{rca_ideal_max:.1f} cm`** (metade da sua altura).")

            # 2. Circunfer√™ncia Abdominal (Limites de Risco)
            st.markdown(f"‚ö†Ô∏è **Circunfer√™ncia da Cintura (Risco Cardiovascular):**")
            if sexo_usr == 'Masculino':
                st.markdown("- Risco Aumentado: ‚â• `94 cm`\n- Risco **Muito** Aumentado: ‚â• `102 cm`")
            else: # Feminino
                st.markdown("- Risco Aumentado: ‚â• `80 cm`\n- Risco **Muito** Aumentado: ‚â• `88 cm`")
            st.caption("Valores de refer√™ncia comuns. Consulte um profissional de sa√∫de.")

        else:
            st.warning("Altura n√£o encontrada no seu perfil. Preencha o question√°rio para ver as refer√™ncias.")

        # 3. Rela√ß√£o Cintura-Quadril (RCQ)
        cintura_recente = latest_measurements.get('Cintura', {}).get('valor')
        quadril_recente = latest_measurements.get('Quadril', {}).get('valor')
        if cintura_recente and quadril_recente and quadril_recente > 0:
             rcq = cintura_recente / quadril_recente
             st.markdown("---") # Separador
             st.markdown(f"üìâ **Rela√ß√£o Cintura-Quadril (RCQ) Atual:** `{rcq:.2f}`")
             if sexo_usr == 'Masculino':
                 risco_rcq = "**Alto** üî¥" if rcq >= 0.90 else "**Baixo/Moderado** ‚úÖ"
                 st.markdown(f"- Refer√™ncia (Homens): Risco aumentado ‚â• `0.90`. Seu risco atual: {risco_rcq}")
             else: # Feminino
                 risco_rcq = "**Alto** üî¥" if rcq >= 0.85 else "**Baixo/Moderado** ‚úÖ"
                 st.markdown(f"- Refer√™ncia (Mulheres): Risco aumentado ‚â• `0.85`. Seu risco atual: {risco_rcq}")
             st.caption("RCQ √© outro indicador de risco cardiovascular e distribui√ß√£o de gordura.")

    else:
        st.info("‚ÑπÔ∏è Preencha o question√°rio (altura e sexo) para visualizar indicadores de refer√™ncia.")


def render_planner():
    st.title("üóìÔ∏è Planejamento Semanal Sugerido")
    dados_usuario = st.session_state.get('dados_usuario') or {}
    plano_treino = st.session_state.get('plano_treino')

    if not dados_usuario or not plano_treino:
        st.warning("Preencha o question√°rio para gerar seu plano e visualizar o planejamento.")
        return

    dias_semana_num = dados_usuario.get('dias_semana', 3)

    # Mapeamento de √≠ndice de dia da semana para nome
    dias_nomes = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"]

    # Obt√©m os √≠ndices dos dias sugeridos (0=Seg, 6=Dom)
    suggested_day_indices = suggest_days(dias_semana_num)
    suggested_day_names = [dias_nomes[i] for i in suggested_day_indices]

    st.info(
        f"Com base nos seus **{dias_semana_num} dias/semana**, sugerimos treinar em: **{', '.join(suggested_day_names)}**.")
    st.markdown("---")
    st.subheader("Pr√≥ximos 7 Dias:")

    # Pega os nomes dos treinos (A, B, C...) em ordem
    nomes_treinos = list(plano_treino.keys())
    # Cria um 'ciclo' para repetir os nomes dos treinos (A, B, C, A, B, C...)
    ciclo_treinos = cycle(nomes_treinos)

    # Calcula as datas para os pr√≥ximos 7 dias
    hoje = datetime.now().date()
    proximos_7_dias = [(hoje + timedelta(days=i)) for i in range(7)]

    # Cria 7 colunas para exibir os dias
    cols = st.columns(7)

    treino_counter = 0  # Contador para saber qual treino (A, B, C) usar

    for i, dia_data in enumerate(proximos_7_dias):
        dia_semana_idx = dia_data.weekday()  # 0 para Segunda, 6 para Domingo
        nome_dia_semana = dias_nomes[dia_semana_idx]
        data_formatada = dia_data.strftime("%d/%m")

        # Verifica se este dia da semana √© um dia sugerido para treino
        is_training_day = dia_semana_idx in suggested_day_indices

        with cols[i]:
            # Define o estilo do "cart√£o" do dia
            background_color = "#2E4053" if is_training_day else "#1C2833"  # Cor mais escura para descanso
            border_style = "2px solid #5DADE2" if is_training_day else "1px solid #566573"  # Borda destacada para treino

            st.markdown(f"""
            <div style="background-color:{background_color}; border:{border_style}; border-radius:10px; padding:15px; text-align:center; height:150px; display:flex; flex-direction:column; justify-content:space-between;">
                <div style="font-weight:bold; font-size:1.1em;">{nome_dia_semana}</div>
                <div style="font-size:0.9em; color:#AEB6BF;">{data_formatada}</div>
            """, unsafe_allow_html=True)

            if is_training_day:
                # Pega o pr√≥ximo nome de treino do ciclo
                nome_treino_do_dia = next(ciclo_treinos)
                st.markdown(f"""
                    <div style="font-size:1.5em;">üí™</div>
                    <div style="font-weight:bold; color:#5DADE2;">Treino</div>
                    <div style="font-size:0.8em; color:#AEB6BF;">({nome_treino_do_dia.split(':')[0]})</div> 
                    </div> 
                """, unsafe_allow_html=True)  # Fecha o div do cart√£o
            else:
                st.markdown(f"""
                    <div style="font-size:1.5em;">üßò</div>
                    <div style="color:#85929E;">Descanso</div>
                    </div>
                """, unsafe_allow_html=True)  # Fecha o div do cart√£o

    st.markdown("---")
    st.caption("Este √© um planejamento sugerido. Sinta-se √† vontade para ajustar √† sua rotina.")


def suggest_days(dias_sem: int):
    if dias_sem <= 0: return []
    step = 7 / dias_sem
    return sorted(list(set([int(round(i * step)) % 7 for i in range(dias_sem)])))


def render_metas():
    st.title("üéØ Metas")
    with st.form("form_meta"):
        descricao = st.text_input("Descri√ß√£o")
        alvo = st.number_input("Valor Alvo", 0.0, format="%.1f")
        prazo = st.date_input("Prazo", min_value=datetime.now().date())
        if st.form_submit_button("Adicionar"):
            metas = st.session_state.get('metas', [])
            metas.append(
                {'descricao': descricao, 'valor_alvo': alvo, 'prazo': prazo.isoformat(), 'criada_em': iso_now(),
                 'concluida': False})
            st.session_state['metas'] = metas
            uid = st.session_state.get('user_uid')
            if uid: salvar_dados_usuario_firebase(uid)
            st.success("Meta adicionada.")
    for i, m in enumerate(st.session_state.get('metas', [])):
        col1, col2 = st.columns([4, 1])
        with col1:
            st.write(f"{m['descricao']} - Alvo: {m['valor_alvo']} - Prazo: {m['prazo']}")
        with col2:
            if st.button("‚úÖ Concluir", key=f"conq_{i}"):
                st.session_state['metas'][i]['concluida'] = True
                uid = st.session_state.get('user_uid')
                if uid: salvar_dados_usuario_firebase(uid)
                st.success("Meta conclu√≠da.");
                st.rerun()


def calcular_tmb_mifflin(sexo, peso, altura, idade) -> float:
    """Calcula TMB (Taxa Metab√≥lica Basal) usando a f√≥rmula Mifflin-St Jeor."""
    if sexo.lower() == 'masculino':
        return (10 * peso) + (6.25 * altura) - (5 * idade) + 5
    else:  # Feminino
        return (10 * peso) + (6.25 * altura) - (5 * idade) - 161


def get_multiplicador_atividade(nivel_atividade_str: str) -> float:
    """Retorna o multiplicador TDEE com base no n√≠vel de atividade."""
    niveis = {
        'Sedent√°rio (pouco/nenhum exerc√≠cio)': 1.2,
        'Leve (1-3 dias/semana)': 1.375,
        'Moderado (3-5 dias/semana)': 1.55,
        'Ativo (6-7 dias/semana)': 1.725,
        'Muito Ativo (trabalho f√≠sico + treino)': 1.9
    }
    return niveis.get(nivel_atividade_str, 1.375)  # Default para 'Leve'


def ajustar_calorias_objetivo(calorias_base: float, objetivo_dieta: str) -> float:
    """Ajusta as calorias de manuten√ß√£o com base no objetivo (cutting/bulking)."""
    ajustes = {
        'Perder Peso (D√©ficit de ~20%)': 0.8,
        'Perder Peso Leve (D√©ficit de ~10%)': 0.9,
        'Manter Peso (Manuten√ß√£o)': 1.0,
        'Ganhar Peso Leve (Super√°vit de ~10%)': 1.1,
        'Ganhar Peso (Super√°vit de ~20%)': 1.2
    }
    return calorias_base * ajustes.get(objetivo_dieta, 1.0)  # Default para 'Manter'


def calcular_macros_vip(calorias_totais: float, peso_kg: float) -> dict:
    """Calcula a divis√£o de macros (Prote√≠na, Gordura, Carboidrato)."""
    # Regra: 2.0g de prote√≠na por kg de peso
    proteina_g = max(1.6 * peso_kg, peso_kg * 2.0)  # M√≠nimo de 1.6g/kg, alvo 2.0g/kg
    proteina_kcal = proteina_g * 4

    # Regra: 0.8g de gordura por kg de peso
    gordura_g = max(0.6 * peso_kg, peso_kg * 0.8)  # M√≠nimo 0.6g/kg, alvo 0.8g/kg
    gordura_kcal = gordura_g * 9

    # Restante das calorias vem dos carboidratos
    carboidratos_kcal = calorias_totais - proteina_kcal - gordura_kcal
    if carboidratos_kcal < 0:  # Caso de d√©ficit cal√≥rico extremo
        carboidratos_kcal = 0
    carboidratos_g = carboidratos_kcal / 4

    return {'proteina_g': round(proteina_g), 'gordura_g': round(gordura_g), 'carboidratos_g': round(carboidratos_g)}


def distribuir_refeicoes(macros: dict, num_refeicoes: int) -> pd.DataFrame:
    """Gera uma tabela de sugest√£o de divis√£o de macros por refei√ß√£o."""
    if num_refeicoes <= 0: return pd.DataFrame()

    p_por_refeicao = round(macros['proteina_g'] / num_refeicoes)
    g_por_refeicao = round(macros['gordura_g'] / num_refeicoes)
    c_por_refeicao = round(macros['carboidratos_g'] / num_refeicoes)
    kcal_por_refeicao = (p_por_refeicao * 4) + (g_por_refeicao * 9) + (c_por_refeicao * 4)

    refeicoes = []
    for i in range(1, num_refeicoes + 1):
        refeicoes.append({
            "Refei√ß√£o": f"Refei√ß√£o {i}",
            "Prote√≠na (g)": p_por_refeicao,
            "Gordura (g)": g_por_refeicao,
            "Carboidratos (g)": c_por_refeicao,
            "Calorias (kcal)": kcal_por_refeicao
        })

    return pd.DataFrame(refeicoes)

def render_busca():
    st.title("üîé Busca")
    q = st.text_input("Pesquisar exerc√≠cios / hist√≥rico / treinos")
    if q:
        exs = [name for name in EXERCICIOS_DB.keys() if q.lower() in name.lower()]
        st.subheader("Exerc√≠cios encontrados");
        st.write(exs)
        hist = st.session_state.get('historico_treinos', [])
        matches = [h for h in hist if q.lower() in h.get('exercicio', '').lower()]
        st.subheader("No hist√≥rico");
        st.dataframe(pd.DataFrame(matches))


def render_export_backup():
    st.title("üì§ Export / Backup")

    # --- Sec√ß√£o de Backup (existente) ---
    payload = {k: st.session_state.get(k) for k in
               ['dados_usuario', 'frequencia', 'historico_treinos', 'metas', 'fotos_progresso', 'medidas']}
    payload['plano_treino'] = plan_to_serial(st.session_state.get('plano_treino'))
    js = json.dumps(payload, default=str, ensure_ascii=False)
    st.download_button("üì• Baixar backup JSON", data=js, file_name="fitpro_backup.json", mime="application/json")
    if st.session_state.get('historico_treinos'):
        df = pd.DataFrame(st.session_state['historico_treinos'])
        st.download_button("üì• Exportar hist√≥rico CSV", data=df.to_csv(index=False), file_name="historico_treinos.csv", mime="text/csv")

    # Bot√£o para criar backup online
    if st.button("Criar backup na cole√ß√£o 'backups'"):
        uid = st.session_state.get('user_uid')
        if uid and uid != 'demo-uid':
            try:
                db.collection('backups').add({'uid': uid, 'payload': payload, 'created': datetime.now()})
                st.success("Backup criado na cole√ß√£o 'backups'.")
            except Exception as e:
                st.error(f"Erro ao criar backup online: {e}")
        elif uid == 'demo-uid':
             st.info("Backup online n√£o dispon√≠vel para modo demo.")
        else:
             st.error("Usu√°rio n√£o identificado para backup online.")

    # --- [CORRE√á√ÉO DE INDENTA√á√ÉO AQUI] ---
    # Este bloco inteiro foi movido um n√≠vel para a esquerda
    st.markdown("---") # Separador visual

    st.subheader("‚ö†Ô∏è Resetar Progresso")
    st.warning("Aten√ß√£o: Esta a√ß√£o apagar√° permanentemente todo o seu hist√≥rico de frequ√™ncia e treinos registrados. Use com cuidado.")

    if 'confirm_reset' not in st.session_state:
        st.session_state.confirm_reset = False

    if st.session_state.confirm_reset:
        st.error("Tem certeza que deseja apagar todo o progresso? Esta a√ß√£o n√£o pode ser desfeita.")
        col1, col2, _ = st.columns([1,1,3])
        with col1:
            if st.button("‚úÖ Sim, apagar tudo", type="primary", use_container_width=True):
                uid = st.session_state.get('user_uid')
                if uid and uid != 'demo-uid':
                    with st.spinner("Apagando progresso..."):
                        st.session_state['frequencia'] = []
                        st.session_state['historico_treinos'] = []
                        st.session_state['ciclo_atual'] = None
                        salvar_dados_usuario_firebase(uid)
                    st.success("Progresso resetado com sucesso!")
                    st.session_state.confirm_reset = False
                    time.sleep(1)
                    st.rerun()
                elif uid == 'demo-uid':
                    st.info("Reset n√£o aplic√°vel ao modo demo.")
                    st.session_state.confirm_reset = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Usu√°rio n√£o identificado para reset.")
                    st.session_state.confirm_reset = False

        with col2:
            if st.button("‚ùå Cancelar", use_container_width=True):
                st.session_state.confirm_reset = False
                st.rerun()
    else:
        if st.button("Resetar Hist√≥rico de Treinos", type="secondary"):
            st.session_state.confirm_reset = True
            st.rerun()

# ---------------------------
# Run app
# ---------------------------
# [MODIFICADO] Fun√ß√£o run() para verificar o token do Hugging Face
def run():
    # L√≥gica de login (permanece a mesma)
    if not st.session_state.get('usuario_logado'):
        uid_from_cookie = cookies.get('user_uid')
        if uid_from_cookie:
            try:
                doc = db.collection('usuarios').document(uid_from_cookie).get()
                if doc.exists:
                    st.session_state['user_uid'] = uid_from_cookie
                    st.session_state['usuario_logado'] = doc.to_dict().get('username', 'Usu√°rio')
                    carregar_dados_usuario_firebase(uid_from_cookie)
                else:
                    del cookies['user_uid']
            except Exception as e:
                st.error(f"Erro ao tentar login autom√°tico: {e}")
    if not st.session_state.get('usuario_logado'):
        render_auth()
    else:
        render_main()

if __name__ == "__main__":
    run()